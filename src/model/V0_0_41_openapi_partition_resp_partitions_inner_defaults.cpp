/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_defaults.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_partition_resp_partitions_inner_defaults::V0_0_41_openapi_partition_resp_partitions_inner_defaults()
{
    m_Memory_per_cpu = 0L;
    m_Memory_per_cpuIsSet = false;
    m_Partition_memory_per_cpuIsSet = false;
    m_Partition_memory_per_nodeIsSet = false;
    m_TimeIsSet = false;
    m_Job = utility::conversions::to_string_t("");
    m_JobIsSet = false;
}

V0_0_41_openapi_partition_resp_partitions_inner_defaults::~V0_0_41_openapi_partition_resp_partitions_inner_defaults()
{
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_partition_resp_partitions_inner_defaults::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Memory_per_cpuIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_cpu"))] = ModelBase::toJson(m_Memory_per_cpu);
    }
    if(m_Partition_memory_per_cpuIsSet)
    {
        val[utility::conversions::to_string_t(U("partition_memory_per_cpu"))] = ModelBase::toJson(m_Partition_memory_per_cpu);
    }
    if(m_Partition_memory_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("partition_memory_per_node"))] = ModelBase::toJson(m_Partition_memory_per_node);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_JobIsSet)
    {
        val[utility::conversions::to_string_t(U("job"))] = ModelBase::toJson(m_Job);
    }

    return val;
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_cpu")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMemoryPerCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerCpu);
            setMemoryPerCpu(refVal_setMemoryPerCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition_memory_per_cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition_memory_per_cpu")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_cpu> refVal_setPartitionMemoryPerCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartitionMemoryPerCpu);
            setPartitionMemoryPerCpu(refVal_setPartitionMemoryPerCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition_memory_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition_memory_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_node> refVal_setPartitionMemoryPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartitionMemoryPerNode);
            setPartitionMemoryPerNode(refVal_setPartitionMemoryPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_time> refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setJob;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJob);
            setJob(refVal_setJob);
        }
    }
    return ok;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Memory_per_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_cpu")), m_Memory_per_cpu));
    }
    if(m_Partition_memory_per_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition_memory_per_cpu")), m_Partition_memory_per_cpu));
    }
    if(m_Partition_memory_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition_memory_per_node")), m_Partition_memory_per_node));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if(m_JobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job")), m_Job));
    }
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        int64_t refVal_setMemoryPerCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_cpu"))), refVal_setMemoryPerCpu );
        setMemoryPerCpu(refVal_setMemoryPerCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition_memory_per_cpu"))))
    {
        std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_cpu> refVal_setPartitionMemoryPerCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition_memory_per_cpu"))), refVal_setPartitionMemoryPerCpu );
        setPartitionMemoryPerCpu(refVal_setPartitionMemoryPerCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition_memory_per_node"))))
    {
        std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_node> refVal_setPartitionMemoryPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition_memory_per_node"))), refVal_setPartitionMemoryPerNode );
        setPartitionMemoryPerNode(refVal_setPartitionMemoryPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_time> refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job"))))
    {
        utility::string_t refVal_setJob;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job"))), refVal_setJob );
        setJob(refVal_setJob);
    }
    return ok;
}

int64_t V0_0_41_openapi_partition_resp_partitions_inner_defaults::getMemoryPerCpu() const
{
    return m_Memory_per_cpu;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::setMemoryPerCpu(int64_t value)
{
    m_Memory_per_cpu = value;
    m_Memory_per_cpuIsSet = true;
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::memoryPerCpuIsSet() const
{
    return m_Memory_per_cpuIsSet;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::unsetMemory_per_cpu()
{
    m_Memory_per_cpuIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_cpu> V0_0_41_openapi_partition_resp_partitions_inner_defaults::getPartitionMemoryPerCpu() const
{
    return m_Partition_memory_per_cpu;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::setPartitionMemoryPerCpu(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_cpu>& value)
{
    m_Partition_memory_per_cpu = value;
    m_Partition_memory_per_cpuIsSet = true;
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::partitionMemoryPerCpuIsSet() const
{
    return m_Partition_memory_per_cpuIsSet;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::unsetPartition_memory_per_cpu()
{
    m_Partition_memory_per_cpuIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_node> V0_0_41_openapi_partition_resp_partitions_inner_defaults::getPartitionMemoryPerNode() const
{
    return m_Partition_memory_per_node;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::setPartitionMemoryPerNode(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_partition_memory_per_node>& value)
{
    m_Partition_memory_per_node = value;
    m_Partition_memory_per_nodeIsSet = true;
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::partitionMemoryPerNodeIsSet() const
{
    return m_Partition_memory_per_nodeIsSet;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::unsetPartition_memory_per_node()
{
    m_Partition_memory_per_nodeIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_time> V0_0_41_openapi_partition_resp_partitions_inner_defaults::getTime() const
{
    return m_Time;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::setTime(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults_time>& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::timeIsSet() const
{
    return m_TimeIsSet;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::unsetTime()
{
    m_TimeIsSet = false;
}
utility::string_t V0_0_41_openapi_partition_resp_partitions_inner_defaults::getJob() const
{
    return m_Job;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::setJob(const utility::string_t& value)
{
    m_Job = value;
    m_JobIsSet = true;
}

bool V0_0_41_openapi_partition_resp_partitions_inner_defaults::jobIsSet() const
{
    return m_JobIsSet;
}

void V0_0_41_openapi_partition_resp_partitions_inner_defaults::unsetJob()
{
    m_JobIsSet = false;
}
}
}
}
}


