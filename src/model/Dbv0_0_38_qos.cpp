/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_38_qos.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_38_qos::Dbv0_0_38_qos()
{
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_FlagsIsSet = false;
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_LimitsIsSet = false;
    m_PreemptIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Usage_factor = 0.0;
    m_Usage_factorIsSet = false;
    m_Usage_threshold = 0.0;
    m_Usage_thresholdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

Dbv0_0_38_qos::~Dbv0_0_38_qos()
{
}

void Dbv0_0_38_qos::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_38_qos::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_LimitsIsSet)
    {
        val[utility::conversions::to_string_t(U("limits"))] = ModelBase::toJson(m_Limits);
    }
    if(m_PreemptIsSet)
    {
        val[utility::conversions::to_string_t(U("preempt"))] = ModelBase::toJson(m_Preempt);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_Usage_factorIsSet)
    {
        val[utility::conversions::to_string_t(U("usage_factor"))] = ModelBase::toJson(m_Usage_factor);
    }
    if(m_Usage_thresholdIsSet)
    {
        val[utility::conversions::to_string_t(U("usage_threshold"))] = ModelBase::toJson(m_Usage_threshold);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }

    return val;
}

bool Dbv0_0_38_qos::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limits")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_qos_limits> refVal_setLimits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimits);
            setLimits(refVal_setLimits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preempt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preempt")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_qos_preempt> refVal_setPreempt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreempt);
            setPreempt(refVal_setPreempt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("usage_factor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usage_factor")));
        if(!fieldValue.is_null())
        {
            double refVal_setUsageFactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsageFactor);
            setUsageFactor(refVal_setUsageFactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("usage_threshold"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usage_threshold")));
        if(!fieldValue.is_null())
        {
            double refVal_setUsageThreshold;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsageThreshold);
            setUsageThreshold(refVal_setUsageThreshold);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    return ok;
}

void Dbv0_0_38_qos::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_LimitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limits")), m_Limits));
    }
    if(m_PreemptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preempt")), m_Preempt));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_Usage_factorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usage_factor")), m_Usage_factor));
    }
    if(m_Usage_thresholdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usage_threshold")), m_Usage_threshold));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
}

bool Dbv0_0_38_qos::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limits"))))
    {
        std::shared_ptr<Dbv0_0_38_qos_limits> refVal_setLimits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limits"))), refVal_setLimits );
        setLimits(refVal_setLimits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preempt"))))
    {
        std::shared_ptr<Dbv0_0_38_qos_preempt> refVal_setPreempt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preempt"))), refVal_setPreempt );
        setPreempt(refVal_setPreempt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("usage_factor"))))
    {
        double refVal_setUsageFactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usage_factor"))), refVal_setUsageFactor );
        setUsageFactor(refVal_setUsageFactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("usage_threshold"))))
    {
        double refVal_setUsageThreshold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usage_threshold"))), refVal_setUsageThreshold );
        setUsageThreshold(refVal_setUsageThreshold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    return ok;
}

utility::string_t Dbv0_0_38_qos::getDescription() const
{
    return m_Description;
}

void Dbv0_0_38_qos::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Dbv0_0_38_qos::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Dbv0_0_38_qos::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::vector<utility::string_t>& Dbv0_0_38_qos::getFlags()
{
    return m_Flags;
}

void Dbv0_0_38_qos::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool Dbv0_0_38_qos::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void Dbv0_0_38_qos::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t Dbv0_0_38_qos::getId() const
{
    return m_Id;
}

void Dbv0_0_38_qos::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Dbv0_0_38_qos::idIsSet() const
{
    return m_IdIsSet;
}

void Dbv0_0_38_qos::unsetId()
{
    m_IdIsSet = false;
}
std::shared_ptr<Dbv0_0_38_qos_limits> Dbv0_0_38_qos::getLimits() const
{
    return m_Limits;
}

void Dbv0_0_38_qos::setLimits(const std::shared_ptr<Dbv0_0_38_qos_limits>& value)
{
    m_Limits = value;
    m_LimitsIsSet = true;
}

bool Dbv0_0_38_qos::limitsIsSet() const
{
    return m_LimitsIsSet;
}

void Dbv0_0_38_qos::unsetLimits()
{
    m_LimitsIsSet = false;
}
std::shared_ptr<Dbv0_0_38_qos_preempt> Dbv0_0_38_qos::getPreempt() const
{
    return m_Preempt;
}

void Dbv0_0_38_qos::setPreempt(const std::shared_ptr<Dbv0_0_38_qos_preempt>& value)
{
    m_Preempt = value;
    m_PreemptIsSet = true;
}

bool Dbv0_0_38_qos::preemptIsSet() const
{
    return m_PreemptIsSet;
}

void Dbv0_0_38_qos::unsetPreempt()
{
    m_PreemptIsSet = false;
}
int32_t Dbv0_0_38_qos::getPriority() const
{
    return m_Priority;
}

void Dbv0_0_38_qos::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool Dbv0_0_38_qos::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void Dbv0_0_38_qos::unsetPriority()
{
    m_PriorityIsSet = false;
}
double Dbv0_0_38_qos::getUsageFactor() const
{
    return m_Usage_factor;
}

void Dbv0_0_38_qos::setUsageFactor(double value)
{
    m_Usage_factor = value;
    m_Usage_factorIsSet = true;
}

bool Dbv0_0_38_qos::usageFactorIsSet() const
{
    return m_Usage_factorIsSet;
}

void Dbv0_0_38_qos::unsetUsage_factor()
{
    m_Usage_factorIsSet = false;
}
double Dbv0_0_38_qos::getUsageThreshold() const
{
    return m_Usage_threshold;
}

void Dbv0_0_38_qos::setUsageThreshold(double value)
{
    m_Usage_threshold = value;
    m_Usage_thresholdIsSet = true;
}

bool Dbv0_0_38_qos::usageThresholdIsSet() const
{
    return m_Usage_thresholdIsSet;
}

void Dbv0_0_38_qos::unsetUsage_threshold()
{
    m_Usage_thresholdIsSet = false;
}
utility::string_t Dbv0_0_38_qos::getName() const
{
    return m_Name;
}

void Dbv0_0_38_qos::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Dbv0_0_38_qos::nameIsSet() const
{
    return m_NameIsSet;
}

void Dbv0_0_38_qos::unsetName()
{
    m_NameIsSet = false;
}
}
}
}
}


