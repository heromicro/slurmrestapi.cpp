/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_partition_info_minimums.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_partition_info_minimums::V0_0_39_partition_info_minimums()
{
    m_Nodes = 0;
    m_NodesIsSet = false;
}

V0_0_39_partition_info_minimums::~V0_0_39_partition_info_minimums()
{
}

void V0_0_39_partition_info_minimums::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_partition_info_minimums::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }

    return val;
}

bool V0_0_39_partition_info_minimums::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    return ok;
}

void V0_0_39_partition_info_minimums::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
}

bool V0_0_39_partition_info_minimums::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        int32_t refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    return ok;
}

int32_t V0_0_39_partition_info_minimums::getNodes() const
{
    return m_Nodes;
}

void V0_0_39_partition_info_minimums::setNodes(int32_t value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool V0_0_39_partition_info_minimums::nodesIsSet() const
{
    return m_NodesIsSet;
}

void V0_0_39_partition_info_minimums::unsetNodes()
{
    m_NodesIsSet = false;
}
}
}
}
}


