/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_ext_sensors_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_ext_sensors_data::V0_0_39_ext_sensors_data()
{
    m_Consumed_energyIsSet = false;
    m_TemperatureIsSet = false;
    m_Energy_update_time = 0L;
    m_Energy_update_timeIsSet = false;
    m_Current_watts = 0;
    m_Current_wattsIsSet = false;
}

V0_0_39_ext_sensors_data::~V0_0_39_ext_sensors_data()
{
}

void V0_0_39_ext_sensors_data::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_ext_sensors_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Consumed_energyIsSet)
    {
        val[utility::conversions::to_string_t(U("consumed_energy"))] = ModelBase::toJson(m_Consumed_energy);
    }
    if(m_TemperatureIsSet)
    {
        val[utility::conversions::to_string_t(U("temperature"))] = ModelBase::toJson(m_Temperature);
    }
    if(m_Energy_update_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("energy_update_time"))] = ModelBase::toJson(m_Energy_update_time);
    }
    if(m_Current_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("current_watts"))] = ModelBase::toJson(m_Current_watts);
    }

    return val;
}

bool V0_0_39_ext_sensors_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("consumed_energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumed_energy")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setConsumedEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumedEnergy);
            setConsumedEnergy(refVal_setConsumedEnergy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temperature"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temperature")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTemperature;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemperature);
            setTemperature(refVal_setTemperature);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("energy_update_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("energy_update_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEnergyUpdateTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnergyUpdateTime);
            setEnergyUpdateTime(refVal_setEnergyUpdateTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_watts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCurrentWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentWatts);
            setCurrentWatts(refVal_setCurrentWatts);
        }
    }
    return ok;
}

void V0_0_39_ext_sensors_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Consumed_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumed_energy")), m_Consumed_energy));
    }
    if(m_TemperatureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temperature")), m_Temperature));
    }
    if(m_Energy_update_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("energy_update_time")), m_Energy_update_time));
    }
    if(m_Current_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_watts")), m_Current_watts));
    }
}

bool V0_0_39_ext_sensors_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("consumed_energy"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setConsumedEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumed_energy"))), refVal_setConsumedEnergy );
        setConsumedEnergy(refVal_setConsumedEnergy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temperature"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTemperature;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temperature"))), refVal_setTemperature );
        setTemperature(refVal_setTemperature);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("energy_update_time"))))
    {
        int64_t refVal_setEnergyUpdateTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("energy_update_time"))), refVal_setEnergyUpdateTime );
        setEnergyUpdateTime(refVal_setEnergyUpdateTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_watts"))))
    {
        int32_t refVal_setCurrentWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_watts"))), refVal_setCurrentWatts );
        setCurrentWatts(refVal_setCurrentWatts);
    }
    return ok;
}

std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_ext_sensors_data::getConsumedEnergy() const
{
    return m_Consumed_energy;
}

void V0_0_39_ext_sensors_data::setConsumedEnergy(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Consumed_energy = value;
    m_Consumed_energyIsSet = true;
}

bool V0_0_39_ext_sensors_data::consumedEnergyIsSet() const
{
    return m_Consumed_energyIsSet;
}

void V0_0_39_ext_sensors_data::unsetConsumed_energy()
{
    m_Consumed_energyIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_ext_sensors_data::getTemperature() const
{
    return m_Temperature;
}

void V0_0_39_ext_sensors_data::setTemperature(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Temperature = value;
    m_TemperatureIsSet = true;
}

bool V0_0_39_ext_sensors_data::temperatureIsSet() const
{
    return m_TemperatureIsSet;
}

void V0_0_39_ext_sensors_data::unsetTemperature()
{
    m_TemperatureIsSet = false;
}
int64_t V0_0_39_ext_sensors_data::getEnergyUpdateTime() const
{
    return m_Energy_update_time;
}

void V0_0_39_ext_sensors_data::setEnergyUpdateTime(int64_t value)
{
    m_Energy_update_time = value;
    m_Energy_update_timeIsSet = true;
}

bool V0_0_39_ext_sensors_data::energyUpdateTimeIsSet() const
{
    return m_Energy_update_timeIsSet;
}

void V0_0_39_ext_sensors_data::unsetEnergy_update_time()
{
    m_Energy_update_timeIsSet = false;
}
int32_t V0_0_39_ext_sensors_data::getCurrentWatts() const
{
    return m_Current_watts;
}

void V0_0_39_ext_sensors_data::setCurrentWatts(int32_t value)
{
    m_Current_watts = value;
    m_Current_wattsIsSet = true;
}

bool V0_0_39_ext_sensors_data::currentWattsIsSet() const
{
    return m_Current_wattsIsSet;
}

void V0_0_39_ext_sensors_data::unsetCurrent_watts()
{
    m_Current_wattsIsSet = false;
}
}
}
}
}


