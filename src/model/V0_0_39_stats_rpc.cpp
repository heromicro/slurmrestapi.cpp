/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_stats_rpc.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_stats_rpc::V0_0_39_stats_rpc()
{
    m_Rpc = utility::conversions::to_string_t("");
    m_RpcIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_TimeIsSet = false;
}

V0_0_39_stats_rpc::~V0_0_39_stats_rpc()
{
}

void V0_0_39_stats_rpc::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_stats_rpc::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_RpcIsSet)
    {
        val[utility::conversions::to_string_t(U("rpc"))] = ModelBase::toJson(m_Rpc);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }

    return val;
}

bool V0_0_39_stats_rpc::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("rpc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rpc")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRpc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRpc);
            setRpc(refVal_setRpc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_stats_rpc_time> refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    return ok;
}

void V0_0_39_stats_rpc::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_RpcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rpc")), m_Rpc));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
}

bool V0_0_39_stats_rpc::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("rpc"))))
    {
        utility::string_t refVal_setRpc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rpc"))), refVal_setRpc );
        setRpc(refVal_setRpc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int32_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        std::shared_ptr<V0_0_39_stats_rpc_time> refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    return ok;
}

utility::string_t V0_0_39_stats_rpc::getRpc() const
{
    return m_Rpc;
}

void V0_0_39_stats_rpc::setRpc(const utility::string_t& value)
{
    m_Rpc = value;
    m_RpcIsSet = true;
}

bool V0_0_39_stats_rpc::rpcIsSet() const
{
    return m_RpcIsSet;
}

void V0_0_39_stats_rpc::unsetRpc()
{
    m_RpcIsSet = false;
}
int32_t V0_0_39_stats_rpc::getCount() const
{
    return m_Count;
}

void V0_0_39_stats_rpc::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool V0_0_39_stats_rpc::countIsSet() const
{
    return m_CountIsSet;
}

void V0_0_39_stats_rpc::unsetCount()
{
    m_CountIsSet = false;
}
std::shared_ptr<V0_0_39_stats_rpc_time> V0_0_39_stats_rpc::getTime() const
{
    return m_Time;
}

void V0_0_39_stats_rpc::setTime(const std::shared_ptr<V0_0_39_stats_rpc_time>& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool V0_0_39_stats_rpc::timeIsSet() const
{
    return m_TimeIsSet;
}

void V0_0_39_stats_rpc::unsetTime()
{
    m_TimeIsSet = false;
}
}
}
}
}


