/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time()
{
    m_Elapsed = 0;
    m_ElapsedIsSet = false;
    m_Eligible = 0L;
    m_EligibleIsSet = false;
    m_End = 0L;
    m_EndIsSet = false;
    m_PlannedIsSet = false;
    m_Start = 0L;
    m_StartIsSet = false;
    m_Submission = 0L;
    m_SubmissionIsSet = false;
    m_Suspended = 0;
    m_SuspendedIsSet = false;
    m_SystemIsSet = false;
    m_LimitIsSet = false;
    m_TotalIsSet = false;
    m_UserIsSet = false;
}

V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::~V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time()
{
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ElapsedIsSet)
    {
        val[utility::conversions::to_string_t(U("elapsed"))] = ModelBase::toJson(m_Elapsed);
    }
    if(m_EligibleIsSet)
    {
        val[utility::conversions::to_string_t(U("eligible"))] = ModelBase::toJson(m_Eligible);
    }
    if(m_EndIsSet)
    {
        val[utility::conversions::to_string_t(U("end"))] = ModelBase::toJson(m_End);
    }
    if(m_PlannedIsSet)
    {
        val[utility::conversions::to_string_t(U("planned"))] = ModelBase::toJson(m_Planned);
    }
    if(m_StartIsSet)
    {
        val[utility::conversions::to_string_t(U("start"))] = ModelBase::toJson(m_Start);
    }
    if(m_SubmissionIsSet)
    {
        val[utility::conversions::to_string_t(U("submission"))] = ModelBase::toJson(m_Submission);
    }
    if(m_SuspendedIsSet)
    {
        val[utility::conversions::to_string_t(U("suspended"))] = ModelBase::toJson(m_Suspended);
    }
    if(m_SystemIsSet)
    {
        val[utility::conversions::to_string_t(U("system"))] = ModelBase::toJson(m_System);
    }
    if(m_LimitIsSet)
    {
        val[utility::conversions::to_string_t(U("limit"))] = ModelBase::toJson(m_Limit);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("elapsed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("elapsed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setElapsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setElapsed);
            setElapsed(refVal_setElapsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eligible"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eligible")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEligible;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEligible);
            setEligible(refVal_setEligible);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnd);
            setEnd(refVal_setEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("planned"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("planned")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time_planned> refVal_setPlanned;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlanned);
            setPlanned(refVal_setPlanned);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStart);
            setStart(refVal_setStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submission"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submission")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSubmission;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmission);
            setSubmission(refVal_setSubmission);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suspended"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suspended")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSuspended;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuspended);
            setSuspended(refVal_setSuspended);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("system"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("system")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_time_system> refVal_setSystem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystem);
            setSystem(refVal_setSystem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("limit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_time_limit> refVal_setLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLimit);
            setLimit(refVal_setLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_time_total> refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_time_user> refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ElapsedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("elapsed")), m_Elapsed));
    }
    if(m_EligibleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eligible")), m_Eligible));
    }
    if(m_EndIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end")), m_End));
    }
    if(m_PlannedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("planned")), m_Planned));
    }
    if(m_StartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start")), m_Start));
    }
    if(m_SubmissionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submission")), m_Submission));
    }
    if(m_SuspendedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suspended")), m_Suspended));
    }
    if(m_SystemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("system")), m_System));
    }
    if(m_LimitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("limit")), m_Limit));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("elapsed"))))
    {
        int32_t refVal_setElapsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("elapsed"))), refVal_setElapsed );
        setElapsed(refVal_setElapsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eligible"))))
    {
        int64_t refVal_setEligible;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eligible"))), refVal_setEligible );
        setEligible(refVal_setEligible);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end"))))
    {
        int64_t refVal_setEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end"))), refVal_setEnd );
        setEnd(refVal_setEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("planned"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time_planned> refVal_setPlanned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("planned"))), refVal_setPlanned );
        setPlanned(refVal_setPlanned);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start"))))
    {
        int64_t refVal_setStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start"))), refVal_setStart );
        setStart(refVal_setStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submission"))))
    {
        int64_t refVal_setSubmission;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submission"))), refVal_setSubmission );
        setSubmission(refVal_setSubmission);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suspended"))))
    {
        int32_t refVal_setSuspended;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suspended"))), refVal_setSuspended );
        setSuspended(refVal_setSuspended);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("system"))))
    {
        std::shared_ptr<V0_0_40_job_time_system> refVal_setSystem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("system"))), refVal_setSystem );
        setSystem(refVal_setSystem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("limit"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_time_limit> refVal_setLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("limit"))), refVal_setLimit );
        setLimit(refVal_setLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        std::shared_ptr<V0_0_40_job_time_total> refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        std::shared_ptr<V0_0_40_job_time_user> refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    return ok;
}

int32_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getElapsed() const
{
    return m_Elapsed;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setElapsed(int32_t value)
{
    m_Elapsed = value;
    m_ElapsedIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::elapsedIsSet() const
{
    return m_ElapsedIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetElapsed()
{
    m_ElapsedIsSet = false;
}
int64_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getEligible() const
{
    return m_Eligible;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setEligible(int64_t value)
{
    m_Eligible = value;
    m_EligibleIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::eligibleIsSet() const
{
    return m_EligibleIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetEligible()
{
    m_EligibleIsSet = false;
}
int64_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getEnd() const
{
    return m_End;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setEnd(int64_t value)
{
    m_End = value;
    m_EndIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::endIsSet() const
{
    return m_EndIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetEnd()
{
    m_EndIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time_planned> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getPlanned() const
{
    return m_Planned;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setPlanned(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time_planned>& value)
{
    m_Planned = value;
    m_PlannedIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::plannedIsSet() const
{
    return m_PlannedIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetPlanned()
{
    m_PlannedIsSet = false;
}
int64_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getStart() const
{
    return m_Start;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setStart(int64_t value)
{
    m_Start = value;
    m_StartIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::startIsSet() const
{
    return m_StartIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetStart()
{
    m_StartIsSet = false;
}
int64_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getSubmission() const
{
    return m_Submission;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setSubmission(int64_t value)
{
    m_Submission = value;
    m_SubmissionIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::submissionIsSet() const
{
    return m_SubmissionIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetSubmission()
{
    m_SubmissionIsSet = false;
}
int32_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getSuspended() const
{
    return m_Suspended;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setSuspended(int32_t value)
{
    m_Suspended = value;
    m_SuspendedIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::suspendedIsSet() const
{
    return m_SuspendedIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetSuspended()
{
    m_SuspendedIsSet = false;
}
std::shared_ptr<V0_0_40_job_time_system> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getSystem() const
{
    return m_System;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setSystem(const std::shared_ptr<V0_0_40_job_time_system>& value)
{
    m_System = value;
    m_SystemIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::systemIsSet() const
{
    return m_SystemIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetSystem()
{
    m_SystemIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_time_limit> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getLimit() const
{
    return m_Limit;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setLimit(const std::shared_ptr<V0_0_41_job_desc_msg_time_limit>& value)
{
    m_Limit = value;
    m_LimitIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::limitIsSet() const
{
    return m_LimitIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetLimit()
{
    m_LimitIsSet = false;
}
std::shared_ptr<V0_0_40_job_time_total> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getTotal() const
{
    return m_Total;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setTotal(const std::shared_ptr<V0_0_40_job_time_total>& value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::totalIsSet() const
{
    return m_TotalIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetTotal()
{
    m_TotalIsSet = false;
}
std::shared_ptr<V0_0_40_job_time_user> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::getUser() const
{
    return m_User;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::setUser(const std::shared_ptr<V0_0_40_job_time_user>& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::userIsSet() const
{
    return m_UserIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time::unsetUser()
{
    m_UserIsSet = false;
}
}
}
}
}


