/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_job_desc_msg.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_job_desc_msg::V0_0_39_job_desc_msg()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Account_gather_frequency = utility::conversions::to_string_t("");
    m_Account_gather_frequencyIsSet = false;
    m_Admin_comment = utility::conversions::to_string_t("");
    m_Admin_commentIsSet = false;
    m_Allocation_node_list = utility::conversions::to_string_t("");
    m_Allocation_node_listIsSet = false;
    m_Allocation_node_port = 0;
    m_Allocation_node_portIsSet = false;
    m_ArgvIsSet = false;
    m_array = utility::conversions::to_string_t("");
    m_arrayIsSet = false;
    m_Batch_features = utility::conversions::to_string_t("");
    m_Batch_featuresIsSet = false;
    m_Begin_time = 0L;
    m_Begin_timeIsSet = false;
    m_FlagsIsSet = false;
    m_Burst_buffer = utility::conversions::to_string_t("");
    m_Burst_bufferIsSet = false;
    m_Clusters = utility::conversions::to_string_t("");
    m_ClustersIsSet = false;
    m_Cluster_constraint = utility::conversions::to_string_t("");
    m_Cluster_constraintIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_Contiguous = false;
    m_ContiguousIsSet = false;
    m_Container = utility::conversions::to_string_t("");
    m_ContainerIsSet = false;
    m_Container_id = utility::conversions::to_string_t("");
    m_Container_idIsSet = false;
    m_Core_specification = 0;
    m_Core_specificationIsSet = false;
    m_Thread_specification = 0;
    m_Thread_specificationIsSet = false;
    m_Cpu_binding = utility::conversions::to_string_t("");
    m_Cpu_bindingIsSet = false;
    m_Cpu_binding_flagsIsSet = false;
    m_Cpu_frequency = utility::conversions::to_string_t("");
    m_Cpu_frequencyIsSet = false;
    m_Cpus_per_tres = utility::conversions::to_string_t("");
    m_Cpus_per_tresIsSet = false;
    m_CrontabIsSet = false;
    m_Deadline = 0L;
    m_DeadlineIsSet = false;
    m_Delay_boot = 0;
    m_Delay_bootIsSet = false;
    m_Dependency = utility::conversions::to_string_t("");
    m_DependencyIsSet = false;
    m_End_time = 0L;
    m_End_timeIsSet = false;
    m_EnvironmentIsSet = false;
    m_Excluded_nodesIsSet = false;
    m_Extra = utility::conversions::to_string_t("");
    m_ExtraIsSet = false;
    m_Constraints = utility::conversions::to_string_t("");
    m_ConstraintsIsSet = false;
    m_Group_id = utility::conversions::to_string_t("");
    m_Group_idIsSet = false;
    m_Hetjob_group = 0;
    m_Hetjob_groupIsSet = false;
    m_Immediate = false;
    m_ImmediateIsSet = false;
    m_Job_id = 0;
    m_Job_idIsSet = false;
    m_Kill_on_node_fail = false;
    m_Kill_on_node_failIsSet = false;
    m_Licenses = utility::conversions::to_string_t("");
    m_LicensesIsSet = false;
    m_Mail_typeIsSet = false;
    m_Mail_user = utility::conversions::to_string_t("");
    m_Mail_userIsSet = false;
    m_Mcs_label = utility::conversions::to_string_t("");
    m_Mcs_labelIsSet = false;
    m_Memory_binding = utility::conversions::to_string_t("");
    m_Memory_bindingIsSet = false;
    m_Memory_binding_typeIsSet = false;
    m_Memory_per_tres = utility::conversions::to_string_t("");
    m_Memory_per_tresIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Network = utility::conversions::to_string_t("");
    m_NetworkIsSet = false;
    m_Nice = 0;
    m_NiceIsSet = false;
    m_Tasks = 0;
    m_TasksIsSet = false;
    m_Open_modeIsSet = false;
    m_Reserve_ports = 0;
    m_Reserve_portsIsSet = false;
    m_Overcommit = false;
    m_OvercommitIsSet = false;
    m_Partition = utility::conversions::to_string_t("");
    m_PartitionIsSet = false;
    m_Distribution_plane_size = 0;
    m_Distribution_plane_sizeIsSet = false;
    m_Power_flagsIsSet = false;
    m_Prefer = utility::conversions::to_string_t("");
    m_PreferIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_ProfileIsSet = false;
    m_Qos = utility::conversions::to_string_t("");
    m_QosIsSet = false;
    m_Reboot = false;
    m_RebootIsSet = false;
    m_Required_nodesIsSet = false;
    m_Requeue = false;
    m_RequeueIsSet = false;
    m_Reservation = utility::conversions::to_string_t("");
    m_ReservationIsSet = false;
    m_Script = utility::conversions::to_string_t("");
    m_ScriptIsSet = false;
    m_SharedIsSet = false;
    m_ExclusiveIsSet = false;
    m_Site_factor = 0;
    m_Site_factorIsSet = false;
    m_Spank_environmentIsSet = false;
    m_Distribution = utility::conversions::to_string_t("");
    m_DistributionIsSet = false;
    m_Time_limitIsSet = false;
    m_Time_minimumIsSet = false;
    m_Tres_bind = utility::conversions::to_string_t("");
    m_Tres_bindIsSet = false;
    m_Tres_freq = utility::conversions::to_string_t("");
    m_Tres_freqIsSet = false;
    m_Tres_per_job = utility::conversions::to_string_t("");
    m_Tres_per_jobIsSet = false;
    m_Tres_per_node = utility::conversions::to_string_t("");
    m_Tres_per_nodeIsSet = false;
    m_Tres_per_socket = utility::conversions::to_string_t("");
    m_Tres_per_socketIsSet = false;
    m_Tres_per_task = utility::conversions::to_string_t("");
    m_Tres_per_taskIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
    m_Wait_all_nodes = false;
    m_Wait_all_nodesIsSet = false;
    m_Kill_warning_flagsIsSet = false;
    m_Kill_warning_signal = utility::conversions::to_string_t("");
    m_Kill_warning_signalIsSet = false;
    m_Kill_warning_delayIsSet = false;
    m_Current_working_directory = utility::conversions::to_string_t("");
    m_Current_working_directoryIsSet = false;
    m_Cpus_per_task = 0;
    m_Cpus_per_taskIsSet = false;
    m_Minimum_cpus = 0;
    m_Minimum_cpusIsSet = false;
    m_Maximum_cpus = 0;
    m_Maximum_cpusIsSet = false;
    m_Nodes = utility::conversions::to_string_t("");
    m_NodesIsSet = false;
    m_Minimum_nodes = 0;
    m_Minimum_nodesIsSet = false;
    m_Maximum_nodes = 0;
    m_Maximum_nodesIsSet = false;
    m_Minimum_boards_per_node = 0;
    m_Minimum_boards_per_nodeIsSet = false;
    m_Minimum_sockets_per_board = 0;
    m_Minimum_sockets_per_boardIsSet = false;
    m_Sockets_per_node = 0;
    m_Sockets_per_nodeIsSet = false;
    m_Threads_per_core = 0;
    m_Threads_per_coreIsSet = false;
    m_Tasks_per_node = 0;
    m_Tasks_per_nodeIsSet = false;
    m_Tasks_per_socket = 0;
    m_Tasks_per_socketIsSet = false;
    m_Tasks_per_core = 0;
    m_Tasks_per_coreIsSet = false;
    m_Tasks_per_board = 0;
    m_Tasks_per_boardIsSet = false;
    m_Ntasks_per_tres = 0;
    m_Ntasks_per_tresIsSet = false;
    m_Minimum_cpus_per_node = 0;
    m_Minimum_cpus_per_nodeIsSet = false;
    m_Memory_per_cpuIsSet = false;
    m_Memory_per_nodeIsSet = false;
    m_Temporary_disk_per_node = 0;
    m_Temporary_disk_per_nodeIsSet = false;
    m_Selinux_context = utility::conversions::to_string_t("");
    m_Selinux_contextIsSet = false;
    m_Required_switchesIsSet = false;
    m_Standard_error = utility::conversions::to_string_t("");
    m_Standard_errorIsSet = false;
    m_Standard_input = utility::conversions::to_string_t("");
    m_Standard_inputIsSet = false;
    m_Standard_output = utility::conversions::to_string_t("");
    m_Standard_outputIsSet = false;
    m_Wait_for_switch = 0;
    m_Wait_for_switchIsSet = false;
    m_Wckey = utility::conversions::to_string_t("");
    m_WckeyIsSet = false;
    m_X11IsSet = false;
    m_X11_magic_cookie = utility::conversions::to_string_t("");
    m_X11_magic_cookieIsSet = false;
    m_X11_target_host = utility::conversions::to_string_t("");
    m_X11_target_hostIsSet = false;
    m_X11_target_port = 0;
    m_X11_target_portIsSet = false;
}

V0_0_39_job_desc_msg::~V0_0_39_job_desc_msg()
{
}

void V0_0_39_job_desc_msg::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_job_desc_msg::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_Account_gather_frequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("account_gather_frequency"))] = ModelBase::toJson(m_Account_gather_frequency);
    }
    if(m_Admin_commentIsSet)
    {
        val[utility::conversions::to_string_t(U("admin_comment"))] = ModelBase::toJson(m_Admin_comment);
    }
    if(m_Allocation_node_listIsSet)
    {
        val[utility::conversions::to_string_t(U("allocation_node_list"))] = ModelBase::toJson(m_Allocation_node_list);
    }
    if(m_Allocation_node_portIsSet)
    {
        val[utility::conversions::to_string_t(U("allocation_node_port"))] = ModelBase::toJson(m_Allocation_node_port);
    }
    if(m_ArgvIsSet)
    {
        val[utility::conversions::to_string_t(U("argv"))] = ModelBase::toJson(m_Argv);
    }
    if(m_arrayIsSet)
    {
        val[utility::conversions::to_string_t(U("array"))] = ModelBase::toJson(m_array);
    }
    if(m_Batch_featuresIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_features"))] = ModelBase::toJson(m_Batch_features);
    }
    if(m_Begin_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("begin_time"))] = ModelBase::toJson(m_Begin_time);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_Burst_bufferIsSet)
    {
        val[utility::conversions::to_string_t(U("burst_buffer"))] = ModelBase::toJson(m_Burst_buffer);
    }
    if(m_ClustersIsSet)
    {
        val[utility::conversions::to_string_t(U("clusters"))] = ModelBase::toJson(m_Clusters);
    }
    if(m_Cluster_constraintIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster_constraint"))] = ModelBase::toJson(m_Cluster_constraint);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_ContiguousIsSet)
    {
        val[utility::conversions::to_string_t(U("contiguous"))] = ModelBase::toJson(m_Contiguous);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t(U("container"))] = ModelBase::toJson(m_Container);
    }
    if(m_Container_idIsSet)
    {
        val[utility::conversions::to_string_t(U("container_id"))] = ModelBase::toJson(m_Container_id);
    }
    if(m_Core_specificationIsSet)
    {
        val[utility::conversions::to_string_t(U("core_specification"))] = ModelBase::toJson(m_Core_specification);
    }
    if(m_Thread_specificationIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_specification"))] = ModelBase::toJson(m_Thread_specification);
    }
    if(m_Cpu_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_binding"))] = ModelBase::toJson(m_Cpu_binding);
    }
    if(m_Cpu_binding_flagsIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_binding_flags"))] = ModelBase::toJson(m_Cpu_binding_flags);
    }
    if(m_Cpu_frequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_frequency"))] = ModelBase::toJson(m_Cpu_frequency);
    }
    if(m_Cpus_per_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus_per_tres"))] = ModelBase::toJson(m_Cpus_per_tres);
    }
    if(m_CrontabIsSet)
    {
        val[utility::conversions::to_string_t(U("crontab"))] = ModelBase::toJson(m_Crontab);
    }
    if(m_DeadlineIsSet)
    {
        val[utility::conversions::to_string_t(U("deadline"))] = ModelBase::toJson(m_Deadline);
    }
    if(m_Delay_bootIsSet)
    {
        val[utility::conversions::to_string_t(U("delay_boot"))] = ModelBase::toJson(m_Delay_boot);
    }
    if(m_DependencyIsSet)
    {
        val[utility::conversions::to_string_t(U("dependency"))] = ModelBase::toJson(m_Dependency);
    }
    if(m_End_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("end_time"))] = ModelBase::toJson(m_End_time);
    }
    if(m_EnvironmentIsSet)
    {
        val[utility::conversions::to_string_t(U("environment"))] = ModelBase::toJson(m_Environment);
    }
    if(m_Excluded_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("excluded_nodes"))] = ModelBase::toJson(m_Excluded_nodes);
    }
    if(m_ExtraIsSet)
    {
        val[utility::conversions::to_string_t(U("extra"))] = ModelBase::toJson(m_Extra);
    }
    if(m_ConstraintsIsSet)
    {
        val[utility::conversions::to_string_t(U("constraints"))] = ModelBase::toJson(m_Constraints);
    }
    if(m_Group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("group_id"))] = ModelBase::toJson(m_Group_id);
    }
    if(m_Hetjob_groupIsSet)
    {
        val[utility::conversions::to_string_t(U("hetjob_group"))] = ModelBase::toJson(m_Hetjob_group);
    }
    if(m_ImmediateIsSet)
    {
        val[utility::conversions::to_string_t(U("immediate"))] = ModelBase::toJson(m_Immediate);
    }
    if(m_Job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("job_id"))] = ModelBase::toJson(m_Job_id);
    }
    if(m_Kill_on_node_failIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_on_node_fail"))] = ModelBase::toJson(m_Kill_on_node_fail);
    }
    if(m_LicensesIsSet)
    {
        val[utility::conversions::to_string_t(U("licenses"))] = ModelBase::toJson(m_Licenses);
    }
    if(m_Mail_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_type"))] = ModelBase::toJson(m_Mail_type);
    }
    if(m_Mail_userIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_user"))] = ModelBase::toJson(m_Mail_user);
    }
    if(m_Mcs_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("mcs_label"))] = ModelBase::toJson(m_Mcs_label);
    }
    if(m_Memory_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_binding"))] = ModelBase::toJson(m_Memory_binding);
    }
    if(m_Memory_binding_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_binding_type"))] = ModelBase::toJson(m_Memory_binding_type);
    }
    if(m_Memory_per_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_tres"))] = ModelBase::toJson(m_Memory_per_tres);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_NetworkIsSet)
    {
        val[utility::conversions::to_string_t(U("network"))] = ModelBase::toJson(m_Network);
    }
    if(m_NiceIsSet)
    {
        val[utility::conversions::to_string_t(U("nice"))] = ModelBase::toJson(m_Nice);
    }
    if(m_TasksIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks"))] = ModelBase::toJson(m_Tasks);
    }
    if(m_Open_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("open_mode"))] = ModelBase::toJson(m_Open_mode);
    }
    if(m_Reserve_portsIsSet)
    {
        val[utility::conversions::to_string_t(U("reserve_ports"))] = ModelBase::toJson(m_Reserve_ports);
    }
    if(m_OvercommitIsSet)
    {
        val[utility::conversions::to_string_t(U("overcommit"))] = ModelBase::toJson(m_Overcommit);
    }
    if(m_PartitionIsSet)
    {
        val[utility::conversions::to_string_t(U("partition"))] = ModelBase::toJson(m_Partition);
    }
    if(m_Distribution_plane_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("distribution_plane_size"))] = ModelBase::toJson(m_Distribution_plane_size);
    }
    if(m_Power_flagsIsSet)
    {
        val[utility::conversions::to_string_t(U("power_flags"))] = ModelBase::toJson(m_Power_flags);
    }
    if(m_PreferIsSet)
    {
        val[utility::conversions::to_string_t(U("prefer"))] = ModelBase::toJson(m_Prefer);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_ProfileIsSet)
    {
        val[utility::conversions::to_string_t(U("profile"))] = ModelBase::toJson(m_Profile);
    }
    if(m_QosIsSet)
    {
        val[utility::conversions::to_string_t(U("qos"))] = ModelBase::toJson(m_Qos);
    }
    if(m_RebootIsSet)
    {
        val[utility::conversions::to_string_t(U("reboot"))] = ModelBase::toJson(m_Reboot);
    }
    if(m_Required_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("required_nodes"))] = ModelBase::toJson(m_Required_nodes);
    }
    if(m_RequeueIsSet)
    {
        val[utility::conversions::to_string_t(U("requeue"))] = ModelBase::toJson(m_Requeue);
    }
    if(m_ReservationIsSet)
    {
        val[utility::conversions::to_string_t(U("reservation"))] = ModelBase::toJson(m_Reservation);
    }
    if(m_ScriptIsSet)
    {
        val[utility::conversions::to_string_t(U("script"))] = ModelBase::toJson(m_Script);
    }
    if(m_SharedIsSet)
    {
        val[utility::conversions::to_string_t(U("shared"))] = ModelBase::toJson(m_Shared);
    }
    if(m_ExclusiveIsSet)
    {
        val[utility::conversions::to_string_t(U("exclusive"))] = ModelBase::toJson(m_Exclusive);
    }
    if(m_Site_factorIsSet)
    {
        val[utility::conversions::to_string_t(U("site_factor"))] = ModelBase::toJson(m_Site_factor);
    }
    if(m_Spank_environmentIsSet)
    {
        val[utility::conversions::to_string_t(U("spank_environment"))] = ModelBase::toJson(m_Spank_environment);
    }
    if(m_DistributionIsSet)
    {
        val[utility::conversions::to_string_t(U("distribution"))] = ModelBase::toJson(m_Distribution);
    }
    if(m_Time_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("time_limit"))] = ModelBase::toJson(m_Time_limit);
    }
    if(m_Time_minimumIsSet)
    {
        val[utility::conversions::to_string_t(U("time_minimum"))] = ModelBase::toJson(m_Time_minimum);
    }
    if(m_Tres_bindIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_bind"))] = ModelBase::toJson(m_Tres_bind);
    }
    if(m_Tres_freqIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_freq"))] = ModelBase::toJson(m_Tres_freq);
    }
    if(m_Tres_per_jobIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_job"))] = ModelBase::toJson(m_Tres_per_job);
    }
    if(m_Tres_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_node"))] = ModelBase::toJson(m_Tres_per_node);
    }
    if(m_Tres_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_socket"))] = ModelBase::toJson(m_Tres_per_socket);
    }
    if(m_Tres_per_taskIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_task"))] = ModelBase::toJson(m_Tres_per_task);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_Wait_all_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("wait_all_nodes"))] = ModelBase::toJson(m_Wait_all_nodes);
    }
    if(m_Kill_warning_flagsIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_warning_flags"))] = ModelBase::toJson(m_Kill_warning_flags);
    }
    if(m_Kill_warning_signalIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_warning_signal"))] = ModelBase::toJson(m_Kill_warning_signal);
    }
    if(m_Kill_warning_delayIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_warning_delay"))] = ModelBase::toJson(m_Kill_warning_delay);
    }
    if(m_Current_working_directoryIsSet)
    {
        val[utility::conversions::to_string_t(U("current_working_directory"))] = ModelBase::toJson(m_Current_working_directory);
    }
    if(m_Cpus_per_taskIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus_per_task"))] = ModelBase::toJson(m_Cpus_per_task);
    }
    if(m_Minimum_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_cpus"))] = ModelBase::toJson(m_Minimum_cpus);
    }
    if(m_Maximum_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("maximum_cpus"))] = ModelBase::toJson(m_Maximum_cpus);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_Minimum_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_nodes"))] = ModelBase::toJson(m_Minimum_nodes);
    }
    if(m_Maximum_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("maximum_nodes"))] = ModelBase::toJson(m_Maximum_nodes);
    }
    if(m_Minimum_boards_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_boards_per_node"))] = ModelBase::toJson(m_Minimum_boards_per_node);
    }
    if(m_Minimum_sockets_per_boardIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_sockets_per_board"))] = ModelBase::toJson(m_Minimum_sockets_per_board);
    }
    if(m_Sockets_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets_per_node"))] = ModelBase::toJson(m_Sockets_per_node);
    }
    if(m_Threads_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("threads_per_core"))] = ModelBase::toJson(m_Threads_per_core);
    }
    if(m_Tasks_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_node"))] = ModelBase::toJson(m_Tasks_per_node);
    }
    if(m_Tasks_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_socket"))] = ModelBase::toJson(m_Tasks_per_socket);
    }
    if(m_Tasks_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_core"))] = ModelBase::toJson(m_Tasks_per_core);
    }
    if(m_Tasks_per_boardIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_board"))] = ModelBase::toJson(m_Tasks_per_board);
    }
    if(m_Ntasks_per_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("ntasks_per_tres"))] = ModelBase::toJson(m_Ntasks_per_tres);
    }
    if(m_Minimum_cpus_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_cpus_per_node"))] = ModelBase::toJson(m_Minimum_cpus_per_node);
    }
    if(m_Memory_per_cpuIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_cpu"))] = ModelBase::toJson(m_Memory_per_cpu);
    }
    if(m_Memory_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_node"))] = ModelBase::toJson(m_Memory_per_node);
    }
    if(m_Temporary_disk_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("temporary_disk_per_node"))] = ModelBase::toJson(m_Temporary_disk_per_node);
    }
    if(m_Selinux_contextIsSet)
    {
        val[utility::conversions::to_string_t(U("selinux_context"))] = ModelBase::toJson(m_Selinux_context);
    }
    if(m_Required_switchesIsSet)
    {
        val[utility::conversions::to_string_t(U("required_switches"))] = ModelBase::toJson(m_Required_switches);
    }
    if(m_Standard_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_error"))] = ModelBase::toJson(m_Standard_error);
    }
    if(m_Standard_inputIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_input"))] = ModelBase::toJson(m_Standard_input);
    }
    if(m_Standard_outputIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_output"))] = ModelBase::toJson(m_Standard_output);
    }
    if(m_Wait_for_switchIsSet)
    {
        val[utility::conversions::to_string_t(U("wait_for_switch"))] = ModelBase::toJson(m_Wait_for_switch);
    }
    if(m_WckeyIsSet)
    {
        val[utility::conversions::to_string_t(U("wckey"))] = ModelBase::toJson(m_Wckey);
    }
    if(m_X11IsSet)
    {
        val[utility::conversions::to_string_t(U("x11"))] = ModelBase::toJson(m_X11);
    }
    if(m_X11_magic_cookieIsSet)
    {
        val[utility::conversions::to_string_t(U("x11_magic_cookie"))] = ModelBase::toJson(m_X11_magic_cookie);
    }
    if(m_X11_target_hostIsSet)
    {
        val[utility::conversions::to_string_t(U("x11_target_host"))] = ModelBase::toJson(m_X11_target_host);
    }
    if(m_X11_target_portIsSet)
    {
        val[utility::conversions::to_string_t(U("x11_target_port"))] = ModelBase::toJson(m_X11_target_port);
    }

    return val;
}

bool V0_0_39_job_desc_msg::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_gather_frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_gather_frequency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountGatherFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountGatherFrequency);
            setAccountGatherFrequency(refVal_setAccountGatherFrequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("admin_comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("admin_comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdminComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdminComment);
            setAdminComment(refVal_setAdminComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allocation_node_list"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allocation_node_list")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAllocationNodeList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocationNodeList);
            setAllocationNodeList(refVal_setAllocationNodeList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allocation_node_port"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allocation_node_port")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAllocationNodePort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocationNodePort);
            setAllocationNodePort(refVal_setAllocationNodePort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("argv"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("argv")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setArgv;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArgv);
            setArgv(refVal_setArgv);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setArray;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArray);
            setArray(refVal_setArray);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("batch_features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_features")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBatchFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchFeatures);
            setBatchFeatures(refVal_setBatchFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("begin_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("begin_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBeginTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBeginTime);
            setBeginTime(refVal_setBeginTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("burst_buffer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("burst_buffer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBurstBuffer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBurstBuffer);
            setBurstBuffer(refVal_setBurstBuffer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("clusters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clusters")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClusters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusters);
            setClusters(refVal_setClusters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster_constraint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster_constraint")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClusterConstraint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusterConstraint);
            setClusterConstraint(refVal_setClusterConstraint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contiguous"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contiguous")));
        if(!fieldValue.is_null())
        {
            bool refVal_setContiguous;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContiguous);
            setContiguous(refVal_setContiguous);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainer);
            setContainer(refVal_setContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainerId);
            setContainerId(refVal_setContainerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("core_specification"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("core_specification")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCoreSpecification;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoreSpecification);
            setCoreSpecification(refVal_setCoreSpecification);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_specification"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_specification")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setThreadSpecification;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadSpecification);
            setThreadSpecification(refVal_setThreadSpecification);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_binding")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpuBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuBinding);
            setCpuBinding(refVal_setCpuBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_binding_flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_binding_flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCpuBindingFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuBindingFlags);
            setCpuBindingFlags(refVal_setCpuBindingFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_frequency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpuFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuFrequency);
            setCpuFrequency(refVal_setCpuFrequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus_per_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus_per_tres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpusPerTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpusPerTres);
            setCpusPerTres(refVal_setCpusPerTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("crontab"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("crontab")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_cron_entry> refVal_setCrontab;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCrontab);
            setCrontab(refVal_setCrontab);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deadline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deadline")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDeadline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeadline);
            setDeadline(refVal_setDeadline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delay_boot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delay_boot")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDelayBoot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelayBoot);
            setDelayBoot(refVal_setDelayBoot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dependency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dependency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDependency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDependency);
            setDependency(refVal_setDependency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("environment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("environment")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setEnvironment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnvironment);
            setEnvironment(refVal_setEnvironment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("excluded_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("excluded_nodes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExcludedNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExcludedNodes);
            setExcludedNodes(refVal_setExcludedNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extra"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extra")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExtra;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtra);
            setExtra(refVal_setExtra);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constraints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constraints")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConstraints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstraints);
            setConstraints(refVal_setConstraints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupId);
            setGroupId(refVal_setGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hetjob_group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hetjob_group")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setHetjobGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHetjobGroup);
            setHetjobGroup(refVal_setHetjobGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("immediate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("immediate")));
        if(!fieldValue.is_null())
        {
            bool refVal_setImmediate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImmediate);
            setImmediate(refVal_setImmediate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_on_node_fail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_on_node_fail")));
        if(!fieldValue.is_null())
        {
            bool refVal_setKillOnNodeFail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillOnNodeFail);
            setKillOnNodeFail(refVal_setKillOnNodeFail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenses")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenses);
            setLicenses(refVal_setLicenses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_type")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMailType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailType);
            setMailType(refVal_setMailType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailUser);
            setMailUser(refVal_setMailUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcs_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcs_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMcsLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcsLabel);
            setMcsLabel(refVal_setMcsLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_binding")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMemoryBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryBinding);
            setMemoryBinding(refVal_setMemoryBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_binding_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_binding_type")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMemoryBindingType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryBindingType);
            setMemoryBindingType(refVal_setMemoryBindingType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_tres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMemoryPerTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerTres);
            setMemoryPerTres(refVal_setMemoryPerTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("network"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("network")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNetwork;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetwork);
            setNetwork(refVal_setNetwork);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nice")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNice);
            setNice(refVal_setNice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasks);
            setTasks(refVal_setTasks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("open_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("open_mode")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setOpenMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOpenMode);
            setOpenMode(refVal_setOpenMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reserve_ports"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reserve_ports")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setReservePorts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReservePorts);
            setReservePorts(refVal_setReservePorts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("overcommit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("overcommit")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOvercommit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOvercommit);
            setOvercommit(refVal_setOvercommit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartition);
            setPartition(refVal_setPartition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("distribution_plane_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("distribution_plane_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDistributionPlaneSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDistributionPlaneSize);
            setDistributionPlaneSize(refVal_setDistributionPlaneSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("power_flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("power_flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPowerFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPowerFlags);
            setPowerFlags(refVal_setPowerFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prefer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prefer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrefer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrefer);
            setPrefer(refVal_setPrefer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profile"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profile")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProfile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfile);
            setProfile(refVal_setProfile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qos")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQos);
            setQos(refVal_setQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reboot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reboot")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReboot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReboot);
            setReboot(refVal_setReboot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_nodes")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setRequiredNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredNodes);
            setRequiredNodes(refVal_setRequiredNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requeue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requeue")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRequeue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequeue);
            setRequeue(refVal_setRequeue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reservation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reservation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReservation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReservation);
            setReservation(refVal_setReservation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("script"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("script")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScript;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScript);
            setScript(refVal_setScript);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shared"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shared")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setShared;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShared);
            setShared(refVal_setShared);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exclusive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exclusive")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExclusive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExclusive);
            setExclusive(refVal_setExclusive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("site_factor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("site_factor")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSiteFactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSiteFactor);
            setSiteFactor(refVal_setSiteFactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("spank_environment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("spank_environment")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSpankEnvironment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpankEnvironment);
            setSpankEnvironment(refVal_setSpankEnvironment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("distribution"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("distribution")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDistribution;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDistribution);
            setDistribution(refVal_setDistribution);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_limit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeLimit);
            setTimeLimit(refVal_setTimeLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_minimum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_minimum")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeMinimum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeMinimum);
            setTimeMinimum(refVal_setTimeMinimum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_bind"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_bind")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresBind;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresBind);
            setTresBind(refVal_setTresBind);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_freq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_freq")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresFreq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresFreq);
            setTresFreq(refVal_setTresFreq);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_job"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_job")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerJob;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerJob);
            setTresPerJob(refVal_setTresPerJob);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerNode);
            setTresPerNode(refVal_setTresPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_socket")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerSocket);
            setTresPerSocket(refVal_setTresPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_task"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_task")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerTask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerTask);
            setTresPerTask(refVal_setTresPerTask);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wait_all_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wait_all_nodes")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWaitAllNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaitAllNodes);
            setWaitAllNodes(refVal_setWaitAllNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_warning_flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_warning_flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setKillWarningFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillWarningFlags);
            setKillWarningFlags(refVal_setKillWarningFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_warning_signal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_warning_signal")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKillWarningSignal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillWarningSignal);
            setKillWarningSignal(refVal_setKillWarningSignal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_warning_delay"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_warning_delay")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setKillWarningDelay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillWarningDelay);
            setKillWarningDelay(refVal_setKillWarningDelay);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_working_directory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_working_directory")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentWorkingDirectory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentWorkingDirectory);
            setCurrentWorkingDirectory(refVal_setCurrentWorkingDirectory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus_per_task"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus_per_task")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCpusPerTask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpusPerTask);
            setCpusPerTask(refVal_setCpusPerTask);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumCpus);
            setMinimumCpus(refVal_setMinimumCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maximum_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maximum_cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaximumCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumCpus);
            setMaximumCpus(refVal_setMaximumCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_nodes")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumNodes);
            setMinimumNodes(refVal_setMinimumNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maximum_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maximum_nodes")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaximumNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumNodes);
            setMaximumNodes(refVal_setMaximumNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_boards_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_boards_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumBoardsPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumBoardsPerNode);
            setMinimumBoardsPerNode(refVal_setMinimumBoardsPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_sockets_per_board"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_sockets_per_board")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumSocketsPerBoard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumSocketsPerBoard);
            setMinimumSocketsPerBoard(refVal_setMinimumSocketsPerBoard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSocketsPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSocketsPerNode);
            setSocketsPerNode(refVal_setSocketsPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threads_per_core")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setThreadsPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadsPerCore);
            setThreadsPerCore(refVal_setThreadsPerCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerNode);
            setTasksPerNode(refVal_setTasksPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_socket")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerSocket);
            setTasksPerSocket(refVal_setTasksPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_core")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerCore);
            setTasksPerCore(refVal_setTasksPerCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_board"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_board")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerBoard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerBoard);
            setTasksPerBoard(refVal_setTasksPerBoard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ntasks_per_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ntasks_per_tres")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNtasksPerTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNtasksPerTres);
            setNtasksPerTres(refVal_setNtasksPerTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_cpus_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_cpus_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumCpusPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumCpusPerNode);
            setMinimumCpusPerNode(refVal_setMinimumCpusPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_cpu")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerCpu);
            setMemoryPerCpu(refVal_setMemoryPerCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerNode);
            setMemoryPerNode(refVal_setMemoryPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temporary_disk_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temporary_disk_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTemporaryDiskPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemporaryDiskPerNode);
            setTemporaryDiskPerNode(refVal_setTemporaryDiskPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("selinux_context"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("selinux_context")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSelinuxContext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelinuxContext);
            setSelinuxContext(refVal_setSelinuxContext);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_switches"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_switches")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setRequiredSwitches;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredSwitches);
            setRequiredSwitches(refVal_setRequiredSwitches);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardError);
            setStandardError(refVal_setStandardError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_input"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_input")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardInput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardInput);
            setStandardInput(refVal_setStandardInput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_output"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_output")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardOutput);
            setStandardOutput(refVal_setStandardOutput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wait_for_switch"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wait_for_switch")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWaitForSwitch;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaitForSwitch);
            setWaitForSwitch(refVal_setWaitForSwitch);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWckey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckey);
            setWckey(refVal_setWckey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x11"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x11")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setX11;
            ok &= ModelBase::fromJson(fieldValue, refVal_setX11);
            setX11(refVal_setX11);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x11_magic_cookie"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x11_magic_cookie")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setX11MagicCookie;
            ok &= ModelBase::fromJson(fieldValue, refVal_setX11MagicCookie);
            setX11MagicCookie(refVal_setX11MagicCookie);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x11_target_host"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x11_target_host")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setX11TargetHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setX11TargetHost);
            setX11TargetHost(refVal_setX11TargetHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x11_target_port"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x11_target_port")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setX11TargetPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setX11TargetPort);
            setX11TargetPort(refVal_setX11TargetPort);
        }
    }
    return ok;
}

void V0_0_39_job_desc_msg::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_Account_gather_frequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_gather_frequency")), m_Account_gather_frequency));
    }
    if(m_Admin_commentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("admin_comment")), m_Admin_comment));
    }
    if(m_Allocation_node_listIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allocation_node_list")), m_Allocation_node_list));
    }
    if(m_Allocation_node_portIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allocation_node_port")), m_Allocation_node_port));
    }
    if(m_ArgvIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("argv")), m_Argv));
    }
    if(m_arrayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array")), m_array));
    }
    if(m_Batch_featuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_features")), m_Batch_features));
    }
    if(m_Begin_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("begin_time")), m_Begin_time));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_Burst_bufferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("burst_buffer")), m_Burst_buffer));
    }
    if(m_ClustersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clusters")), m_Clusters));
    }
    if(m_Cluster_constraintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster_constraint")), m_Cluster_constraint));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_ContiguousIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contiguous")), m_Contiguous));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container")), m_Container));
    }
    if(m_Container_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container_id")), m_Container_id));
    }
    if(m_Core_specificationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("core_specification")), m_Core_specification));
    }
    if(m_Thread_specificationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_specification")), m_Thread_specification));
    }
    if(m_Cpu_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_binding")), m_Cpu_binding));
    }
    if(m_Cpu_binding_flagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_binding_flags")), m_Cpu_binding_flags));
    }
    if(m_Cpu_frequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_frequency")), m_Cpu_frequency));
    }
    if(m_Cpus_per_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus_per_tres")), m_Cpus_per_tres));
    }
    if(m_CrontabIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("crontab")), m_Crontab));
    }
    if(m_DeadlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deadline")), m_Deadline));
    }
    if(m_Delay_bootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delay_boot")), m_Delay_boot));
    }
    if(m_DependencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dependency")), m_Dependency));
    }
    if(m_End_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_time")), m_End_time));
    }
    if(m_EnvironmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("environment")), m_Environment));
    }
    if(m_Excluded_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("excluded_nodes")), m_Excluded_nodes));
    }
    if(m_ExtraIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extra")), m_Extra));
    }
    if(m_ConstraintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constraints")), m_Constraints));
    }
    if(m_Group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_id")), m_Group_id));
    }
    if(m_Hetjob_groupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hetjob_group")), m_Hetjob_group));
    }
    if(m_ImmediateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("immediate")), m_Immediate));
    }
    if(m_Job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_id")), m_Job_id));
    }
    if(m_Kill_on_node_failIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_on_node_fail")), m_Kill_on_node_fail));
    }
    if(m_LicensesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenses")), m_Licenses));
    }
    if(m_Mail_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_type")), m_Mail_type));
    }
    if(m_Mail_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_user")), m_Mail_user));
    }
    if(m_Mcs_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcs_label")), m_Mcs_label));
    }
    if(m_Memory_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_binding")), m_Memory_binding));
    }
    if(m_Memory_binding_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_binding_type")), m_Memory_binding_type));
    }
    if(m_Memory_per_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_tres")), m_Memory_per_tres));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_NetworkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("network")), m_Network));
    }
    if(m_NiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nice")), m_Nice));
    }
    if(m_TasksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks")), m_Tasks));
    }
    if(m_Open_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("open_mode")), m_Open_mode));
    }
    if(m_Reserve_portsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reserve_ports")), m_Reserve_ports));
    }
    if(m_OvercommitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("overcommit")), m_Overcommit));
    }
    if(m_PartitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition")), m_Partition));
    }
    if(m_Distribution_plane_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("distribution_plane_size")), m_Distribution_plane_size));
    }
    if(m_Power_flagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("power_flags")), m_Power_flags));
    }
    if(m_PreferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prefer")), m_Prefer));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_ProfileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profile")), m_Profile));
    }
    if(m_QosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qos")), m_Qos));
    }
    if(m_RebootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reboot")), m_Reboot));
    }
    if(m_Required_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_nodes")), m_Required_nodes));
    }
    if(m_RequeueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requeue")), m_Requeue));
    }
    if(m_ReservationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reservation")), m_Reservation));
    }
    if(m_ScriptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("script")), m_Script));
    }
    if(m_SharedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shared")), m_Shared));
    }
    if(m_ExclusiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exclusive")), m_Exclusive));
    }
    if(m_Site_factorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("site_factor")), m_Site_factor));
    }
    if(m_Spank_environmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("spank_environment")), m_Spank_environment));
    }
    if(m_DistributionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("distribution")), m_Distribution));
    }
    if(m_Time_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_limit")), m_Time_limit));
    }
    if(m_Time_minimumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_minimum")), m_Time_minimum));
    }
    if(m_Tres_bindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_bind")), m_Tres_bind));
    }
    if(m_Tres_freqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_freq")), m_Tres_freq));
    }
    if(m_Tres_per_jobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_job")), m_Tres_per_job));
    }
    if(m_Tres_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_node")), m_Tres_per_node));
    }
    if(m_Tres_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_socket")), m_Tres_per_socket));
    }
    if(m_Tres_per_taskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_task")), m_Tres_per_task));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_Wait_all_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wait_all_nodes")), m_Wait_all_nodes));
    }
    if(m_Kill_warning_flagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_warning_flags")), m_Kill_warning_flags));
    }
    if(m_Kill_warning_signalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_warning_signal")), m_Kill_warning_signal));
    }
    if(m_Kill_warning_delayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_warning_delay")), m_Kill_warning_delay));
    }
    if(m_Current_working_directoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_working_directory")), m_Current_working_directory));
    }
    if(m_Cpus_per_taskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus_per_task")), m_Cpus_per_task));
    }
    if(m_Minimum_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_cpus")), m_Minimum_cpus));
    }
    if(m_Maximum_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maximum_cpus")), m_Maximum_cpus));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_Minimum_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_nodes")), m_Minimum_nodes));
    }
    if(m_Maximum_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maximum_nodes")), m_Maximum_nodes));
    }
    if(m_Minimum_boards_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_boards_per_node")), m_Minimum_boards_per_node));
    }
    if(m_Minimum_sockets_per_boardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_sockets_per_board")), m_Minimum_sockets_per_board));
    }
    if(m_Sockets_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets_per_node")), m_Sockets_per_node));
    }
    if(m_Threads_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threads_per_core")), m_Threads_per_core));
    }
    if(m_Tasks_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_node")), m_Tasks_per_node));
    }
    if(m_Tasks_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_socket")), m_Tasks_per_socket));
    }
    if(m_Tasks_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_core")), m_Tasks_per_core));
    }
    if(m_Tasks_per_boardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_board")), m_Tasks_per_board));
    }
    if(m_Ntasks_per_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ntasks_per_tres")), m_Ntasks_per_tres));
    }
    if(m_Minimum_cpus_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_cpus_per_node")), m_Minimum_cpus_per_node));
    }
    if(m_Memory_per_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_cpu")), m_Memory_per_cpu));
    }
    if(m_Memory_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_node")), m_Memory_per_node));
    }
    if(m_Temporary_disk_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temporary_disk_per_node")), m_Temporary_disk_per_node));
    }
    if(m_Selinux_contextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("selinux_context")), m_Selinux_context));
    }
    if(m_Required_switchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_switches")), m_Required_switches));
    }
    if(m_Standard_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_error")), m_Standard_error));
    }
    if(m_Standard_inputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_input")), m_Standard_input));
    }
    if(m_Standard_outputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_output")), m_Standard_output));
    }
    if(m_Wait_for_switchIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wait_for_switch")), m_Wait_for_switch));
    }
    if(m_WckeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckey")), m_Wckey));
    }
    if(m_X11IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x11")), m_X11));
    }
    if(m_X11_magic_cookieIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x11_magic_cookie")), m_X11_magic_cookie));
    }
    if(m_X11_target_hostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x11_target_host")), m_X11_target_host));
    }
    if(m_X11_target_portIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x11_target_port")), m_X11_target_port));
    }
}

bool V0_0_39_job_desc_msg::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_gather_frequency"))))
    {
        utility::string_t refVal_setAccountGatherFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_gather_frequency"))), refVal_setAccountGatherFrequency );
        setAccountGatherFrequency(refVal_setAccountGatherFrequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("admin_comment"))))
    {
        utility::string_t refVal_setAdminComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("admin_comment"))), refVal_setAdminComment );
        setAdminComment(refVal_setAdminComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allocation_node_list"))))
    {
        utility::string_t refVal_setAllocationNodeList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allocation_node_list"))), refVal_setAllocationNodeList );
        setAllocationNodeList(refVal_setAllocationNodeList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allocation_node_port"))))
    {
        int32_t refVal_setAllocationNodePort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allocation_node_port"))), refVal_setAllocationNodePort );
        setAllocationNodePort(refVal_setAllocationNodePort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("argv"))))
    {
        std::vector<utility::string_t> refVal_setArgv;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("argv"))), refVal_setArgv );
        setArgv(refVal_setArgv);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array"))))
    {
        utility::string_t refVal_setArray;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array"))), refVal_setArray );
        setArray(refVal_setArray);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_features"))))
    {
        utility::string_t refVal_setBatchFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_features"))), refVal_setBatchFeatures );
        setBatchFeatures(refVal_setBatchFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("begin_time"))))
    {
        int64_t refVal_setBeginTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("begin_time"))), refVal_setBeginTime );
        setBeginTime(refVal_setBeginTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("burst_buffer"))))
    {
        utility::string_t refVal_setBurstBuffer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("burst_buffer"))), refVal_setBurstBuffer );
        setBurstBuffer(refVal_setBurstBuffer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("clusters"))))
    {
        utility::string_t refVal_setClusters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clusters"))), refVal_setClusters );
        setClusters(refVal_setClusters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster_constraint"))))
    {
        utility::string_t refVal_setClusterConstraint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster_constraint"))), refVal_setClusterConstraint );
        setClusterConstraint(refVal_setClusterConstraint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contiguous"))))
    {
        bool refVal_setContiguous;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contiguous"))), refVal_setContiguous );
        setContiguous(refVal_setContiguous);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container"))))
    {
        utility::string_t refVal_setContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container"))), refVal_setContainer );
        setContainer(refVal_setContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container_id"))))
    {
        utility::string_t refVal_setContainerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container_id"))), refVal_setContainerId );
        setContainerId(refVal_setContainerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("core_specification"))))
    {
        int32_t refVal_setCoreSpecification;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("core_specification"))), refVal_setCoreSpecification );
        setCoreSpecification(refVal_setCoreSpecification);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_specification"))))
    {
        int32_t refVal_setThreadSpecification;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_specification"))), refVal_setThreadSpecification );
        setThreadSpecification(refVal_setThreadSpecification);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_binding"))))
    {
        utility::string_t refVal_setCpuBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_binding"))), refVal_setCpuBinding );
        setCpuBinding(refVal_setCpuBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_binding_flags"))))
    {
        std::vector<utility::string_t> refVal_setCpuBindingFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_binding_flags"))), refVal_setCpuBindingFlags );
        setCpuBindingFlags(refVal_setCpuBindingFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_frequency"))))
    {
        utility::string_t refVal_setCpuFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_frequency"))), refVal_setCpuFrequency );
        setCpuFrequency(refVal_setCpuFrequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus_per_tres"))))
    {
        utility::string_t refVal_setCpusPerTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus_per_tres"))), refVal_setCpusPerTres );
        setCpusPerTres(refVal_setCpusPerTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("crontab"))))
    {
        std::shared_ptr<V0_0_39_cron_entry> refVal_setCrontab;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("crontab"))), refVal_setCrontab );
        setCrontab(refVal_setCrontab);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deadline"))))
    {
        int64_t refVal_setDeadline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deadline"))), refVal_setDeadline );
        setDeadline(refVal_setDeadline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delay_boot"))))
    {
        int32_t refVal_setDelayBoot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delay_boot"))), refVal_setDelayBoot );
        setDelayBoot(refVal_setDelayBoot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dependency"))))
    {
        utility::string_t refVal_setDependency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dependency"))), refVal_setDependency );
        setDependency(refVal_setDependency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_time"))))
    {
        int64_t refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_time"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("environment"))))
    {
        std::vector<utility::string_t> refVal_setEnvironment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("environment"))), refVal_setEnvironment );
        setEnvironment(refVal_setEnvironment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("excluded_nodes"))))
    {
        std::vector<utility::string_t> refVal_setExcludedNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("excluded_nodes"))), refVal_setExcludedNodes );
        setExcludedNodes(refVal_setExcludedNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extra"))))
    {
        utility::string_t refVal_setExtra;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extra"))), refVal_setExtra );
        setExtra(refVal_setExtra);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constraints"))))
    {
        utility::string_t refVal_setConstraints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constraints"))), refVal_setConstraints );
        setConstraints(refVal_setConstraints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_id"))))
    {
        utility::string_t refVal_setGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_id"))), refVal_setGroupId );
        setGroupId(refVal_setGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hetjob_group"))))
    {
        int32_t refVal_setHetjobGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hetjob_group"))), refVal_setHetjobGroup );
        setHetjobGroup(refVal_setHetjobGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("immediate"))))
    {
        bool refVal_setImmediate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("immediate"))), refVal_setImmediate );
        setImmediate(refVal_setImmediate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_id"))))
    {
        int32_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_id"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_on_node_fail"))))
    {
        bool refVal_setKillOnNodeFail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_on_node_fail"))), refVal_setKillOnNodeFail );
        setKillOnNodeFail(refVal_setKillOnNodeFail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenses"))))
    {
        utility::string_t refVal_setLicenses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenses"))), refVal_setLicenses );
        setLicenses(refVal_setLicenses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_type"))))
    {
        std::vector<utility::string_t> refVal_setMailType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_type"))), refVal_setMailType );
        setMailType(refVal_setMailType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_user"))))
    {
        utility::string_t refVal_setMailUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_user"))), refVal_setMailUser );
        setMailUser(refVal_setMailUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcs_label"))))
    {
        utility::string_t refVal_setMcsLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcs_label"))), refVal_setMcsLabel );
        setMcsLabel(refVal_setMcsLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_binding"))))
    {
        utility::string_t refVal_setMemoryBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_binding"))), refVal_setMemoryBinding );
        setMemoryBinding(refVal_setMemoryBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_binding_type"))))
    {
        std::vector<utility::string_t> refVal_setMemoryBindingType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_binding_type"))), refVal_setMemoryBindingType );
        setMemoryBindingType(refVal_setMemoryBindingType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_tres"))))
    {
        utility::string_t refVal_setMemoryPerTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_tres"))), refVal_setMemoryPerTres );
        setMemoryPerTres(refVal_setMemoryPerTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("network"))))
    {
        utility::string_t refVal_setNetwork;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("network"))), refVal_setNetwork );
        setNetwork(refVal_setNetwork);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nice"))))
    {
        int32_t refVal_setNice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nice"))), refVal_setNice );
        setNice(refVal_setNice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks"))))
    {
        int32_t refVal_setTasks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks"))), refVal_setTasks );
        setTasks(refVal_setTasks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("open_mode"))))
    {
        std::vector<utility::string_t> refVal_setOpenMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("open_mode"))), refVal_setOpenMode );
        setOpenMode(refVal_setOpenMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reserve_ports"))))
    {
        int32_t refVal_setReservePorts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reserve_ports"))), refVal_setReservePorts );
        setReservePorts(refVal_setReservePorts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("overcommit"))))
    {
        bool refVal_setOvercommit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("overcommit"))), refVal_setOvercommit );
        setOvercommit(refVal_setOvercommit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition"))))
    {
        utility::string_t refVal_setPartition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition"))), refVal_setPartition );
        setPartition(refVal_setPartition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("distribution_plane_size"))))
    {
        int32_t refVal_setDistributionPlaneSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("distribution_plane_size"))), refVal_setDistributionPlaneSize );
        setDistributionPlaneSize(refVal_setDistributionPlaneSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("power_flags"))))
    {
        std::vector<utility::string_t> refVal_setPowerFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("power_flags"))), refVal_setPowerFlags );
        setPowerFlags(refVal_setPowerFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prefer"))))
    {
        utility::string_t refVal_setPrefer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prefer"))), refVal_setPrefer );
        setPrefer(refVal_setPrefer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profile"))))
    {
        std::vector<utility::string_t> refVal_setProfile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profile"))), refVal_setProfile );
        setProfile(refVal_setProfile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qos"))))
    {
        utility::string_t refVal_setQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qos"))), refVal_setQos );
        setQos(refVal_setQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reboot"))))
    {
        bool refVal_setReboot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reboot"))), refVal_setReboot );
        setReboot(refVal_setReboot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_nodes"))))
    {
        std::vector<utility::string_t> refVal_setRequiredNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_nodes"))), refVal_setRequiredNodes );
        setRequiredNodes(refVal_setRequiredNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requeue"))))
    {
        bool refVal_setRequeue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requeue"))), refVal_setRequeue );
        setRequeue(refVal_setRequeue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reservation"))))
    {
        utility::string_t refVal_setReservation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reservation"))), refVal_setReservation );
        setReservation(refVal_setReservation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("script"))))
    {
        utility::string_t refVal_setScript;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("script"))), refVal_setScript );
        setScript(refVal_setScript);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shared"))))
    {
        std::vector<utility::string_t> refVal_setShared;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shared"))), refVal_setShared );
        setShared(refVal_setShared);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exclusive"))))
    {
        std::vector<utility::string_t> refVal_setExclusive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exclusive"))), refVal_setExclusive );
        setExclusive(refVal_setExclusive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("site_factor"))))
    {
        int32_t refVal_setSiteFactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("site_factor"))), refVal_setSiteFactor );
        setSiteFactor(refVal_setSiteFactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("spank_environment"))))
    {
        std::vector<utility::string_t> refVal_setSpankEnvironment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("spank_environment"))), refVal_setSpankEnvironment );
        setSpankEnvironment(refVal_setSpankEnvironment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("distribution"))))
    {
        utility::string_t refVal_setDistribution;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("distribution"))), refVal_setDistribution );
        setDistribution(refVal_setDistribution);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_limit"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_limit"))), refVal_setTimeLimit );
        setTimeLimit(refVal_setTimeLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_minimum"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeMinimum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_minimum"))), refVal_setTimeMinimum );
        setTimeMinimum(refVal_setTimeMinimum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_bind"))))
    {
        utility::string_t refVal_setTresBind;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_bind"))), refVal_setTresBind );
        setTresBind(refVal_setTresBind);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_freq"))))
    {
        utility::string_t refVal_setTresFreq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_freq"))), refVal_setTresFreq );
        setTresFreq(refVal_setTresFreq);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_job"))))
    {
        utility::string_t refVal_setTresPerJob;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_job"))), refVal_setTresPerJob );
        setTresPerJob(refVal_setTresPerJob);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_node"))))
    {
        utility::string_t refVal_setTresPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_node"))), refVal_setTresPerNode );
        setTresPerNode(refVal_setTresPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_socket"))))
    {
        utility::string_t refVal_setTresPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_socket"))), refVal_setTresPerSocket );
        setTresPerSocket(refVal_setTresPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_task"))))
    {
        utility::string_t refVal_setTresPerTask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_task"))), refVal_setTresPerTask );
        setTresPerTask(refVal_setTresPerTask);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wait_all_nodes"))))
    {
        bool refVal_setWaitAllNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wait_all_nodes"))), refVal_setWaitAllNodes );
        setWaitAllNodes(refVal_setWaitAllNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_warning_flags"))))
    {
        std::vector<utility::string_t> refVal_setKillWarningFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_warning_flags"))), refVal_setKillWarningFlags );
        setKillWarningFlags(refVal_setKillWarningFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_warning_signal"))))
    {
        utility::string_t refVal_setKillWarningSignal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_warning_signal"))), refVal_setKillWarningSignal );
        setKillWarningSignal(refVal_setKillWarningSignal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_warning_delay"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setKillWarningDelay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_warning_delay"))), refVal_setKillWarningDelay );
        setKillWarningDelay(refVal_setKillWarningDelay);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_working_directory"))))
    {
        utility::string_t refVal_setCurrentWorkingDirectory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_working_directory"))), refVal_setCurrentWorkingDirectory );
        setCurrentWorkingDirectory(refVal_setCurrentWorkingDirectory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus_per_task"))))
    {
        int32_t refVal_setCpusPerTask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus_per_task"))), refVal_setCpusPerTask );
        setCpusPerTask(refVal_setCpusPerTask);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_cpus"))))
    {
        int32_t refVal_setMinimumCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_cpus"))), refVal_setMinimumCpus );
        setMinimumCpus(refVal_setMinimumCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maximum_cpus"))))
    {
        int32_t refVal_setMaximumCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maximum_cpus"))), refVal_setMaximumCpus );
        setMaximumCpus(refVal_setMaximumCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        utility::string_t refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_nodes"))))
    {
        int32_t refVal_setMinimumNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_nodes"))), refVal_setMinimumNodes );
        setMinimumNodes(refVal_setMinimumNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maximum_nodes"))))
    {
        int32_t refVal_setMaximumNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maximum_nodes"))), refVal_setMaximumNodes );
        setMaximumNodes(refVal_setMaximumNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_boards_per_node"))))
    {
        int32_t refVal_setMinimumBoardsPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_boards_per_node"))), refVal_setMinimumBoardsPerNode );
        setMinimumBoardsPerNode(refVal_setMinimumBoardsPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_sockets_per_board"))))
    {
        int32_t refVal_setMinimumSocketsPerBoard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_sockets_per_board"))), refVal_setMinimumSocketsPerBoard );
        setMinimumSocketsPerBoard(refVal_setMinimumSocketsPerBoard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets_per_node"))))
    {
        int32_t refVal_setSocketsPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets_per_node"))), refVal_setSocketsPerNode );
        setSocketsPerNode(refVal_setSocketsPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        int32_t refVal_setThreadsPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threads_per_core"))), refVal_setThreadsPerCore );
        setThreadsPerCore(refVal_setThreadsPerCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_node"))))
    {
        int32_t refVal_setTasksPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_node"))), refVal_setTasksPerNode );
        setTasksPerNode(refVal_setTasksPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_socket"))))
    {
        int32_t refVal_setTasksPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_socket"))), refVal_setTasksPerSocket );
        setTasksPerSocket(refVal_setTasksPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_core"))))
    {
        int32_t refVal_setTasksPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_core"))), refVal_setTasksPerCore );
        setTasksPerCore(refVal_setTasksPerCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_board"))))
    {
        int32_t refVal_setTasksPerBoard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_board"))), refVal_setTasksPerBoard );
        setTasksPerBoard(refVal_setTasksPerBoard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ntasks_per_tres"))))
    {
        int32_t refVal_setNtasksPerTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ntasks_per_tres"))), refVal_setNtasksPerTres );
        setNtasksPerTres(refVal_setNtasksPerTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_cpus_per_node"))))
    {
        int32_t refVal_setMinimumCpusPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_cpus_per_node"))), refVal_setMinimumCpusPerNode );
        setMinimumCpusPerNode(refVal_setMinimumCpusPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_cpu"))), refVal_setMemoryPerCpu );
        setMemoryPerCpu(refVal_setMemoryPerCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_node"))), refVal_setMemoryPerNode );
        setMemoryPerNode(refVal_setMemoryPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temporary_disk_per_node"))))
    {
        int32_t refVal_setTemporaryDiskPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temporary_disk_per_node"))), refVal_setTemporaryDiskPerNode );
        setTemporaryDiskPerNode(refVal_setTemporaryDiskPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("selinux_context"))))
    {
        utility::string_t refVal_setSelinuxContext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("selinux_context"))), refVal_setSelinuxContext );
        setSelinuxContext(refVal_setSelinuxContext);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_switches"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setRequiredSwitches;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_switches"))), refVal_setRequiredSwitches );
        setRequiredSwitches(refVal_setRequiredSwitches);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_error"))))
    {
        utility::string_t refVal_setStandardError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_error"))), refVal_setStandardError );
        setStandardError(refVal_setStandardError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_input"))))
    {
        utility::string_t refVal_setStandardInput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_input"))), refVal_setStandardInput );
        setStandardInput(refVal_setStandardInput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_output"))))
    {
        utility::string_t refVal_setStandardOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_output"))), refVal_setStandardOutput );
        setStandardOutput(refVal_setStandardOutput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wait_for_switch"))))
    {
        int32_t refVal_setWaitForSwitch;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wait_for_switch"))), refVal_setWaitForSwitch );
        setWaitForSwitch(refVal_setWaitForSwitch);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckey"))))
    {
        utility::string_t refVal_setWckey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckey"))), refVal_setWckey );
        setWckey(refVal_setWckey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x11"))))
    {
        std::vector<utility::string_t> refVal_setX11;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x11"))), refVal_setX11 );
        setX11(refVal_setX11);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x11_magic_cookie"))))
    {
        utility::string_t refVal_setX11MagicCookie;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x11_magic_cookie"))), refVal_setX11MagicCookie );
        setX11MagicCookie(refVal_setX11MagicCookie);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x11_target_host"))))
    {
        utility::string_t refVal_setX11TargetHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x11_target_host"))), refVal_setX11TargetHost );
        setX11TargetHost(refVal_setX11TargetHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x11_target_port"))))
    {
        int32_t refVal_setX11TargetPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x11_target_port"))), refVal_setX11TargetPort );
        setX11TargetPort(refVal_setX11TargetPort);
    }
    return ok;
}

utility::string_t V0_0_39_job_desc_msg::getAccount() const
{
    return m_Account;
}

void V0_0_39_job_desc_msg::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool V0_0_39_job_desc_msg::accountIsSet() const
{
    return m_AccountIsSet;
}

void V0_0_39_job_desc_msg::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getAccountGatherFrequency() const
{
    return m_Account_gather_frequency;
}

void V0_0_39_job_desc_msg::setAccountGatherFrequency(const utility::string_t& value)
{
    m_Account_gather_frequency = value;
    m_Account_gather_frequencyIsSet = true;
}

bool V0_0_39_job_desc_msg::accountGatherFrequencyIsSet() const
{
    return m_Account_gather_frequencyIsSet;
}

void V0_0_39_job_desc_msg::unsetAccount_gather_frequency()
{
    m_Account_gather_frequencyIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getAdminComment() const
{
    return m_Admin_comment;
}

void V0_0_39_job_desc_msg::setAdminComment(const utility::string_t& value)
{
    m_Admin_comment = value;
    m_Admin_commentIsSet = true;
}

bool V0_0_39_job_desc_msg::adminCommentIsSet() const
{
    return m_Admin_commentIsSet;
}

void V0_0_39_job_desc_msg::unsetAdmin_comment()
{
    m_Admin_commentIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getAllocationNodeList() const
{
    return m_Allocation_node_list;
}

void V0_0_39_job_desc_msg::setAllocationNodeList(const utility::string_t& value)
{
    m_Allocation_node_list = value;
    m_Allocation_node_listIsSet = true;
}

bool V0_0_39_job_desc_msg::allocationNodeListIsSet() const
{
    return m_Allocation_node_listIsSet;
}

void V0_0_39_job_desc_msg::unsetAllocation_node_list()
{
    m_Allocation_node_listIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getAllocationNodePort() const
{
    return m_Allocation_node_port;
}

void V0_0_39_job_desc_msg::setAllocationNodePort(int32_t value)
{
    m_Allocation_node_port = value;
    m_Allocation_node_portIsSet = true;
}

bool V0_0_39_job_desc_msg::allocationNodePortIsSet() const
{
    return m_Allocation_node_portIsSet;
}

void V0_0_39_job_desc_msg::unsetAllocation_node_port()
{
    m_Allocation_node_portIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getArgv()
{
    return m_Argv;
}

void V0_0_39_job_desc_msg::setArgv(const std::vector<utility::string_t>& value)
{
    m_Argv = value;
    m_ArgvIsSet = true;
}

bool V0_0_39_job_desc_msg::argvIsSet() const
{
    return m_ArgvIsSet;
}

void V0_0_39_job_desc_msg::unsetArgv()
{
    m_ArgvIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getArray() const
{
    return m_array;
}

void V0_0_39_job_desc_msg::setArray(const utility::string_t& value)
{
    m_array = value;
    m_arrayIsSet = true;
}

bool V0_0_39_job_desc_msg::arrayIsSet() const
{
    return m_arrayIsSet;
}

void V0_0_39_job_desc_msg::unsetarray()
{
    m_arrayIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getBatchFeatures() const
{
    return m_Batch_features;
}

void V0_0_39_job_desc_msg::setBatchFeatures(const utility::string_t& value)
{
    m_Batch_features = value;
    m_Batch_featuresIsSet = true;
}

bool V0_0_39_job_desc_msg::batchFeaturesIsSet() const
{
    return m_Batch_featuresIsSet;
}

void V0_0_39_job_desc_msg::unsetBatch_features()
{
    m_Batch_featuresIsSet = false;
}
int64_t V0_0_39_job_desc_msg::getBeginTime() const
{
    return m_Begin_time;
}

void V0_0_39_job_desc_msg::setBeginTime(int64_t value)
{
    m_Begin_time = value;
    m_Begin_timeIsSet = true;
}

bool V0_0_39_job_desc_msg::beginTimeIsSet() const
{
    return m_Begin_timeIsSet;
}

void V0_0_39_job_desc_msg::unsetBegin_time()
{
    m_Begin_timeIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getFlags()
{
    return m_Flags;
}

void V0_0_39_job_desc_msg::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool V0_0_39_job_desc_msg::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void V0_0_39_job_desc_msg::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getBurstBuffer() const
{
    return m_Burst_buffer;
}

void V0_0_39_job_desc_msg::setBurstBuffer(const utility::string_t& value)
{
    m_Burst_buffer = value;
    m_Burst_bufferIsSet = true;
}

bool V0_0_39_job_desc_msg::burstBufferIsSet() const
{
    return m_Burst_bufferIsSet;
}

void V0_0_39_job_desc_msg::unsetBurst_buffer()
{
    m_Burst_bufferIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getClusters() const
{
    return m_Clusters;
}

void V0_0_39_job_desc_msg::setClusters(const utility::string_t& value)
{
    m_Clusters = value;
    m_ClustersIsSet = true;
}

bool V0_0_39_job_desc_msg::clustersIsSet() const
{
    return m_ClustersIsSet;
}

void V0_0_39_job_desc_msg::unsetClusters()
{
    m_ClustersIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getClusterConstraint() const
{
    return m_Cluster_constraint;
}

void V0_0_39_job_desc_msg::setClusterConstraint(const utility::string_t& value)
{
    m_Cluster_constraint = value;
    m_Cluster_constraintIsSet = true;
}

bool V0_0_39_job_desc_msg::clusterConstraintIsSet() const
{
    return m_Cluster_constraintIsSet;
}

void V0_0_39_job_desc_msg::unsetCluster_constraint()
{
    m_Cluster_constraintIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getComment() const
{
    return m_Comment;
}

void V0_0_39_job_desc_msg::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool V0_0_39_job_desc_msg::commentIsSet() const
{
    return m_CommentIsSet;
}

void V0_0_39_job_desc_msg::unsetComment()
{
    m_CommentIsSet = false;
}
bool V0_0_39_job_desc_msg::isContiguous() const
{
    return m_Contiguous;
}

void V0_0_39_job_desc_msg::setContiguous(bool value)
{
    m_Contiguous = value;
    m_ContiguousIsSet = true;
}

bool V0_0_39_job_desc_msg::contiguousIsSet() const
{
    return m_ContiguousIsSet;
}

void V0_0_39_job_desc_msg::unsetContiguous()
{
    m_ContiguousIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getContainer() const
{
    return m_Container;
}

void V0_0_39_job_desc_msg::setContainer(const utility::string_t& value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool V0_0_39_job_desc_msg::containerIsSet() const
{
    return m_ContainerIsSet;
}

void V0_0_39_job_desc_msg::unsetContainer()
{
    m_ContainerIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getContainerId() const
{
    return m_Container_id;
}

void V0_0_39_job_desc_msg::setContainerId(const utility::string_t& value)
{
    m_Container_id = value;
    m_Container_idIsSet = true;
}

bool V0_0_39_job_desc_msg::containerIdIsSet() const
{
    return m_Container_idIsSet;
}

void V0_0_39_job_desc_msg::unsetContainer_id()
{
    m_Container_idIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getCoreSpecification() const
{
    return m_Core_specification;
}

void V0_0_39_job_desc_msg::setCoreSpecification(int32_t value)
{
    m_Core_specification = value;
    m_Core_specificationIsSet = true;
}

bool V0_0_39_job_desc_msg::coreSpecificationIsSet() const
{
    return m_Core_specificationIsSet;
}

void V0_0_39_job_desc_msg::unsetCore_specification()
{
    m_Core_specificationIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getThreadSpecification() const
{
    return m_Thread_specification;
}

void V0_0_39_job_desc_msg::setThreadSpecification(int32_t value)
{
    m_Thread_specification = value;
    m_Thread_specificationIsSet = true;
}

bool V0_0_39_job_desc_msg::threadSpecificationIsSet() const
{
    return m_Thread_specificationIsSet;
}

void V0_0_39_job_desc_msg::unsetThread_specification()
{
    m_Thread_specificationIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getCpuBinding() const
{
    return m_Cpu_binding;
}

void V0_0_39_job_desc_msg::setCpuBinding(const utility::string_t& value)
{
    m_Cpu_binding = value;
    m_Cpu_bindingIsSet = true;
}

bool V0_0_39_job_desc_msg::cpuBindingIsSet() const
{
    return m_Cpu_bindingIsSet;
}

void V0_0_39_job_desc_msg::unsetCpu_binding()
{
    m_Cpu_bindingIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getCpuBindingFlags()
{
    return m_Cpu_binding_flags;
}

void V0_0_39_job_desc_msg::setCpuBindingFlags(const std::vector<utility::string_t>& value)
{
    m_Cpu_binding_flags = value;
    m_Cpu_binding_flagsIsSet = true;
}

bool V0_0_39_job_desc_msg::cpuBindingFlagsIsSet() const
{
    return m_Cpu_binding_flagsIsSet;
}

void V0_0_39_job_desc_msg::unsetCpu_binding_flags()
{
    m_Cpu_binding_flagsIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getCpuFrequency() const
{
    return m_Cpu_frequency;
}

void V0_0_39_job_desc_msg::setCpuFrequency(const utility::string_t& value)
{
    m_Cpu_frequency = value;
    m_Cpu_frequencyIsSet = true;
}

bool V0_0_39_job_desc_msg::cpuFrequencyIsSet() const
{
    return m_Cpu_frequencyIsSet;
}

void V0_0_39_job_desc_msg::unsetCpu_frequency()
{
    m_Cpu_frequencyIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getCpusPerTres() const
{
    return m_Cpus_per_tres;
}

void V0_0_39_job_desc_msg::setCpusPerTres(const utility::string_t& value)
{
    m_Cpus_per_tres = value;
    m_Cpus_per_tresIsSet = true;
}

bool V0_0_39_job_desc_msg::cpusPerTresIsSet() const
{
    return m_Cpus_per_tresIsSet;
}

void V0_0_39_job_desc_msg::unsetCpus_per_tres()
{
    m_Cpus_per_tresIsSet = false;
}
std::shared_ptr<V0_0_39_cron_entry> V0_0_39_job_desc_msg::getCrontab() const
{
    return m_Crontab;
}

void V0_0_39_job_desc_msg::setCrontab(const std::shared_ptr<V0_0_39_cron_entry>& value)
{
    m_Crontab = value;
    m_CrontabIsSet = true;
}

bool V0_0_39_job_desc_msg::crontabIsSet() const
{
    return m_CrontabIsSet;
}

void V0_0_39_job_desc_msg::unsetCrontab()
{
    m_CrontabIsSet = false;
}
int64_t V0_0_39_job_desc_msg::getDeadline() const
{
    return m_Deadline;
}

void V0_0_39_job_desc_msg::setDeadline(int64_t value)
{
    m_Deadline = value;
    m_DeadlineIsSet = true;
}

bool V0_0_39_job_desc_msg::deadlineIsSet() const
{
    return m_DeadlineIsSet;
}

void V0_0_39_job_desc_msg::unsetDeadline()
{
    m_DeadlineIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getDelayBoot() const
{
    return m_Delay_boot;
}

void V0_0_39_job_desc_msg::setDelayBoot(int32_t value)
{
    m_Delay_boot = value;
    m_Delay_bootIsSet = true;
}

bool V0_0_39_job_desc_msg::delayBootIsSet() const
{
    return m_Delay_bootIsSet;
}

void V0_0_39_job_desc_msg::unsetDelay_boot()
{
    m_Delay_bootIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getDependency() const
{
    return m_Dependency;
}

void V0_0_39_job_desc_msg::setDependency(const utility::string_t& value)
{
    m_Dependency = value;
    m_DependencyIsSet = true;
}

bool V0_0_39_job_desc_msg::dependencyIsSet() const
{
    return m_DependencyIsSet;
}

void V0_0_39_job_desc_msg::unsetDependency()
{
    m_DependencyIsSet = false;
}
int64_t V0_0_39_job_desc_msg::getEndTime() const
{
    return m_End_time;
}

void V0_0_39_job_desc_msg::setEndTime(int64_t value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}

bool V0_0_39_job_desc_msg::endTimeIsSet() const
{
    return m_End_timeIsSet;
}

void V0_0_39_job_desc_msg::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getEnvironment()
{
    return m_Environment;
}

void V0_0_39_job_desc_msg::setEnvironment(const std::vector<utility::string_t>& value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}

bool V0_0_39_job_desc_msg::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}

void V0_0_39_job_desc_msg::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getExcludedNodes()
{
    return m_Excluded_nodes;
}

void V0_0_39_job_desc_msg::setExcludedNodes(const std::vector<utility::string_t>& value)
{
    m_Excluded_nodes = value;
    m_Excluded_nodesIsSet = true;
}

bool V0_0_39_job_desc_msg::excludedNodesIsSet() const
{
    return m_Excluded_nodesIsSet;
}

void V0_0_39_job_desc_msg::unsetExcluded_nodes()
{
    m_Excluded_nodesIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getExtra() const
{
    return m_Extra;
}

void V0_0_39_job_desc_msg::setExtra(const utility::string_t& value)
{
    m_Extra = value;
    m_ExtraIsSet = true;
}

bool V0_0_39_job_desc_msg::extraIsSet() const
{
    return m_ExtraIsSet;
}

void V0_0_39_job_desc_msg::unsetExtra()
{
    m_ExtraIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getConstraints() const
{
    return m_Constraints;
}

void V0_0_39_job_desc_msg::setConstraints(const utility::string_t& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}

bool V0_0_39_job_desc_msg::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}

void V0_0_39_job_desc_msg::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getGroupId() const
{
    return m_Group_id;
}

void V0_0_39_job_desc_msg::setGroupId(const utility::string_t& value)
{
    m_Group_id = value;
    m_Group_idIsSet = true;
}

bool V0_0_39_job_desc_msg::groupIdIsSet() const
{
    return m_Group_idIsSet;
}

void V0_0_39_job_desc_msg::unsetGroup_id()
{
    m_Group_idIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getHetjobGroup() const
{
    return m_Hetjob_group;
}

void V0_0_39_job_desc_msg::setHetjobGroup(int32_t value)
{
    m_Hetjob_group = value;
    m_Hetjob_groupIsSet = true;
}

bool V0_0_39_job_desc_msg::hetjobGroupIsSet() const
{
    return m_Hetjob_groupIsSet;
}

void V0_0_39_job_desc_msg::unsetHetjob_group()
{
    m_Hetjob_groupIsSet = false;
}
bool V0_0_39_job_desc_msg::isImmediate() const
{
    return m_Immediate;
}

void V0_0_39_job_desc_msg::setImmediate(bool value)
{
    m_Immediate = value;
    m_ImmediateIsSet = true;
}

bool V0_0_39_job_desc_msg::immediateIsSet() const
{
    return m_ImmediateIsSet;
}

void V0_0_39_job_desc_msg::unsetImmediate()
{
    m_ImmediateIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getJobId() const
{
    return m_Job_id;
}

void V0_0_39_job_desc_msg::setJobId(int32_t value)
{
    m_Job_id = value;
    m_Job_idIsSet = true;
}

bool V0_0_39_job_desc_msg::jobIdIsSet() const
{
    return m_Job_idIsSet;
}

void V0_0_39_job_desc_msg::unsetJob_id()
{
    m_Job_idIsSet = false;
}
bool V0_0_39_job_desc_msg::isKillOnNodeFail() const
{
    return m_Kill_on_node_fail;
}

void V0_0_39_job_desc_msg::setKillOnNodeFail(bool value)
{
    m_Kill_on_node_fail = value;
    m_Kill_on_node_failIsSet = true;
}

bool V0_0_39_job_desc_msg::killOnNodeFailIsSet() const
{
    return m_Kill_on_node_failIsSet;
}

void V0_0_39_job_desc_msg::unsetKill_on_node_fail()
{
    m_Kill_on_node_failIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getLicenses() const
{
    return m_Licenses;
}

void V0_0_39_job_desc_msg::setLicenses(const utility::string_t& value)
{
    m_Licenses = value;
    m_LicensesIsSet = true;
}

bool V0_0_39_job_desc_msg::licensesIsSet() const
{
    return m_LicensesIsSet;
}

void V0_0_39_job_desc_msg::unsetLicenses()
{
    m_LicensesIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getMailType()
{
    return m_Mail_type;
}

void V0_0_39_job_desc_msg::setMailType(const std::vector<utility::string_t>& value)
{
    m_Mail_type = value;
    m_Mail_typeIsSet = true;
}

bool V0_0_39_job_desc_msg::mailTypeIsSet() const
{
    return m_Mail_typeIsSet;
}

void V0_0_39_job_desc_msg::unsetMail_type()
{
    m_Mail_typeIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getMailUser() const
{
    return m_Mail_user;
}

void V0_0_39_job_desc_msg::setMailUser(const utility::string_t& value)
{
    m_Mail_user = value;
    m_Mail_userIsSet = true;
}

bool V0_0_39_job_desc_msg::mailUserIsSet() const
{
    return m_Mail_userIsSet;
}

void V0_0_39_job_desc_msg::unsetMail_user()
{
    m_Mail_userIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getMcsLabel() const
{
    return m_Mcs_label;
}

void V0_0_39_job_desc_msg::setMcsLabel(const utility::string_t& value)
{
    m_Mcs_label = value;
    m_Mcs_labelIsSet = true;
}

bool V0_0_39_job_desc_msg::mcsLabelIsSet() const
{
    return m_Mcs_labelIsSet;
}

void V0_0_39_job_desc_msg::unsetMcs_label()
{
    m_Mcs_labelIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getMemoryBinding() const
{
    return m_Memory_binding;
}

void V0_0_39_job_desc_msg::setMemoryBinding(const utility::string_t& value)
{
    m_Memory_binding = value;
    m_Memory_bindingIsSet = true;
}

bool V0_0_39_job_desc_msg::memoryBindingIsSet() const
{
    return m_Memory_bindingIsSet;
}

void V0_0_39_job_desc_msg::unsetMemory_binding()
{
    m_Memory_bindingIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getMemoryBindingType()
{
    return m_Memory_binding_type;
}

void V0_0_39_job_desc_msg::setMemoryBindingType(const std::vector<utility::string_t>& value)
{
    m_Memory_binding_type = value;
    m_Memory_binding_typeIsSet = true;
}

bool V0_0_39_job_desc_msg::memoryBindingTypeIsSet() const
{
    return m_Memory_binding_typeIsSet;
}

void V0_0_39_job_desc_msg::unsetMemory_binding_type()
{
    m_Memory_binding_typeIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getMemoryPerTres() const
{
    return m_Memory_per_tres;
}

void V0_0_39_job_desc_msg::setMemoryPerTres(const utility::string_t& value)
{
    m_Memory_per_tres = value;
    m_Memory_per_tresIsSet = true;
}

bool V0_0_39_job_desc_msg::memoryPerTresIsSet() const
{
    return m_Memory_per_tresIsSet;
}

void V0_0_39_job_desc_msg::unsetMemory_per_tres()
{
    m_Memory_per_tresIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getName() const
{
    return m_Name;
}

void V0_0_39_job_desc_msg::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_39_job_desc_msg::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_39_job_desc_msg::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getNetwork() const
{
    return m_Network;
}

void V0_0_39_job_desc_msg::setNetwork(const utility::string_t& value)
{
    m_Network = value;
    m_NetworkIsSet = true;
}

bool V0_0_39_job_desc_msg::networkIsSet() const
{
    return m_NetworkIsSet;
}

void V0_0_39_job_desc_msg::unsetNetwork()
{
    m_NetworkIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getNice() const
{
    return m_Nice;
}

void V0_0_39_job_desc_msg::setNice(int32_t value)
{
    m_Nice = value;
    m_NiceIsSet = true;
}

bool V0_0_39_job_desc_msg::niceIsSet() const
{
    return m_NiceIsSet;
}

void V0_0_39_job_desc_msg::unsetNice()
{
    m_NiceIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getTasks() const
{
    return m_Tasks;
}

void V0_0_39_job_desc_msg::setTasks(int32_t value)
{
    m_Tasks = value;
    m_TasksIsSet = true;
}

bool V0_0_39_job_desc_msg::tasksIsSet() const
{
    return m_TasksIsSet;
}

void V0_0_39_job_desc_msg::unsetTasks()
{
    m_TasksIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getOpenMode()
{
    return m_Open_mode;
}

void V0_0_39_job_desc_msg::setOpenMode(const std::vector<utility::string_t>& value)
{
    m_Open_mode = value;
    m_Open_modeIsSet = true;
}

bool V0_0_39_job_desc_msg::openModeIsSet() const
{
    return m_Open_modeIsSet;
}

void V0_0_39_job_desc_msg::unsetOpen_mode()
{
    m_Open_modeIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getReservePorts() const
{
    return m_Reserve_ports;
}

void V0_0_39_job_desc_msg::setReservePorts(int32_t value)
{
    m_Reserve_ports = value;
    m_Reserve_portsIsSet = true;
}

bool V0_0_39_job_desc_msg::reservePortsIsSet() const
{
    return m_Reserve_portsIsSet;
}

void V0_0_39_job_desc_msg::unsetReserve_ports()
{
    m_Reserve_portsIsSet = false;
}
bool V0_0_39_job_desc_msg::isOvercommit() const
{
    return m_Overcommit;
}

void V0_0_39_job_desc_msg::setOvercommit(bool value)
{
    m_Overcommit = value;
    m_OvercommitIsSet = true;
}

bool V0_0_39_job_desc_msg::overcommitIsSet() const
{
    return m_OvercommitIsSet;
}

void V0_0_39_job_desc_msg::unsetOvercommit()
{
    m_OvercommitIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getPartition() const
{
    return m_Partition;
}

void V0_0_39_job_desc_msg::setPartition(const utility::string_t& value)
{
    m_Partition = value;
    m_PartitionIsSet = true;
}

bool V0_0_39_job_desc_msg::partitionIsSet() const
{
    return m_PartitionIsSet;
}

void V0_0_39_job_desc_msg::unsetPartition()
{
    m_PartitionIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getDistributionPlaneSize() const
{
    return m_Distribution_plane_size;
}

void V0_0_39_job_desc_msg::setDistributionPlaneSize(int32_t value)
{
    m_Distribution_plane_size = value;
    m_Distribution_plane_sizeIsSet = true;
}

bool V0_0_39_job_desc_msg::distributionPlaneSizeIsSet() const
{
    return m_Distribution_plane_sizeIsSet;
}

void V0_0_39_job_desc_msg::unsetDistribution_plane_size()
{
    m_Distribution_plane_sizeIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getPowerFlags()
{
    return m_Power_flags;
}

void V0_0_39_job_desc_msg::setPowerFlags(const std::vector<utility::string_t>& value)
{
    m_Power_flags = value;
    m_Power_flagsIsSet = true;
}

bool V0_0_39_job_desc_msg::powerFlagsIsSet() const
{
    return m_Power_flagsIsSet;
}

void V0_0_39_job_desc_msg::unsetPower_flags()
{
    m_Power_flagsIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getPrefer() const
{
    return m_Prefer;
}

void V0_0_39_job_desc_msg::setPrefer(const utility::string_t& value)
{
    m_Prefer = value;
    m_PreferIsSet = true;
}

bool V0_0_39_job_desc_msg::preferIsSet() const
{
    return m_PreferIsSet;
}

void V0_0_39_job_desc_msg::unsetPrefer()
{
    m_PreferIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getPriority() const
{
    return m_Priority;
}

void V0_0_39_job_desc_msg::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool V0_0_39_job_desc_msg::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void V0_0_39_job_desc_msg::unsetPriority()
{
    m_PriorityIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getProfile()
{
    return m_Profile;
}

void V0_0_39_job_desc_msg::setProfile(const std::vector<utility::string_t>& value)
{
    m_Profile = value;
    m_ProfileIsSet = true;
}

bool V0_0_39_job_desc_msg::profileIsSet() const
{
    return m_ProfileIsSet;
}

void V0_0_39_job_desc_msg::unsetProfile()
{
    m_ProfileIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getQos() const
{
    return m_Qos;
}

void V0_0_39_job_desc_msg::setQos(const utility::string_t& value)
{
    m_Qos = value;
    m_QosIsSet = true;
}

bool V0_0_39_job_desc_msg::qosIsSet() const
{
    return m_QosIsSet;
}

void V0_0_39_job_desc_msg::unsetQos()
{
    m_QosIsSet = false;
}
bool V0_0_39_job_desc_msg::isReboot() const
{
    return m_Reboot;
}

void V0_0_39_job_desc_msg::setReboot(bool value)
{
    m_Reboot = value;
    m_RebootIsSet = true;
}

bool V0_0_39_job_desc_msg::rebootIsSet() const
{
    return m_RebootIsSet;
}

void V0_0_39_job_desc_msg::unsetReboot()
{
    m_RebootIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getRequiredNodes()
{
    return m_Required_nodes;
}

void V0_0_39_job_desc_msg::setRequiredNodes(const std::vector<utility::string_t>& value)
{
    m_Required_nodes = value;
    m_Required_nodesIsSet = true;
}

bool V0_0_39_job_desc_msg::requiredNodesIsSet() const
{
    return m_Required_nodesIsSet;
}

void V0_0_39_job_desc_msg::unsetRequired_nodes()
{
    m_Required_nodesIsSet = false;
}
bool V0_0_39_job_desc_msg::isRequeue() const
{
    return m_Requeue;
}

void V0_0_39_job_desc_msg::setRequeue(bool value)
{
    m_Requeue = value;
    m_RequeueIsSet = true;
}

bool V0_0_39_job_desc_msg::requeueIsSet() const
{
    return m_RequeueIsSet;
}

void V0_0_39_job_desc_msg::unsetRequeue()
{
    m_RequeueIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getReservation() const
{
    return m_Reservation;
}

void V0_0_39_job_desc_msg::setReservation(const utility::string_t& value)
{
    m_Reservation = value;
    m_ReservationIsSet = true;
}

bool V0_0_39_job_desc_msg::reservationIsSet() const
{
    return m_ReservationIsSet;
}

void V0_0_39_job_desc_msg::unsetReservation()
{
    m_ReservationIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getScript() const
{
    return m_Script;
}

void V0_0_39_job_desc_msg::setScript(const utility::string_t& value)
{
    m_Script = value;
    m_ScriptIsSet = true;
}

bool V0_0_39_job_desc_msg::scriptIsSet() const
{
    return m_ScriptIsSet;
}

void V0_0_39_job_desc_msg::unsetScript()
{
    m_ScriptIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getShared()
{
    return m_Shared;
}

void V0_0_39_job_desc_msg::setShared(const std::vector<utility::string_t>& value)
{
    m_Shared = value;
    m_SharedIsSet = true;
}

bool V0_0_39_job_desc_msg::sharedIsSet() const
{
    return m_SharedIsSet;
}

void V0_0_39_job_desc_msg::unsetShared()
{
    m_SharedIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getExclusive()
{
    return m_Exclusive;
}

void V0_0_39_job_desc_msg::setExclusive(const std::vector<utility::string_t>& value)
{
    m_Exclusive = value;
    m_ExclusiveIsSet = true;
}

bool V0_0_39_job_desc_msg::exclusiveIsSet() const
{
    return m_ExclusiveIsSet;
}

void V0_0_39_job_desc_msg::unsetExclusive()
{
    m_ExclusiveIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getSiteFactor() const
{
    return m_Site_factor;
}

void V0_0_39_job_desc_msg::setSiteFactor(int32_t value)
{
    m_Site_factor = value;
    m_Site_factorIsSet = true;
}

bool V0_0_39_job_desc_msg::siteFactorIsSet() const
{
    return m_Site_factorIsSet;
}

void V0_0_39_job_desc_msg::unsetSite_factor()
{
    m_Site_factorIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getSpankEnvironment()
{
    return m_Spank_environment;
}

void V0_0_39_job_desc_msg::setSpankEnvironment(const std::vector<utility::string_t>& value)
{
    m_Spank_environment = value;
    m_Spank_environmentIsSet = true;
}

bool V0_0_39_job_desc_msg::spankEnvironmentIsSet() const
{
    return m_Spank_environmentIsSet;
}

void V0_0_39_job_desc_msg::unsetSpank_environment()
{
    m_Spank_environmentIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getDistribution() const
{
    return m_Distribution;
}

void V0_0_39_job_desc_msg::setDistribution(const utility::string_t& value)
{
    m_Distribution = value;
    m_DistributionIsSet = true;
}

bool V0_0_39_job_desc_msg::distributionIsSet() const
{
    return m_DistributionIsSet;
}

void V0_0_39_job_desc_msg::unsetDistribution()
{
    m_DistributionIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_desc_msg::getTimeLimit() const
{
    return m_Time_limit;
}

void V0_0_39_job_desc_msg::setTimeLimit(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Time_limit = value;
    m_Time_limitIsSet = true;
}

bool V0_0_39_job_desc_msg::timeLimitIsSet() const
{
    return m_Time_limitIsSet;
}

void V0_0_39_job_desc_msg::unsetTime_limit()
{
    m_Time_limitIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_desc_msg::getTimeMinimum() const
{
    return m_Time_minimum;
}

void V0_0_39_job_desc_msg::setTimeMinimum(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Time_minimum = value;
    m_Time_minimumIsSet = true;
}

bool V0_0_39_job_desc_msg::timeMinimumIsSet() const
{
    return m_Time_minimumIsSet;
}

void V0_0_39_job_desc_msg::unsetTime_minimum()
{
    m_Time_minimumIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getTresBind() const
{
    return m_Tres_bind;
}

void V0_0_39_job_desc_msg::setTresBind(const utility::string_t& value)
{
    m_Tres_bind = value;
    m_Tres_bindIsSet = true;
}

bool V0_0_39_job_desc_msg::tresBindIsSet() const
{
    return m_Tres_bindIsSet;
}

void V0_0_39_job_desc_msg::unsetTres_bind()
{
    m_Tres_bindIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getTresFreq() const
{
    return m_Tres_freq;
}

void V0_0_39_job_desc_msg::setTresFreq(const utility::string_t& value)
{
    m_Tres_freq = value;
    m_Tres_freqIsSet = true;
}

bool V0_0_39_job_desc_msg::tresFreqIsSet() const
{
    return m_Tres_freqIsSet;
}

void V0_0_39_job_desc_msg::unsetTres_freq()
{
    m_Tres_freqIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getTresPerJob() const
{
    return m_Tres_per_job;
}

void V0_0_39_job_desc_msg::setTresPerJob(const utility::string_t& value)
{
    m_Tres_per_job = value;
    m_Tres_per_jobIsSet = true;
}

bool V0_0_39_job_desc_msg::tresPerJobIsSet() const
{
    return m_Tres_per_jobIsSet;
}

void V0_0_39_job_desc_msg::unsetTres_per_job()
{
    m_Tres_per_jobIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getTresPerNode() const
{
    return m_Tres_per_node;
}

void V0_0_39_job_desc_msg::setTresPerNode(const utility::string_t& value)
{
    m_Tres_per_node = value;
    m_Tres_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::tresPerNodeIsSet() const
{
    return m_Tres_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetTres_per_node()
{
    m_Tres_per_nodeIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getTresPerSocket() const
{
    return m_Tres_per_socket;
}

void V0_0_39_job_desc_msg::setTresPerSocket(const utility::string_t& value)
{
    m_Tres_per_socket = value;
    m_Tres_per_socketIsSet = true;
}

bool V0_0_39_job_desc_msg::tresPerSocketIsSet() const
{
    return m_Tres_per_socketIsSet;
}

void V0_0_39_job_desc_msg::unsetTres_per_socket()
{
    m_Tres_per_socketIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getTresPerTask() const
{
    return m_Tres_per_task;
}

void V0_0_39_job_desc_msg::setTresPerTask(const utility::string_t& value)
{
    m_Tres_per_task = value;
    m_Tres_per_taskIsSet = true;
}

bool V0_0_39_job_desc_msg::tresPerTaskIsSet() const
{
    return m_Tres_per_taskIsSet;
}

void V0_0_39_job_desc_msg::unsetTres_per_task()
{
    m_Tres_per_taskIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getUserId() const
{
    return m_User_id;
}

void V0_0_39_job_desc_msg::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool V0_0_39_job_desc_msg::userIdIsSet() const
{
    return m_User_idIsSet;
}

void V0_0_39_job_desc_msg::unsetUser_id()
{
    m_User_idIsSet = false;
}
bool V0_0_39_job_desc_msg::isWaitAllNodes() const
{
    return m_Wait_all_nodes;
}

void V0_0_39_job_desc_msg::setWaitAllNodes(bool value)
{
    m_Wait_all_nodes = value;
    m_Wait_all_nodesIsSet = true;
}

bool V0_0_39_job_desc_msg::waitAllNodesIsSet() const
{
    return m_Wait_all_nodesIsSet;
}

void V0_0_39_job_desc_msg::unsetWait_all_nodes()
{
    m_Wait_all_nodesIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getKillWarningFlags()
{
    return m_Kill_warning_flags;
}

void V0_0_39_job_desc_msg::setKillWarningFlags(const std::vector<utility::string_t>& value)
{
    m_Kill_warning_flags = value;
    m_Kill_warning_flagsIsSet = true;
}

bool V0_0_39_job_desc_msg::killWarningFlagsIsSet() const
{
    return m_Kill_warning_flagsIsSet;
}

void V0_0_39_job_desc_msg::unsetKill_warning_flags()
{
    m_Kill_warning_flagsIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getKillWarningSignal() const
{
    return m_Kill_warning_signal;
}

void V0_0_39_job_desc_msg::setKillWarningSignal(const utility::string_t& value)
{
    m_Kill_warning_signal = value;
    m_Kill_warning_signalIsSet = true;
}

bool V0_0_39_job_desc_msg::killWarningSignalIsSet() const
{
    return m_Kill_warning_signalIsSet;
}

void V0_0_39_job_desc_msg::unsetKill_warning_signal()
{
    m_Kill_warning_signalIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_desc_msg::getKillWarningDelay() const
{
    return m_Kill_warning_delay;
}

void V0_0_39_job_desc_msg::setKillWarningDelay(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Kill_warning_delay = value;
    m_Kill_warning_delayIsSet = true;
}

bool V0_0_39_job_desc_msg::killWarningDelayIsSet() const
{
    return m_Kill_warning_delayIsSet;
}

void V0_0_39_job_desc_msg::unsetKill_warning_delay()
{
    m_Kill_warning_delayIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getCurrentWorkingDirectory() const
{
    return m_Current_working_directory;
}

void V0_0_39_job_desc_msg::setCurrentWorkingDirectory(const utility::string_t& value)
{
    m_Current_working_directory = value;
    m_Current_working_directoryIsSet = true;
}

bool V0_0_39_job_desc_msg::currentWorkingDirectoryIsSet() const
{
    return m_Current_working_directoryIsSet;
}

void V0_0_39_job_desc_msg::unsetCurrent_working_directory()
{
    m_Current_working_directoryIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getCpusPerTask() const
{
    return m_Cpus_per_task;
}

void V0_0_39_job_desc_msg::setCpusPerTask(int32_t value)
{
    m_Cpus_per_task = value;
    m_Cpus_per_taskIsSet = true;
}

bool V0_0_39_job_desc_msg::cpusPerTaskIsSet() const
{
    return m_Cpus_per_taskIsSet;
}

void V0_0_39_job_desc_msg::unsetCpus_per_task()
{
    m_Cpus_per_taskIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMinimumCpus() const
{
    return m_Minimum_cpus;
}

void V0_0_39_job_desc_msg::setMinimumCpus(int32_t value)
{
    m_Minimum_cpus = value;
    m_Minimum_cpusIsSet = true;
}

bool V0_0_39_job_desc_msg::minimumCpusIsSet() const
{
    return m_Minimum_cpusIsSet;
}

void V0_0_39_job_desc_msg::unsetMinimum_cpus()
{
    m_Minimum_cpusIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMaximumCpus() const
{
    return m_Maximum_cpus;
}

void V0_0_39_job_desc_msg::setMaximumCpus(int32_t value)
{
    m_Maximum_cpus = value;
    m_Maximum_cpusIsSet = true;
}

bool V0_0_39_job_desc_msg::maximumCpusIsSet() const
{
    return m_Maximum_cpusIsSet;
}

void V0_0_39_job_desc_msg::unsetMaximum_cpus()
{
    m_Maximum_cpusIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getNodes() const
{
    return m_Nodes;
}

void V0_0_39_job_desc_msg::setNodes(const utility::string_t& value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool V0_0_39_job_desc_msg::nodesIsSet() const
{
    return m_NodesIsSet;
}

void V0_0_39_job_desc_msg::unsetNodes()
{
    m_NodesIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMinimumNodes() const
{
    return m_Minimum_nodes;
}

void V0_0_39_job_desc_msg::setMinimumNodes(int32_t value)
{
    m_Minimum_nodes = value;
    m_Minimum_nodesIsSet = true;
}

bool V0_0_39_job_desc_msg::minimumNodesIsSet() const
{
    return m_Minimum_nodesIsSet;
}

void V0_0_39_job_desc_msg::unsetMinimum_nodes()
{
    m_Minimum_nodesIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMaximumNodes() const
{
    return m_Maximum_nodes;
}

void V0_0_39_job_desc_msg::setMaximumNodes(int32_t value)
{
    m_Maximum_nodes = value;
    m_Maximum_nodesIsSet = true;
}

bool V0_0_39_job_desc_msg::maximumNodesIsSet() const
{
    return m_Maximum_nodesIsSet;
}

void V0_0_39_job_desc_msg::unsetMaximum_nodes()
{
    m_Maximum_nodesIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMinimumBoardsPerNode() const
{
    return m_Minimum_boards_per_node;
}

void V0_0_39_job_desc_msg::setMinimumBoardsPerNode(int32_t value)
{
    m_Minimum_boards_per_node = value;
    m_Minimum_boards_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::minimumBoardsPerNodeIsSet() const
{
    return m_Minimum_boards_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetMinimum_boards_per_node()
{
    m_Minimum_boards_per_nodeIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMinimumSocketsPerBoard() const
{
    return m_Minimum_sockets_per_board;
}

void V0_0_39_job_desc_msg::setMinimumSocketsPerBoard(int32_t value)
{
    m_Minimum_sockets_per_board = value;
    m_Minimum_sockets_per_boardIsSet = true;
}

bool V0_0_39_job_desc_msg::minimumSocketsPerBoardIsSet() const
{
    return m_Minimum_sockets_per_boardIsSet;
}

void V0_0_39_job_desc_msg::unsetMinimum_sockets_per_board()
{
    m_Minimum_sockets_per_boardIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getSocketsPerNode() const
{
    return m_Sockets_per_node;
}

void V0_0_39_job_desc_msg::setSocketsPerNode(int32_t value)
{
    m_Sockets_per_node = value;
    m_Sockets_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::socketsPerNodeIsSet() const
{
    return m_Sockets_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetSockets_per_node()
{
    m_Sockets_per_nodeIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getThreadsPerCore() const
{
    return m_Threads_per_core;
}

void V0_0_39_job_desc_msg::setThreadsPerCore(int32_t value)
{
    m_Threads_per_core = value;
    m_Threads_per_coreIsSet = true;
}

bool V0_0_39_job_desc_msg::threadsPerCoreIsSet() const
{
    return m_Threads_per_coreIsSet;
}

void V0_0_39_job_desc_msg::unsetThreads_per_core()
{
    m_Threads_per_coreIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getTasksPerNode() const
{
    return m_Tasks_per_node;
}

void V0_0_39_job_desc_msg::setTasksPerNode(int32_t value)
{
    m_Tasks_per_node = value;
    m_Tasks_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::tasksPerNodeIsSet() const
{
    return m_Tasks_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetTasks_per_node()
{
    m_Tasks_per_nodeIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getTasksPerSocket() const
{
    return m_Tasks_per_socket;
}

void V0_0_39_job_desc_msg::setTasksPerSocket(int32_t value)
{
    m_Tasks_per_socket = value;
    m_Tasks_per_socketIsSet = true;
}

bool V0_0_39_job_desc_msg::tasksPerSocketIsSet() const
{
    return m_Tasks_per_socketIsSet;
}

void V0_0_39_job_desc_msg::unsetTasks_per_socket()
{
    m_Tasks_per_socketIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getTasksPerCore() const
{
    return m_Tasks_per_core;
}

void V0_0_39_job_desc_msg::setTasksPerCore(int32_t value)
{
    m_Tasks_per_core = value;
    m_Tasks_per_coreIsSet = true;
}

bool V0_0_39_job_desc_msg::tasksPerCoreIsSet() const
{
    return m_Tasks_per_coreIsSet;
}

void V0_0_39_job_desc_msg::unsetTasks_per_core()
{
    m_Tasks_per_coreIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getTasksPerBoard() const
{
    return m_Tasks_per_board;
}

void V0_0_39_job_desc_msg::setTasksPerBoard(int32_t value)
{
    m_Tasks_per_board = value;
    m_Tasks_per_boardIsSet = true;
}

bool V0_0_39_job_desc_msg::tasksPerBoardIsSet() const
{
    return m_Tasks_per_boardIsSet;
}

void V0_0_39_job_desc_msg::unsetTasks_per_board()
{
    m_Tasks_per_boardIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getNtasksPerTres() const
{
    return m_Ntasks_per_tres;
}

void V0_0_39_job_desc_msg::setNtasksPerTres(int32_t value)
{
    m_Ntasks_per_tres = value;
    m_Ntasks_per_tresIsSet = true;
}

bool V0_0_39_job_desc_msg::ntasksPerTresIsSet() const
{
    return m_Ntasks_per_tresIsSet;
}

void V0_0_39_job_desc_msg::unsetNtasks_per_tres()
{
    m_Ntasks_per_tresIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getMinimumCpusPerNode() const
{
    return m_Minimum_cpus_per_node;
}

void V0_0_39_job_desc_msg::setMinimumCpusPerNode(int32_t value)
{
    m_Minimum_cpus_per_node = value;
    m_Minimum_cpus_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::minimumCpusPerNodeIsSet() const
{
    return m_Minimum_cpus_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetMinimum_cpus_per_node()
{
    m_Minimum_cpus_per_nodeIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_job_desc_msg::getMemoryPerCpu() const
{
    return m_Memory_per_cpu;
}

void V0_0_39_job_desc_msg::setMemoryPerCpu(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Memory_per_cpu = value;
    m_Memory_per_cpuIsSet = true;
}

bool V0_0_39_job_desc_msg::memoryPerCpuIsSet() const
{
    return m_Memory_per_cpuIsSet;
}

void V0_0_39_job_desc_msg::unsetMemory_per_cpu()
{
    m_Memory_per_cpuIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_job_desc_msg::getMemoryPerNode() const
{
    return m_Memory_per_node;
}

void V0_0_39_job_desc_msg::setMemoryPerNode(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Memory_per_node = value;
    m_Memory_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::memoryPerNodeIsSet() const
{
    return m_Memory_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetMemory_per_node()
{
    m_Memory_per_nodeIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getTemporaryDiskPerNode() const
{
    return m_Temporary_disk_per_node;
}

void V0_0_39_job_desc_msg::setTemporaryDiskPerNode(int32_t value)
{
    m_Temporary_disk_per_node = value;
    m_Temporary_disk_per_nodeIsSet = true;
}

bool V0_0_39_job_desc_msg::temporaryDiskPerNodeIsSet() const
{
    return m_Temporary_disk_per_nodeIsSet;
}

void V0_0_39_job_desc_msg::unsetTemporary_disk_per_node()
{
    m_Temporary_disk_per_nodeIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getSelinuxContext() const
{
    return m_Selinux_context;
}

void V0_0_39_job_desc_msg::setSelinuxContext(const utility::string_t& value)
{
    m_Selinux_context = value;
    m_Selinux_contextIsSet = true;
}

bool V0_0_39_job_desc_msg::selinuxContextIsSet() const
{
    return m_Selinux_contextIsSet;
}

void V0_0_39_job_desc_msg::unsetSelinux_context()
{
    m_Selinux_contextIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_desc_msg::getRequiredSwitches() const
{
    return m_Required_switches;
}

void V0_0_39_job_desc_msg::setRequiredSwitches(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Required_switches = value;
    m_Required_switchesIsSet = true;
}

bool V0_0_39_job_desc_msg::requiredSwitchesIsSet() const
{
    return m_Required_switchesIsSet;
}

void V0_0_39_job_desc_msg::unsetRequired_switches()
{
    m_Required_switchesIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getStandardError() const
{
    return m_Standard_error;
}

void V0_0_39_job_desc_msg::setStandardError(const utility::string_t& value)
{
    m_Standard_error = value;
    m_Standard_errorIsSet = true;
}

bool V0_0_39_job_desc_msg::standardErrorIsSet() const
{
    return m_Standard_errorIsSet;
}

void V0_0_39_job_desc_msg::unsetStandard_error()
{
    m_Standard_errorIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getStandardInput() const
{
    return m_Standard_input;
}

void V0_0_39_job_desc_msg::setStandardInput(const utility::string_t& value)
{
    m_Standard_input = value;
    m_Standard_inputIsSet = true;
}

bool V0_0_39_job_desc_msg::standardInputIsSet() const
{
    return m_Standard_inputIsSet;
}

void V0_0_39_job_desc_msg::unsetStandard_input()
{
    m_Standard_inputIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getStandardOutput() const
{
    return m_Standard_output;
}

void V0_0_39_job_desc_msg::setStandardOutput(const utility::string_t& value)
{
    m_Standard_output = value;
    m_Standard_outputIsSet = true;
}

bool V0_0_39_job_desc_msg::standardOutputIsSet() const
{
    return m_Standard_outputIsSet;
}

void V0_0_39_job_desc_msg::unsetStandard_output()
{
    m_Standard_outputIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getWaitForSwitch() const
{
    return m_Wait_for_switch;
}

void V0_0_39_job_desc_msg::setWaitForSwitch(int32_t value)
{
    m_Wait_for_switch = value;
    m_Wait_for_switchIsSet = true;
}

bool V0_0_39_job_desc_msg::waitForSwitchIsSet() const
{
    return m_Wait_for_switchIsSet;
}

void V0_0_39_job_desc_msg::unsetWait_for_switch()
{
    m_Wait_for_switchIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getWckey() const
{
    return m_Wckey;
}

void V0_0_39_job_desc_msg::setWckey(const utility::string_t& value)
{
    m_Wckey = value;
    m_WckeyIsSet = true;
}

bool V0_0_39_job_desc_msg::wckeyIsSet() const
{
    return m_WckeyIsSet;
}

void V0_0_39_job_desc_msg::unsetWckey()
{
    m_WckeyIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_desc_msg::getX11()
{
    return m_X11;
}

void V0_0_39_job_desc_msg::setX11(const std::vector<utility::string_t>& value)
{
    m_X11 = value;
    m_X11IsSet = true;
}

bool V0_0_39_job_desc_msg::x11IsSet() const
{
    return m_X11IsSet;
}

void V0_0_39_job_desc_msg::unsetX11()
{
    m_X11IsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getX11MagicCookie() const
{
    return m_X11_magic_cookie;
}

void V0_0_39_job_desc_msg::setX11MagicCookie(const utility::string_t& value)
{
    m_X11_magic_cookie = value;
    m_X11_magic_cookieIsSet = true;
}

bool V0_0_39_job_desc_msg::x11MagicCookieIsSet() const
{
    return m_X11_magic_cookieIsSet;
}

void V0_0_39_job_desc_msg::unsetX11_magic_cookie()
{
    m_X11_magic_cookieIsSet = false;
}
utility::string_t V0_0_39_job_desc_msg::getX11TargetHost() const
{
    return m_X11_target_host;
}

void V0_0_39_job_desc_msg::setX11TargetHost(const utility::string_t& value)
{
    m_X11_target_host = value;
    m_X11_target_hostIsSet = true;
}

bool V0_0_39_job_desc_msg::x11TargetHostIsSet() const
{
    return m_X11_target_hostIsSet;
}

void V0_0_39_job_desc_msg::unsetX11_target_host()
{
    m_X11_target_hostIsSet = false;
}
int32_t V0_0_39_job_desc_msg::getX11TargetPort() const
{
    return m_X11_target_port;
}

void V0_0_39_job_desc_msg::setX11TargetPort(int32_t value)
{
    m_X11_target_port = value;
    m_X11_target_portIsSet = true;
}

bool V0_0_39_job_desc_msg::x11TargetPortIsSet() const
{
    return m_X11_target_portIsSet;
}

void V0_0_39_job_desc_msg::unsetX11_target_port()
{
    m_X11_target_portIsSet = false;
}
}
}
}
}


