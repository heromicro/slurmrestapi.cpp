/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory()
{
    m_Used = 0L;
    m_UsedIsSet = false;
    m_Allocated = 0L;
    m_AllocatedIsSet = false;
}

V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::~V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory()
{
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_UsedIsSet)
    {
        val[utility::conversions::to_string_t(U("used"))] = ModelBase::toJson(m_Used);
    }
    if(m_AllocatedIsSet)
    {
        val[utility::conversions::to_string_t(U("allocated"))] = ModelBase::toJson(m_Allocated);
    }

    return val;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("used")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsed);
            setUsed(refVal_setUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allocated"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allocated")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setAllocated;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocated);
            setAllocated(refVal_setAllocated);
        }
    }
    return ok;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_UsedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("used")), m_Used));
    }
    if(m_AllocatedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allocated")), m_Allocated));
    }
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("used"))))
    {
        int64_t refVal_setUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("used"))), refVal_setUsed );
        setUsed(refVal_setUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allocated"))))
    {
        int64_t refVal_setAllocated;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allocated"))), refVal_setAllocated );
        setAllocated(refVal_setAllocated);
    }
    return ok;
}

int64_t V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::getUsed() const
{
    return m_Used;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::setUsed(int64_t value)
{
    m_Used = value;
    m_UsedIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::usedIsSet() const
{
    return m_UsedIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::unsetUsed()
{
    m_UsedIsSet = false;
}
int64_t V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::getAllocated() const
{
    return m_Allocated;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::setAllocated(int64_t value)
{
    m_Allocated = value;
    m_AllocatedIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::allocatedIsSet() const
{
    return m_AllocatedIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory::unsetAllocated()
{
    m_AllocatedIsSet = false;
}
}
}
}
}


