/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_openapi_meta_client.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_40_openapi_meta_client::V0_0_40_openapi_meta_client()
{
    m_Source = utility::conversions::to_string_t("");
    m_SourceIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
}

V0_0_40_openapi_meta_client::~V0_0_40_openapi_meta_client()
{
}

void V0_0_40_openapi_meta_client::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_openapi_meta_client::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t(U("source"))] = ModelBase::toJson(m_Source);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_Group);
    }

    return val;
}

bool V0_0_40_openapi_meta_client::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSource);
            setSource(refVal_setSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    return ok;
}

void V0_0_40_openapi_meta_client::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source")), m_Source));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_Group));
    }
}

bool V0_0_40_openapi_meta_client::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("source"))))
    {
        utility::string_t refVal_setSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source"))), refVal_setSource );
        setSource(refVal_setSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    return ok;
}

utility::string_t V0_0_40_openapi_meta_client::getSource() const
{
    return m_Source;
}

void V0_0_40_openapi_meta_client::setSource(const utility::string_t& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool V0_0_40_openapi_meta_client::sourceIsSet() const
{
    return m_SourceIsSet;
}

void V0_0_40_openapi_meta_client::unsetSource()
{
    m_SourceIsSet = false;
}
utility::string_t V0_0_40_openapi_meta_client::getUser() const
{
    return m_User;
}

void V0_0_40_openapi_meta_client::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool V0_0_40_openapi_meta_client::userIsSet() const
{
    return m_UserIsSet;
}

void V0_0_40_openapi_meta_client::unsetUser()
{
    m_UserIsSet = false;
}
utility::string_t V0_0_40_openapi_meta_client::getGroup() const
{
    return m_Group;
}

void V0_0_40_openapi_meta_client::setGroup(const utility::string_t& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}

bool V0_0_40_openapi_meta_client::groupIsSet() const
{
    return m_GroupIsSet;
}

void V0_0_40_openapi_meta_client::unsetGroup()
{
    m_GroupIsSet = false;
}
}
}
}
}


