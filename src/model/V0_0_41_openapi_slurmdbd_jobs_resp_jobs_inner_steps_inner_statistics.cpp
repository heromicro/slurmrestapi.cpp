/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics()
{
    m_CPUIsSet = false;
    m_EnergyIsSet = false;
}

V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::~V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics()
{
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CPUIsSet)
    {
        val[utility::conversions::to_string_t(U("CPU"))] = ModelBase::toJson(m_CPU);
    }
    if(m_EnergyIsSet)
    {
        val[utility::conversions::to_string_t(U("energy"))] = ModelBase::toJson(m_Energy);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("CPU"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CPU")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_step_statistics_CPU> refVal_setCPU;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCPU);
            setCPU(refVal_setCPU);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("energy")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics_energy> refVal_setEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnergy);
            setEnergy(refVal_setEnergy);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CPUIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CPU")), m_CPU));
    }
    if(m_EnergyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("energy")), m_Energy));
    }
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("CPU"))))
    {
        std::shared_ptr<V0_0_40_step_statistics_CPU> refVal_setCPU;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CPU"))), refVal_setCPU );
        setCPU(refVal_setCPU);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("energy"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics_energy> refVal_setEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("energy"))), refVal_setEnergy );
        setEnergy(refVal_setEnergy);
    }
    return ok;
}

std::shared_ptr<V0_0_40_step_statistics_CPU> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::getCPU() const
{
    return m_CPU;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::setCPU(const std::shared_ptr<V0_0_40_step_statistics_CPU>& value)
{
    m_CPU = value;
    m_CPUIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::cPUIsSet() const
{
    return m_CPUIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::unsetCPU()
{
    m_CPUIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics_energy> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::getEnergy() const
{
    return m_Energy;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::setEnergy(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics_energy>& value)
{
    m_Energy = value;
    m_EnergyIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::energyIsSet() const
{
    return m_EnergyIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_statistics::unsetEnergy()
{
    m_EnergyIsSet = false;
}
}
}
}
}


