/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_stats_msg.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_stats_msg::V0_0_40_stats_msg()
{
    m_Parts_packed = 0;
    m_Parts_packedIsSet = false;
    m_Req_timeIsSet = false;
    m_Req_time_startIsSet = false;
    m_Server_thread_count = 0;
    m_Server_thread_countIsSet = false;
    m_Agent_queue_size = 0;
    m_Agent_queue_sizeIsSet = false;
    m_Agent_count = 0;
    m_Agent_countIsSet = false;
    m_Agent_thread_count = 0;
    m_Agent_thread_countIsSet = false;
    m_Dbd_agent_queue_size = 0;
    m_Dbd_agent_queue_sizeIsSet = false;
    m_Gettimeofday_latency = 0;
    m_Gettimeofday_latencyIsSet = false;
    m_Schedule_cycle_max = 0;
    m_Schedule_cycle_maxIsSet = false;
    m_Schedule_cycle_last = 0;
    m_Schedule_cycle_lastIsSet = false;
    m_Schedule_cycle_total = 0;
    m_Schedule_cycle_totalIsSet = false;
    m_Schedule_cycle_mean = 0L;
    m_Schedule_cycle_meanIsSet = false;
    m_Schedule_cycle_mean_depth = 0L;
    m_Schedule_cycle_mean_depthIsSet = false;
    m_Schedule_cycle_per_minute = 0L;
    m_Schedule_cycle_per_minuteIsSet = false;
    m_Schedule_queue_length = 0;
    m_Schedule_queue_lengthIsSet = false;
    m_Schedule_exitIsSet = false;
    m_Jobs_submitted = 0;
    m_Jobs_submittedIsSet = false;
    m_Jobs_started = 0;
    m_Jobs_startedIsSet = false;
    m_Jobs_completed = 0;
    m_Jobs_completedIsSet = false;
    m_Jobs_canceled = 0;
    m_Jobs_canceledIsSet = false;
    m_Jobs_failed = 0;
    m_Jobs_failedIsSet = false;
    m_Jobs_pending = 0;
    m_Jobs_pendingIsSet = false;
    m_Jobs_running = 0;
    m_Jobs_runningIsSet = false;
    m_Job_states_tsIsSet = false;
    m_Bf_backfilled_jobs = 0;
    m_Bf_backfilled_jobsIsSet = false;
    m_Bf_last_backfilled_jobs = 0;
    m_Bf_last_backfilled_jobsIsSet = false;
    m_Bf_backfilled_het_jobs = 0;
    m_Bf_backfilled_het_jobsIsSet = false;
    m_Bf_cycle_counter = 0;
    m_Bf_cycle_counterIsSet = false;
    m_Bf_cycle_mean = 0L;
    m_Bf_cycle_meanIsSet = false;
    m_Bf_depth_mean = 0L;
    m_Bf_depth_meanIsSet = false;
    m_Bf_depth_mean_try = 0L;
    m_Bf_depth_mean_tryIsSet = false;
    m_Bf_cycle_sum = 0L;
    m_Bf_cycle_sumIsSet = false;
    m_Bf_cycle_last = 0;
    m_Bf_cycle_lastIsSet = false;
    m_Bf_last_depth = 0;
    m_Bf_last_depthIsSet = false;
    m_Bf_last_depth_try = 0;
    m_Bf_last_depth_tryIsSet = false;
    m_Bf_depth_sum = 0;
    m_Bf_depth_sumIsSet = false;
    m_Bf_depth_try_sum = 0;
    m_Bf_depth_try_sumIsSet = false;
    m_Bf_queue_len = 0;
    m_Bf_queue_lenIsSet = false;
    m_Bf_queue_len_mean = 0L;
    m_Bf_queue_len_meanIsSet = false;
    m_Bf_queue_len_sum = 0;
    m_Bf_queue_len_sumIsSet = false;
    m_Bf_table_size = 0;
    m_Bf_table_sizeIsSet = false;
    m_Bf_table_size_mean = 0L;
    m_Bf_table_size_meanIsSet = false;
    m_Bf_when_last_cycleIsSet = false;
    m_Bf_active = false;
    m_Bf_activeIsSet = false;
    m_Bf_exitIsSet = false;
    m_Rpcs_by_message_typeIsSet = false;
    m_Rpcs_by_userIsSet = false;
}

V0_0_40_stats_msg::~V0_0_40_stats_msg()
{
}

void V0_0_40_stats_msg::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_stats_msg::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Parts_packedIsSet)
    {
        val[utility::conversions::to_string_t(U("parts_packed"))] = ModelBase::toJson(m_Parts_packed);
    }
    if(m_Req_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("req_time"))] = ModelBase::toJson(m_Req_time);
    }
    if(m_Req_time_startIsSet)
    {
        val[utility::conversions::to_string_t(U("req_time_start"))] = ModelBase::toJson(m_Req_time_start);
    }
    if(m_Server_thread_countIsSet)
    {
        val[utility::conversions::to_string_t(U("server_thread_count"))] = ModelBase::toJson(m_Server_thread_count);
    }
    if(m_Agent_queue_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("agent_queue_size"))] = ModelBase::toJson(m_Agent_queue_size);
    }
    if(m_Agent_countIsSet)
    {
        val[utility::conversions::to_string_t(U("agent_count"))] = ModelBase::toJson(m_Agent_count);
    }
    if(m_Agent_thread_countIsSet)
    {
        val[utility::conversions::to_string_t(U("agent_thread_count"))] = ModelBase::toJson(m_Agent_thread_count);
    }
    if(m_Dbd_agent_queue_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("dbd_agent_queue_size"))] = ModelBase::toJson(m_Dbd_agent_queue_size);
    }
    if(m_Gettimeofday_latencyIsSet)
    {
        val[utility::conversions::to_string_t(U("gettimeofday_latency"))] = ModelBase::toJson(m_Gettimeofday_latency);
    }
    if(m_Schedule_cycle_maxIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_max"))] = ModelBase::toJson(m_Schedule_cycle_max);
    }
    if(m_Schedule_cycle_lastIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_last"))] = ModelBase::toJson(m_Schedule_cycle_last);
    }
    if(m_Schedule_cycle_totalIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_total"))] = ModelBase::toJson(m_Schedule_cycle_total);
    }
    if(m_Schedule_cycle_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_mean"))] = ModelBase::toJson(m_Schedule_cycle_mean);
    }
    if(m_Schedule_cycle_mean_depthIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))] = ModelBase::toJson(m_Schedule_cycle_mean_depth);
    }
    if(m_Schedule_cycle_per_minuteIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_per_minute"))] = ModelBase::toJson(m_Schedule_cycle_per_minute);
    }
    if(m_Schedule_queue_lengthIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_queue_length"))] = ModelBase::toJson(m_Schedule_queue_length);
    }
    if(m_Schedule_exitIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_exit"))] = ModelBase::toJson(m_Schedule_exit);
    }
    if(m_Jobs_submittedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_submitted"))] = ModelBase::toJson(m_Jobs_submitted);
    }
    if(m_Jobs_startedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_started"))] = ModelBase::toJson(m_Jobs_started);
    }
    if(m_Jobs_completedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_completed"))] = ModelBase::toJson(m_Jobs_completed);
    }
    if(m_Jobs_canceledIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_canceled"))] = ModelBase::toJson(m_Jobs_canceled);
    }
    if(m_Jobs_failedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_failed"))] = ModelBase::toJson(m_Jobs_failed);
    }
    if(m_Jobs_pendingIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_pending"))] = ModelBase::toJson(m_Jobs_pending);
    }
    if(m_Jobs_runningIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_running"))] = ModelBase::toJson(m_Jobs_running);
    }
    if(m_Job_states_tsIsSet)
    {
        val[utility::conversions::to_string_t(U("job_states_ts"))] = ModelBase::toJson(m_Job_states_ts);
    }
    if(m_Bf_backfilled_jobsIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_backfilled_jobs"))] = ModelBase::toJson(m_Bf_backfilled_jobs);
    }
    if(m_Bf_last_backfilled_jobsIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))] = ModelBase::toJson(m_Bf_last_backfilled_jobs);
    }
    if(m_Bf_backfilled_het_jobsIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))] = ModelBase::toJson(m_Bf_backfilled_het_jobs);
    }
    if(m_Bf_cycle_counterIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_counter"))] = ModelBase::toJson(m_Bf_cycle_counter);
    }
    if(m_Bf_cycle_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_mean"))] = ModelBase::toJson(m_Bf_cycle_mean);
    }
    if(m_Bf_depth_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_depth_mean"))] = ModelBase::toJson(m_Bf_depth_mean);
    }
    if(m_Bf_depth_mean_tryIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_depth_mean_try"))] = ModelBase::toJson(m_Bf_depth_mean_try);
    }
    if(m_Bf_cycle_sumIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_sum"))] = ModelBase::toJson(m_Bf_cycle_sum);
    }
    if(m_Bf_cycle_lastIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_last"))] = ModelBase::toJson(m_Bf_cycle_last);
    }
    if(m_Bf_last_depthIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_last_depth"))] = ModelBase::toJson(m_Bf_last_depth);
    }
    if(m_Bf_last_depth_tryIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_last_depth_try"))] = ModelBase::toJson(m_Bf_last_depth_try);
    }
    if(m_Bf_depth_sumIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_depth_sum"))] = ModelBase::toJson(m_Bf_depth_sum);
    }
    if(m_Bf_depth_try_sumIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_depth_try_sum"))] = ModelBase::toJson(m_Bf_depth_try_sum);
    }
    if(m_Bf_queue_lenIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_queue_len"))] = ModelBase::toJson(m_Bf_queue_len);
    }
    if(m_Bf_queue_len_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_queue_len_mean"))] = ModelBase::toJson(m_Bf_queue_len_mean);
    }
    if(m_Bf_queue_len_sumIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_queue_len_sum"))] = ModelBase::toJson(m_Bf_queue_len_sum);
    }
    if(m_Bf_table_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_table_size"))] = ModelBase::toJson(m_Bf_table_size);
    }
    if(m_Bf_table_size_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_table_size_mean"))] = ModelBase::toJson(m_Bf_table_size_mean);
    }
    if(m_Bf_when_last_cycleIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_when_last_cycle"))] = ModelBase::toJson(m_Bf_when_last_cycle);
    }
    if(m_Bf_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_active"))] = ModelBase::toJson(m_Bf_active);
    }
    if(m_Bf_exitIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_exit"))] = ModelBase::toJson(m_Bf_exit);
    }
    if(m_Rpcs_by_message_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("rpcs_by_message_type"))] = ModelBase::toJson(m_Rpcs_by_message_type);
    }
    if(m_Rpcs_by_userIsSet)
    {
        val[utility::conversions::to_string_t(U("rpcs_by_user"))] = ModelBase::toJson(m_Rpcs_by_user);
    }

    return val;
}

bool V0_0_40_stats_msg::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("parts_packed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parts_packed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPartsPacked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartsPacked);
            setPartsPacked(refVal_setPartsPacked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("req_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("req_time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_uint64_no_val> refVal_setReqTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReqTime);
            setReqTime(refVal_setReqTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("req_time_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("req_time_start")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_uint64_no_val> refVal_setReqTimeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReqTimeStart);
            setReqTimeStart(refVal_setReqTimeStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("server_thread_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("server_thread_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setServerThreadCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerThreadCount);
            setServerThreadCount(refVal_setServerThreadCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agent_queue_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent_queue_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgentQueueSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentQueueSize);
            setAgentQueueSize(refVal_setAgentQueueSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agent_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgentCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentCount);
            setAgentCount(refVal_setAgentCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agent_thread_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent_thread_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgentThreadCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentThreadCount);
            setAgentThreadCount(refVal_setAgentThreadCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dbd_agent_queue_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dbd_agent_queue_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDbdAgentQueueSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDbdAgentQueueSize);
            setDbdAgentQueueSize(refVal_setDbdAgentQueueSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gettimeofday_latency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gettimeofday_latency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGettimeofdayLatency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGettimeofdayLatency);
            setGettimeofdayLatency(refVal_setGettimeofdayLatency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_max"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_max")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleMax);
            setScheduleCycleMax(refVal_setScheduleCycleMax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_last"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_last")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleLast;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleLast);
            setScheduleCycleLast(refVal_setScheduleCycleLast);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleTotal);
            setScheduleCycleTotal(refVal_setScheduleCycleTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_mean")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setScheduleCycleMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleMean);
            setScheduleCycleMean(refVal_setScheduleCycleMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_mean_depth")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setScheduleCycleMeanDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleMeanDepth);
            setScheduleCycleMeanDepth(refVal_setScheduleCycleMeanDepth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_per_minute"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_per_minute")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setScheduleCyclePerMinute;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCyclePerMinute);
            setScheduleCyclePerMinute(refVal_setScheduleCyclePerMinute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_queue_length"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_queue_length")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleQueueLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleQueueLength);
            setScheduleQueueLength(refVal_setScheduleQueueLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_exit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_exit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_schedule_exit_fields> refVal_setScheduleExit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleExit);
            setScheduleExit(refVal_setScheduleExit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_submitted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_submitted")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsSubmitted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsSubmitted);
            setJobsSubmitted(refVal_setJobsSubmitted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_started"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_started")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsStarted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsStarted);
            setJobsStarted(refVal_setJobsStarted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_completed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_completed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsCompleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsCompleted);
            setJobsCompleted(refVal_setJobsCompleted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_canceled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_canceled")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsCanceled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsCanceled);
            setJobsCanceled(refVal_setJobsCanceled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_failed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_failed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsFailed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsFailed);
            setJobsFailed(refVal_setJobsFailed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_pending"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_pending")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsPending;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsPending);
            setJobsPending(refVal_setJobsPending);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_running"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_running")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsRunning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsRunning);
            setJobsRunning(refVal_setJobsRunning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_states_ts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_states_ts")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_uint64_no_val> refVal_setJobStatesTs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobStatesTs);
            setJobStatesTs(refVal_setJobStatesTs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_backfilled_jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_backfilled_jobs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfBackfilledJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfBackfilledJobs);
            setBfBackfilledJobs(refVal_setBfBackfilledJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_last_backfilled_jobs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfLastBackfilledJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfLastBackfilledJobs);
            setBfLastBackfilledJobs(refVal_setBfLastBackfilledJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_backfilled_het_jobs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfBackfilledHetJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfBackfilledHetJobs);
            setBfBackfilledHetJobs(refVal_setBfBackfilledHetJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_counter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_counter")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfCycleCounter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleCounter);
            setBfCycleCounter(refVal_setBfCycleCounter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_mean")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBfCycleMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleMean);
            setBfCycleMean(refVal_setBfCycleMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_depth_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_depth_mean")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBfDepthMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfDepthMean);
            setBfDepthMean(refVal_setBfDepthMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_depth_mean_try"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_depth_mean_try")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBfDepthMeanTry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfDepthMeanTry);
            setBfDepthMeanTry(refVal_setBfDepthMeanTry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_sum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_sum")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBfCycleSum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleSum);
            setBfCycleSum(refVal_setBfCycleSum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_last"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_last")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfCycleLast;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleLast);
            setBfCycleLast(refVal_setBfCycleLast);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_last_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_last_depth")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfLastDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfLastDepth);
            setBfLastDepth(refVal_setBfLastDepth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_last_depth_try"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_last_depth_try")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfLastDepthTry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfLastDepthTry);
            setBfLastDepthTry(refVal_setBfLastDepthTry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_depth_sum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_depth_sum")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfDepthSum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfDepthSum);
            setBfDepthSum(refVal_setBfDepthSum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_depth_try_sum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_depth_try_sum")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfDepthTrySum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfDepthTrySum);
            setBfDepthTrySum(refVal_setBfDepthTrySum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_queue_len"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_queue_len")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfQueueLen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfQueueLen);
            setBfQueueLen(refVal_setBfQueueLen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_queue_len_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_queue_len_mean")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBfQueueLenMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfQueueLenMean);
            setBfQueueLenMean(refVal_setBfQueueLenMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_queue_len_sum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_queue_len_sum")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfQueueLenSum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfQueueLenSum);
            setBfQueueLenSum(refVal_setBfQueueLenSum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_table_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_table_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfTableSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfTableSize);
            setBfTableSize(refVal_setBfTableSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_table_size_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_table_size_mean")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBfTableSizeMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfTableSizeMean);
            setBfTableSizeMean(refVal_setBfTableSizeMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_when_last_cycle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_when_last_cycle")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_uint64_no_val> refVal_setBfWhenLastCycle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfWhenLastCycle);
            setBfWhenLastCycle(refVal_setBfWhenLastCycle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBfActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfActive);
            setBfActive(refVal_setBfActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_exit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_exit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_bf_exit_fields> refVal_setBfExit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfExit);
            setBfExit(refVal_setBfExit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rpcs_by_message_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rpcs_by_message_type")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_type_inner>> refVal_setRpcsByMessageType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRpcsByMessageType);
            setRpcsByMessageType(refVal_setRpcsByMessageType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rpcs_by_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rpcs_by_user")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_user_inner>> refVal_setRpcsByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRpcsByUser);
            setRpcsByUser(refVal_setRpcsByUser);
        }
    }
    return ok;
}

void V0_0_40_stats_msg::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Parts_packedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parts_packed")), m_Parts_packed));
    }
    if(m_Req_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("req_time")), m_Req_time));
    }
    if(m_Req_time_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("req_time_start")), m_Req_time_start));
    }
    if(m_Server_thread_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("server_thread_count")), m_Server_thread_count));
    }
    if(m_Agent_queue_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent_queue_size")), m_Agent_queue_size));
    }
    if(m_Agent_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent_count")), m_Agent_count));
    }
    if(m_Agent_thread_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent_thread_count")), m_Agent_thread_count));
    }
    if(m_Dbd_agent_queue_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dbd_agent_queue_size")), m_Dbd_agent_queue_size));
    }
    if(m_Gettimeofday_latencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gettimeofday_latency")), m_Gettimeofday_latency));
    }
    if(m_Schedule_cycle_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_max")), m_Schedule_cycle_max));
    }
    if(m_Schedule_cycle_lastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_last")), m_Schedule_cycle_last));
    }
    if(m_Schedule_cycle_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_total")), m_Schedule_cycle_total));
    }
    if(m_Schedule_cycle_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_mean")), m_Schedule_cycle_mean));
    }
    if(m_Schedule_cycle_mean_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_mean_depth")), m_Schedule_cycle_mean_depth));
    }
    if(m_Schedule_cycle_per_minuteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_per_minute")), m_Schedule_cycle_per_minute));
    }
    if(m_Schedule_queue_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_queue_length")), m_Schedule_queue_length));
    }
    if(m_Schedule_exitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_exit")), m_Schedule_exit));
    }
    if(m_Jobs_submittedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_submitted")), m_Jobs_submitted));
    }
    if(m_Jobs_startedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_started")), m_Jobs_started));
    }
    if(m_Jobs_completedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_completed")), m_Jobs_completed));
    }
    if(m_Jobs_canceledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_canceled")), m_Jobs_canceled));
    }
    if(m_Jobs_failedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_failed")), m_Jobs_failed));
    }
    if(m_Jobs_pendingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_pending")), m_Jobs_pending));
    }
    if(m_Jobs_runningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_running")), m_Jobs_running));
    }
    if(m_Job_states_tsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_states_ts")), m_Job_states_ts));
    }
    if(m_Bf_backfilled_jobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_backfilled_jobs")), m_Bf_backfilled_jobs));
    }
    if(m_Bf_last_backfilled_jobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_last_backfilled_jobs")), m_Bf_last_backfilled_jobs));
    }
    if(m_Bf_backfilled_het_jobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_backfilled_het_jobs")), m_Bf_backfilled_het_jobs));
    }
    if(m_Bf_cycle_counterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_counter")), m_Bf_cycle_counter));
    }
    if(m_Bf_cycle_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_mean")), m_Bf_cycle_mean));
    }
    if(m_Bf_depth_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_depth_mean")), m_Bf_depth_mean));
    }
    if(m_Bf_depth_mean_tryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_depth_mean_try")), m_Bf_depth_mean_try));
    }
    if(m_Bf_cycle_sumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_sum")), m_Bf_cycle_sum));
    }
    if(m_Bf_cycle_lastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_last")), m_Bf_cycle_last));
    }
    if(m_Bf_last_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_last_depth")), m_Bf_last_depth));
    }
    if(m_Bf_last_depth_tryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_last_depth_try")), m_Bf_last_depth_try));
    }
    if(m_Bf_depth_sumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_depth_sum")), m_Bf_depth_sum));
    }
    if(m_Bf_depth_try_sumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_depth_try_sum")), m_Bf_depth_try_sum));
    }
    if(m_Bf_queue_lenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_queue_len")), m_Bf_queue_len));
    }
    if(m_Bf_queue_len_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_queue_len_mean")), m_Bf_queue_len_mean));
    }
    if(m_Bf_queue_len_sumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_queue_len_sum")), m_Bf_queue_len_sum));
    }
    if(m_Bf_table_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_table_size")), m_Bf_table_size));
    }
    if(m_Bf_table_size_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_table_size_mean")), m_Bf_table_size_mean));
    }
    if(m_Bf_when_last_cycleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_when_last_cycle")), m_Bf_when_last_cycle));
    }
    if(m_Bf_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_active")), m_Bf_active));
    }
    if(m_Bf_exitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_exit")), m_Bf_exit));
    }
    if(m_Rpcs_by_message_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rpcs_by_message_type")), m_Rpcs_by_message_type));
    }
    if(m_Rpcs_by_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rpcs_by_user")), m_Rpcs_by_user));
    }
}

bool V0_0_40_stats_msg::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("parts_packed"))))
    {
        int32_t refVal_setPartsPacked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parts_packed"))), refVal_setPartsPacked );
        setPartsPacked(refVal_setPartsPacked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("req_time"))))
    {
        std::shared_ptr<V0_0_40_uint64_no_val> refVal_setReqTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("req_time"))), refVal_setReqTime );
        setReqTime(refVal_setReqTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("req_time_start"))))
    {
        std::shared_ptr<V0_0_40_uint64_no_val> refVal_setReqTimeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("req_time_start"))), refVal_setReqTimeStart );
        setReqTimeStart(refVal_setReqTimeStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("server_thread_count"))))
    {
        int32_t refVal_setServerThreadCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("server_thread_count"))), refVal_setServerThreadCount );
        setServerThreadCount(refVal_setServerThreadCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agent_queue_size"))))
    {
        int32_t refVal_setAgentQueueSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent_queue_size"))), refVal_setAgentQueueSize );
        setAgentQueueSize(refVal_setAgentQueueSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agent_count"))))
    {
        int32_t refVal_setAgentCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent_count"))), refVal_setAgentCount );
        setAgentCount(refVal_setAgentCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agent_thread_count"))))
    {
        int32_t refVal_setAgentThreadCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent_thread_count"))), refVal_setAgentThreadCount );
        setAgentThreadCount(refVal_setAgentThreadCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dbd_agent_queue_size"))))
    {
        int32_t refVal_setDbdAgentQueueSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dbd_agent_queue_size"))), refVal_setDbdAgentQueueSize );
        setDbdAgentQueueSize(refVal_setDbdAgentQueueSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gettimeofday_latency"))))
    {
        int32_t refVal_setGettimeofdayLatency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gettimeofday_latency"))), refVal_setGettimeofdayLatency );
        setGettimeofdayLatency(refVal_setGettimeofdayLatency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_max"))))
    {
        int32_t refVal_setScheduleCycleMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_max"))), refVal_setScheduleCycleMax );
        setScheduleCycleMax(refVal_setScheduleCycleMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_last"))))
    {
        int32_t refVal_setScheduleCycleLast;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_last"))), refVal_setScheduleCycleLast );
        setScheduleCycleLast(refVal_setScheduleCycleLast);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_total"))))
    {
        int32_t refVal_setScheduleCycleTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_total"))), refVal_setScheduleCycleTotal );
        setScheduleCycleTotal(refVal_setScheduleCycleTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_mean"))))
    {
        int64_t refVal_setScheduleCycleMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_mean"))), refVal_setScheduleCycleMean );
        setScheduleCycleMean(refVal_setScheduleCycleMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))))
    {
        int64_t refVal_setScheduleCycleMeanDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))), refVal_setScheduleCycleMeanDepth );
        setScheduleCycleMeanDepth(refVal_setScheduleCycleMeanDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_per_minute"))))
    {
        int64_t refVal_setScheduleCyclePerMinute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_per_minute"))), refVal_setScheduleCyclePerMinute );
        setScheduleCyclePerMinute(refVal_setScheduleCyclePerMinute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_queue_length"))))
    {
        int32_t refVal_setScheduleQueueLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_queue_length"))), refVal_setScheduleQueueLength );
        setScheduleQueueLength(refVal_setScheduleQueueLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_exit"))))
    {
        std::shared_ptr<V0_0_40_schedule_exit_fields> refVal_setScheduleExit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_exit"))), refVal_setScheduleExit );
        setScheduleExit(refVal_setScheduleExit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_submitted"))))
    {
        int32_t refVal_setJobsSubmitted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_submitted"))), refVal_setJobsSubmitted );
        setJobsSubmitted(refVal_setJobsSubmitted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_started"))))
    {
        int32_t refVal_setJobsStarted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_started"))), refVal_setJobsStarted );
        setJobsStarted(refVal_setJobsStarted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_completed"))))
    {
        int32_t refVal_setJobsCompleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_completed"))), refVal_setJobsCompleted );
        setJobsCompleted(refVal_setJobsCompleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_canceled"))))
    {
        int32_t refVal_setJobsCanceled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_canceled"))), refVal_setJobsCanceled );
        setJobsCanceled(refVal_setJobsCanceled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_failed"))))
    {
        int32_t refVal_setJobsFailed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_failed"))), refVal_setJobsFailed );
        setJobsFailed(refVal_setJobsFailed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_pending"))))
    {
        int32_t refVal_setJobsPending;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_pending"))), refVal_setJobsPending );
        setJobsPending(refVal_setJobsPending);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_running"))))
    {
        int32_t refVal_setJobsRunning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_running"))), refVal_setJobsRunning );
        setJobsRunning(refVal_setJobsRunning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_states_ts"))))
    {
        std::shared_ptr<V0_0_40_uint64_no_val> refVal_setJobStatesTs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_states_ts"))), refVal_setJobStatesTs );
        setJobStatesTs(refVal_setJobStatesTs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_backfilled_jobs"))))
    {
        int32_t refVal_setBfBackfilledJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_backfilled_jobs"))), refVal_setBfBackfilledJobs );
        setBfBackfilledJobs(refVal_setBfBackfilledJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))))
    {
        int32_t refVal_setBfLastBackfilledJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))), refVal_setBfLastBackfilledJobs );
        setBfLastBackfilledJobs(refVal_setBfLastBackfilledJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))))
    {
        int32_t refVal_setBfBackfilledHetJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))), refVal_setBfBackfilledHetJobs );
        setBfBackfilledHetJobs(refVal_setBfBackfilledHetJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_counter"))))
    {
        int32_t refVal_setBfCycleCounter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_counter"))), refVal_setBfCycleCounter );
        setBfCycleCounter(refVal_setBfCycleCounter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_mean"))))
    {
        int64_t refVal_setBfCycleMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_mean"))), refVal_setBfCycleMean );
        setBfCycleMean(refVal_setBfCycleMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_depth_mean"))))
    {
        int64_t refVal_setBfDepthMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_depth_mean"))), refVal_setBfDepthMean );
        setBfDepthMean(refVal_setBfDepthMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_depth_mean_try"))))
    {
        int64_t refVal_setBfDepthMeanTry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_depth_mean_try"))), refVal_setBfDepthMeanTry );
        setBfDepthMeanTry(refVal_setBfDepthMeanTry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_sum"))))
    {
        int64_t refVal_setBfCycleSum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_sum"))), refVal_setBfCycleSum );
        setBfCycleSum(refVal_setBfCycleSum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_last"))))
    {
        int32_t refVal_setBfCycleLast;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_last"))), refVal_setBfCycleLast );
        setBfCycleLast(refVal_setBfCycleLast);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_last_depth"))))
    {
        int32_t refVal_setBfLastDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_last_depth"))), refVal_setBfLastDepth );
        setBfLastDepth(refVal_setBfLastDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_last_depth_try"))))
    {
        int32_t refVal_setBfLastDepthTry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_last_depth_try"))), refVal_setBfLastDepthTry );
        setBfLastDepthTry(refVal_setBfLastDepthTry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_depth_sum"))))
    {
        int32_t refVal_setBfDepthSum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_depth_sum"))), refVal_setBfDepthSum );
        setBfDepthSum(refVal_setBfDepthSum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_depth_try_sum"))))
    {
        int32_t refVal_setBfDepthTrySum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_depth_try_sum"))), refVal_setBfDepthTrySum );
        setBfDepthTrySum(refVal_setBfDepthTrySum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_queue_len"))))
    {
        int32_t refVal_setBfQueueLen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_queue_len"))), refVal_setBfQueueLen );
        setBfQueueLen(refVal_setBfQueueLen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_queue_len_mean"))))
    {
        int64_t refVal_setBfQueueLenMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_queue_len_mean"))), refVal_setBfQueueLenMean );
        setBfQueueLenMean(refVal_setBfQueueLenMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_queue_len_sum"))))
    {
        int32_t refVal_setBfQueueLenSum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_queue_len_sum"))), refVal_setBfQueueLenSum );
        setBfQueueLenSum(refVal_setBfQueueLenSum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_table_size"))))
    {
        int32_t refVal_setBfTableSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_table_size"))), refVal_setBfTableSize );
        setBfTableSize(refVal_setBfTableSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_table_size_mean"))))
    {
        int64_t refVal_setBfTableSizeMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_table_size_mean"))), refVal_setBfTableSizeMean );
        setBfTableSizeMean(refVal_setBfTableSizeMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_when_last_cycle"))))
    {
        std::shared_ptr<V0_0_40_uint64_no_val> refVal_setBfWhenLastCycle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_when_last_cycle"))), refVal_setBfWhenLastCycle );
        setBfWhenLastCycle(refVal_setBfWhenLastCycle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_active"))))
    {
        bool refVal_setBfActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_active"))), refVal_setBfActive );
        setBfActive(refVal_setBfActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_exit"))))
    {
        std::shared_ptr<V0_0_40_bf_exit_fields> refVal_setBfExit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_exit"))), refVal_setBfExit );
        setBfExit(refVal_setBfExit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rpcs_by_message_type"))))
    {
        std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_type_inner>> refVal_setRpcsByMessageType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rpcs_by_message_type"))), refVal_setRpcsByMessageType );
        setRpcsByMessageType(refVal_setRpcsByMessageType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rpcs_by_user"))))
    {
        std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_user_inner>> refVal_setRpcsByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rpcs_by_user"))), refVal_setRpcsByUser );
        setRpcsByUser(refVal_setRpcsByUser);
    }
    return ok;
}

int32_t V0_0_40_stats_msg::getPartsPacked() const
{
    return m_Parts_packed;
}

void V0_0_40_stats_msg::setPartsPacked(int32_t value)
{
    m_Parts_packed = value;
    m_Parts_packedIsSet = true;
}

bool V0_0_40_stats_msg::partsPackedIsSet() const
{
    return m_Parts_packedIsSet;
}

void V0_0_40_stats_msg::unsetParts_packed()
{
    m_Parts_packedIsSet = false;
}
std::shared_ptr<V0_0_40_uint64_no_val> V0_0_40_stats_msg::getReqTime() const
{
    return m_Req_time;
}

void V0_0_40_stats_msg::setReqTime(const std::shared_ptr<V0_0_40_uint64_no_val>& value)
{
    m_Req_time = value;
    m_Req_timeIsSet = true;
}

bool V0_0_40_stats_msg::reqTimeIsSet() const
{
    return m_Req_timeIsSet;
}

void V0_0_40_stats_msg::unsetReq_time()
{
    m_Req_timeIsSet = false;
}
std::shared_ptr<V0_0_40_uint64_no_val> V0_0_40_stats_msg::getReqTimeStart() const
{
    return m_Req_time_start;
}

void V0_0_40_stats_msg::setReqTimeStart(const std::shared_ptr<V0_0_40_uint64_no_val>& value)
{
    m_Req_time_start = value;
    m_Req_time_startIsSet = true;
}

bool V0_0_40_stats_msg::reqTimeStartIsSet() const
{
    return m_Req_time_startIsSet;
}

void V0_0_40_stats_msg::unsetReq_time_start()
{
    m_Req_time_startIsSet = false;
}
int32_t V0_0_40_stats_msg::getServerThreadCount() const
{
    return m_Server_thread_count;
}

void V0_0_40_stats_msg::setServerThreadCount(int32_t value)
{
    m_Server_thread_count = value;
    m_Server_thread_countIsSet = true;
}

bool V0_0_40_stats_msg::serverThreadCountIsSet() const
{
    return m_Server_thread_countIsSet;
}

void V0_0_40_stats_msg::unsetServer_thread_count()
{
    m_Server_thread_countIsSet = false;
}
int32_t V0_0_40_stats_msg::getAgentQueueSize() const
{
    return m_Agent_queue_size;
}

void V0_0_40_stats_msg::setAgentQueueSize(int32_t value)
{
    m_Agent_queue_size = value;
    m_Agent_queue_sizeIsSet = true;
}

bool V0_0_40_stats_msg::agentQueueSizeIsSet() const
{
    return m_Agent_queue_sizeIsSet;
}

void V0_0_40_stats_msg::unsetAgent_queue_size()
{
    m_Agent_queue_sizeIsSet = false;
}
int32_t V0_0_40_stats_msg::getAgentCount() const
{
    return m_Agent_count;
}

void V0_0_40_stats_msg::setAgentCount(int32_t value)
{
    m_Agent_count = value;
    m_Agent_countIsSet = true;
}

bool V0_0_40_stats_msg::agentCountIsSet() const
{
    return m_Agent_countIsSet;
}

void V0_0_40_stats_msg::unsetAgent_count()
{
    m_Agent_countIsSet = false;
}
int32_t V0_0_40_stats_msg::getAgentThreadCount() const
{
    return m_Agent_thread_count;
}

void V0_0_40_stats_msg::setAgentThreadCount(int32_t value)
{
    m_Agent_thread_count = value;
    m_Agent_thread_countIsSet = true;
}

bool V0_0_40_stats_msg::agentThreadCountIsSet() const
{
    return m_Agent_thread_countIsSet;
}

void V0_0_40_stats_msg::unsetAgent_thread_count()
{
    m_Agent_thread_countIsSet = false;
}
int32_t V0_0_40_stats_msg::getDbdAgentQueueSize() const
{
    return m_Dbd_agent_queue_size;
}

void V0_0_40_stats_msg::setDbdAgentQueueSize(int32_t value)
{
    m_Dbd_agent_queue_size = value;
    m_Dbd_agent_queue_sizeIsSet = true;
}

bool V0_0_40_stats_msg::dbdAgentQueueSizeIsSet() const
{
    return m_Dbd_agent_queue_sizeIsSet;
}

void V0_0_40_stats_msg::unsetDbd_agent_queue_size()
{
    m_Dbd_agent_queue_sizeIsSet = false;
}
int32_t V0_0_40_stats_msg::getGettimeofdayLatency() const
{
    return m_Gettimeofday_latency;
}

void V0_0_40_stats_msg::setGettimeofdayLatency(int32_t value)
{
    m_Gettimeofday_latency = value;
    m_Gettimeofday_latencyIsSet = true;
}

bool V0_0_40_stats_msg::gettimeofdayLatencyIsSet() const
{
    return m_Gettimeofday_latencyIsSet;
}

void V0_0_40_stats_msg::unsetGettimeofday_latency()
{
    m_Gettimeofday_latencyIsSet = false;
}
int32_t V0_0_40_stats_msg::getScheduleCycleMax() const
{
    return m_Schedule_cycle_max;
}

void V0_0_40_stats_msg::setScheduleCycleMax(int32_t value)
{
    m_Schedule_cycle_max = value;
    m_Schedule_cycle_maxIsSet = true;
}

bool V0_0_40_stats_msg::scheduleCycleMaxIsSet() const
{
    return m_Schedule_cycle_maxIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_cycle_max()
{
    m_Schedule_cycle_maxIsSet = false;
}
int32_t V0_0_40_stats_msg::getScheduleCycleLast() const
{
    return m_Schedule_cycle_last;
}

void V0_0_40_stats_msg::setScheduleCycleLast(int32_t value)
{
    m_Schedule_cycle_last = value;
    m_Schedule_cycle_lastIsSet = true;
}

bool V0_0_40_stats_msg::scheduleCycleLastIsSet() const
{
    return m_Schedule_cycle_lastIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_cycle_last()
{
    m_Schedule_cycle_lastIsSet = false;
}
int32_t V0_0_40_stats_msg::getScheduleCycleTotal() const
{
    return m_Schedule_cycle_total;
}

void V0_0_40_stats_msg::setScheduleCycleTotal(int32_t value)
{
    m_Schedule_cycle_total = value;
    m_Schedule_cycle_totalIsSet = true;
}

bool V0_0_40_stats_msg::scheduleCycleTotalIsSet() const
{
    return m_Schedule_cycle_totalIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_cycle_total()
{
    m_Schedule_cycle_totalIsSet = false;
}
int64_t V0_0_40_stats_msg::getScheduleCycleMean() const
{
    return m_Schedule_cycle_mean;
}

void V0_0_40_stats_msg::setScheduleCycleMean(int64_t value)
{
    m_Schedule_cycle_mean = value;
    m_Schedule_cycle_meanIsSet = true;
}

bool V0_0_40_stats_msg::scheduleCycleMeanIsSet() const
{
    return m_Schedule_cycle_meanIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_cycle_mean()
{
    m_Schedule_cycle_meanIsSet = false;
}
int64_t V0_0_40_stats_msg::getScheduleCycleMeanDepth() const
{
    return m_Schedule_cycle_mean_depth;
}

void V0_0_40_stats_msg::setScheduleCycleMeanDepth(int64_t value)
{
    m_Schedule_cycle_mean_depth = value;
    m_Schedule_cycle_mean_depthIsSet = true;
}

bool V0_0_40_stats_msg::scheduleCycleMeanDepthIsSet() const
{
    return m_Schedule_cycle_mean_depthIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_cycle_mean_depth()
{
    m_Schedule_cycle_mean_depthIsSet = false;
}
int64_t V0_0_40_stats_msg::getScheduleCyclePerMinute() const
{
    return m_Schedule_cycle_per_minute;
}

void V0_0_40_stats_msg::setScheduleCyclePerMinute(int64_t value)
{
    m_Schedule_cycle_per_minute = value;
    m_Schedule_cycle_per_minuteIsSet = true;
}

bool V0_0_40_stats_msg::scheduleCyclePerMinuteIsSet() const
{
    return m_Schedule_cycle_per_minuteIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_cycle_per_minute()
{
    m_Schedule_cycle_per_minuteIsSet = false;
}
int32_t V0_0_40_stats_msg::getScheduleQueueLength() const
{
    return m_Schedule_queue_length;
}

void V0_0_40_stats_msg::setScheduleQueueLength(int32_t value)
{
    m_Schedule_queue_length = value;
    m_Schedule_queue_lengthIsSet = true;
}

bool V0_0_40_stats_msg::scheduleQueueLengthIsSet() const
{
    return m_Schedule_queue_lengthIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_queue_length()
{
    m_Schedule_queue_lengthIsSet = false;
}
std::shared_ptr<V0_0_40_schedule_exit_fields> V0_0_40_stats_msg::getScheduleExit() const
{
    return m_Schedule_exit;
}

void V0_0_40_stats_msg::setScheduleExit(const std::shared_ptr<V0_0_40_schedule_exit_fields>& value)
{
    m_Schedule_exit = value;
    m_Schedule_exitIsSet = true;
}

bool V0_0_40_stats_msg::scheduleExitIsSet() const
{
    return m_Schedule_exitIsSet;
}

void V0_0_40_stats_msg::unsetSchedule_exit()
{
    m_Schedule_exitIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsSubmitted() const
{
    return m_Jobs_submitted;
}

void V0_0_40_stats_msg::setJobsSubmitted(int32_t value)
{
    m_Jobs_submitted = value;
    m_Jobs_submittedIsSet = true;
}

bool V0_0_40_stats_msg::jobsSubmittedIsSet() const
{
    return m_Jobs_submittedIsSet;
}

void V0_0_40_stats_msg::unsetJobs_submitted()
{
    m_Jobs_submittedIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsStarted() const
{
    return m_Jobs_started;
}

void V0_0_40_stats_msg::setJobsStarted(int32_t value)
{
    m_Jobs_started = value;
    m_Jobs_startedIsSet = true;
}

bool V0_0_40_stats_msg::jobsStartedIsSet() const
{
    return m_Jobs_startedIsSet;
}

void V0_0_40_stats_msg::unsetJobs_started()
{
    m_Jobs_startedIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsCompleted() const
{
    return m_Jobs_completed;
}

void V0_0_40_stats_msg::setJobsCompleted(int32_t value)
{
    m_Jobs_completed = value;
    m_Jobs_completedIsSet = true;
}

bool V0_0_40_stats_msg::jobsCompletedIsSet() const
{
    return m_Jobs_completedIsSet;
}

void V0_0_40_stats_msg::unsetJobs_completed()
{
    m_Jobs_completedIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsCanceled() const
{
    return m_Jobs_canceled;
}

void V0_0_40_stats_msg::setJobsCanceled(int32_t value)
{
    m_Jobs_canceled = value;
    m_Jobs_canceledIsSet = true;
}

bool V0_0_40_stats_msg::jobsCanceledIsSet() const
{
    return m_Jobs_canceledIsSet;
}

void V0_0_40_stats_msg::unsetJobs_canceled()
{
    m_Jobs_canceledIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsFailed() const
{
    return m_Jobs_failed;
}

void V0_0_40_stats_msg::setJobsFailed(int32_t value)
{
    m_Jobs_failed = value;
    m_Jobs_failedIsSet = true;
}

bool V0_0_40_stats_msg::jobsFailedIsSet() const
{
    return m_Jobs_failedIsSet;
}

void V0_0_40_stats_msg::unsetJobs_failed()
{
    m_Jobs_failedIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsPending() const
{
    return m_Jobs_pending;
}

void V0_0_40_stats_msg::setJobsPending(int32_t value)
{
    m_Jobs_pending = value;
    m_Jobs_pendingIsSet = true;
}

bool V0_0_40_stats_msg::jobsPendingIsSet() const
{
    return m_Jobs_pendingIsSet;
}

void V0_0_40_stats_msg::unsetJobs_pending()
{
    m_Jobs_pendingIsSet = false;
}
int32_t V0_0_40_stats_msg::getJobsRunning() const
{
    return m_Jobs_running;
}

void V0_0_40_stats_msg::setJobsRunning(int32_t value)
{
    m_Jobs_running = value;
    m_Jobs_runningIsSet = true;
}

bool V0_0_40_stats_msg::jobsRunningIsSet() const
{
    return m_Jobs_runningIsSet;
}

void V0_0_40_stats_msg::unsetJobs_running()
{
    m_Jobs_runningIsSet = false;
}
std::shared_ptr<V0_0_40_uint64_no_val> V0_0_40_stats_msg::getJobStatesTs() const
{
    return m_Job_states_ts;
}

void V0_0_40_stats_msg::setJobStatesTs(const std::shared_ptr<V0_0_40_uint64_no_val>& value)
{
    m_Job_states_ts = value;
    m_Job_states_tsIsSet = true;
}

bool V0_0_40_stats_msg::jobStatesTsIsSet() const
{
    return m_Job_states_tsIsSet;
}

void V0_0_40_stats_msg::unsetJob_states_ts()
{
    m_Job_states_tsIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfBackfilledJobs() const
{
    return m_Bf_backfilled_jobs;
}

void V0_0_40_stats_msg::setBfBackfilledJobs(int32_t value)
{
    m_Bf_backfilled_jobs = value;
    m_Bf_backfilled_jobsIsSet = true;
}

bool V0_0_40_stats_msg::bfBackfilledJobsIsSet() const
{
    return m_Bf_backfilled_jobsIsSet;
}

void V0_0_40_stats_msg::unsetBf_backfilled_jobs()
{
    m_Bf_backfilled_jobsIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfLastBackfilledJobs() const
{
    return m_Bf_last_backfilled_jobs;
}

void V0_0_40_stats_msg::setBfLastBackfilledJobs(int32_t value)
{
    m_Bf_last_backfilled_jobs = value;
    m_Bf_last_backfilled_jobsIsSet = true;
}

bool V0_0_40_stats_msg::bfLastBackfilledJobsIsSet() const
{
    return m_Bf_last_backfilled_jobsIsSet;
}

void V0_0_40_stats_msg::unsetBf_last_backfilled_jobs()
{
    m_Bf_last_backfilled_jobsIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfBackfilledHetJobs() const
{
    return m_Bf_backfilled_het_jobs;
}

void V0_0_40_stats_msg::setBfBackfilledHetJobs(int32_t value)
{
    m_Bf_backfilled_het_jobs = value;
    m_Bf_backfilled_het_jobsIsSet = true;
}

bool V0_0_40_stats_msg::bfBackfilledHetJobsIsSet() const
{
    return m_Bf_backfilled_het_jobsIsSet;
}

void V0_0_40_stats_msg::unsetBf_backfilled_het_jobs()
{
    m_Bf_backfilled_het_jobsIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfCycleCounter() const
{
    return m_Bf_cycle_counter;
}

void V0_0_40_stats_msg::setBfCycleCounter(int32_t value)
{
    m_Bf_cycle_counter = value;
    m_Bf_cycle_counterIsSet = true;
}

bool V0_0_40_stats_msg::bfCycleCounterIsSet() const
{
    return m_Bf_cycle_counterIsSet;
}

void V0_0_40_stats_msg::unsetBf_cycle_counter()
{
    m_Bf_cycle_counterIsSet = false;
}
int64_t V0_0_40_stats_msg::getBfCycleMean() const
{
    return m_Bf_cycle_mean;
}

void V0_0_40_stats_msg::setBfCycleMean(int64_t value)
{
    m_Bf_cycle_mean = value;
    m_Bf_cycle_meanIsSet = true;
}

bool V0_0_40_stats_msg::bfCycleMeanIsSet() const
{
    return m_Bf_cycle_meanIsSet;
}

void V0_0_40_stats_msg::unsetBf_cycle_mean()
{
    m_Bf_cycle_meanIsSet = false;
}
int64_t V0_0_40_stats_msg::getBfDepthMean() const
{
    return m_Bf_depth_mean;
}

void V0_0_40_stats_msg::setBfDepthMean(int64_t value)
{
    m_Bf_depth_mean = value;
    m_Bf_depth_meanIsSet = true;
}

bool V0_0_40_stats_msg::bfDepthMeanIsSet() const
{
    return m_Bf_depth_meanIsSet;
}

void V0_0_40_stats_msg::unsetBf_depth_mean()
{
    m_Bf_depth_meanIsSet = false;
}
int64_t V0_0_40_stats_msg::getBfDepthMeanTry() const
{
    return m_Bf_depth_mean_try;
}

void V0_0_40_stats_msg::setBfDepthMeanTry(int64_t value)
{
    m_Bf_depth_mean_try = value;
    m_Bf_depth_mean_tryIsSet = true;
}

bool V0_0_40_stats_msg::bfDepthMeanTryIsSet() const
{
    return m_Bf_depth_mean_tryIsSet;
}

void V0_0_40_stats_msg::unsetBf_depth_mean_try()
{
    m_Bf_depth_mean_tryIsSet = false;
}
int64_t V0_0_40_stats_msg::getBfCycleSum() const
{
    return m_Bf_cycle_sum;
}

void V0_0_40_stats_msg::setBfCycleSum(int64_t value)
{
    m_Bf_cycle_sum = value;
    m_Bf_cycle_sumIsSet = true;
}

bool V0_0_40_stats_msg::bfCycleSumIsSet() const
{
    return m_Bf_cycle_sumIsSet;
}

void V0_0_40_stats_msg::unsetBf_cycle_sum()
{
    m_Bf_cycle_sumIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfCycleLast() const
{
    return m_Bf_cycle_last;
}

void V0_0_40_stats_msg::setBfCycleLast(int32_t value)
{
    m_Bf_cycle_last = value;
    m_Bf_cycle_lastIsSet = true;
}

bool V0_0_40_stats_msg::bfCycleLastIsSet() const
{
    return m_Bf_cycle_lastIsSet;
}

void V0_0_40_stats_msg::unsetBf_cycle_last()
{
    m_Bf_cycle_lastIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfLastDepth() const
{
    return m_Bf_last_depth;
}

void V0_0_40_stats_msg::setBfLastDepth(int32_t value)
{
    m_Bf_last_depth = value;
    m_Bf_last_depthIsSet = true;
}

bool V0_0_40_stats_msg::bfLastDepthIsSet() const
{
    return m_Bf_last_depthIsSet;
}

void V0_0_40_stats_msg::unsetBf_last_depth()
{
    m_Bf_last_depthIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfLastDepthTry() const
{
    return m_Bf_last_depth_try;
}

void V0_0_40_stats_msg::setBfLastDepthTry(int32_t value)
{
    m_Bf_last_depth_try = value;
    m_Bf_last_depth_tryIsSet = true;
}

bool V0_0_40_stats_msg::bfLastDepthTryIsSet() const
{
    return m_Bf_last_depth_tryIsSet;
}

void V0_0_40_stats_msg::unsetBf_last_depth_try()
{
    m_Bf_last_depth_tryIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfDepthSum() const
{
    return m_Bf_depth_sum;
}

void V0_0_40_stats_msg::setBfDepthSum(int32_t value)
{
    m_Bf_depth_sum = value;
    m_Bf_depth_sumIsSet = true;
}

bool V0_0_40_stats_msg::bfDepthSumIsSet() const
{
    return m_Bf_depth_sumIsSet;
}

void V0_0_40_stats_msg::unsetBf_depth_sum()
{
    m_Bf_depth_sumIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfDepthTrySum() const
{
    return m_Bf_depth_try_sum;
}

void V0_0_40_stats_msg::setBfDepthTrySum(int32_t value)
{
    m_Bf_depth_try_sum = value;
    m_Bf_depth_try_sumIsSet = true;
}

bool V0_0_40_stats_msg::bfDepthTrySumIsSet() const
{
    return m_Bf_depth_try_sumIsSet;
}

void V0_0_40_stats_msg::unsetBf_depth_try_sum()
{
    m_Bf_depth_try_sumIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfQueueLen() const
{
    return m_Bf_queue_len;
}

void V0_0_40_stats_msg::setBfQueueLen(int32_t value)
{
    m_Bf_queue_len = value;
    m_Bf_queue_lenIsSet = true;
}

bool V0_0_40_stats_msg::bfQueueLenIsSet() const
{
    return m_Bf_queue_lenIsSet;
}

void V0_0_40_stats_msg::unsetBf_queue_len()
{
    m_Bf_queue_lenIsSet = false;
}
int64_t V0_0_40_stats_msg::getBfQueueLenMean() const
{
    return m_Bf_queue_len_mean;
}

void V0_0_40_stats_msg::setBfQueueLenMean(int64_t value)
{
    m_Bf_queue_len_mean = value;
    m_Bf_queue_len_meanIsSet = true;
}

bool V0_0_40_stats_msg::bfQueueLenMeanIsSet() const
{
    return m_Bf_queue_len_meanIsSet;
}

void V0_0_40_stats_msg::unsetBf_queue_len_mean()
{
    m_Bf_queue_len_meanIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfQueueLenSum() const
{
    return m_Bf_queue_len_sum;
}

void V0_0_40_stats_msg::setBfQueueLenSum(int32_t value)
{
    m_Bf_queue_len_sum = value;
    m_Bf_queue_len_sumIsSet = true;
}

bool V0_0_40_stats_msg::bfQueueLenSumIsSet() const
{
    return m_Bf_queue_len_sumIsSet;
}

void V0_0_40_stats_msg::unsetBf_queue_len_sum()
{
    m_Bf_queue_len_sumIsSet = false;
}
int32_t V0_0_40_stats_msg::getBfTableSize() const
{
    return m_Bf_table_size;
}

void V0_0_40_stats_msg::setBfTableSize(int32_t value)
{
    m_Bf_table_size = value;
    m_Bf_table_sizeIsSet = true;
}

bool V0_0_40_stats_msg::bfTableSizeIsSet() const
{
    return m_Bf_table_sizeIsSet;
}

void V0_0_40_stats_msg::unsetBf_table_size()
{
    m_Bf_table_sizeIsSet = false;
}
int64_t V0_0_40_stats_msg::getBfTableSizeMean() const
{
    return m_Bf_table_size_mean;
}

void V0_0_40_stats_msg::setBfTableSizeMean(int64_t value)
{
    m_Bf_table_size_mean = value;
    m_Bf_table_size_meanIsSet = true;
}

bool V0_0_40_stats_msg::bfTableSizeMeanIsSet() const
{
    return m_Bf_table_size_meanIsSet;
}

void V0_0_40_stats_msg::unsetBf_table_size_mean()
{
    m_Bf_table_size_meanIsSet = false;
}
std::shared_ptr<V0_0_40_uint64_no_val> V0_0_40_stats_msg::getBfWhenLastCycle() const
{
    return m_Bf_when_last_cycle;
}

void V0_0_40_stats_msg::setBfWhenLastCycle(const std::shared_ptr<V0_0_40_uint64_no_val>& value)
{
    m_Bf_when_last_cycle = value;
    m_Bf_when_last_cycleIsSet = true;
}

bool V0_0_40_stats_msg::bfWhenLastCycleIsSet() const
{
    return m_Bf_when_last_cycleIsSet;
}

void V0_0_40_stats_msg::unsetBf_when_last_cycle()
{
    m_Bf_when_last_cycleIsSet = false;
}
bool V0_0_40_stats_msg::isBfActive() const
{
    return m_Bf_active;
}

void V0_0_40_stats_msg::setBfActive(bool value)
{
    m_Bf_active = value;
    m_Bf_activeIsSet = true;
}

bool V0_0_40_stats_msg::bfActiveIsSet() const
{
    return m_Bf_activeIsSet;
}

void V0_0_40_stats_msg::unsetBf_active()
{
    m_Bf_activeIsSet = false;
}
std::shared_ptr<V0_0_40_bf_exit_fields> V0_0_40_stats_msg::getBfExit() const
{
    return m_Bf_exit;
}

void V0_0_40_stats_msg::setBfExit(const std::shared_ptr<V0_0_40_bf_exit_fields>& value)
{
    m_Bf_exit = value;
    m_Bf_exitIsSet = true;
}

bool V0_0_40_stats_msg::bfExitIsSet() const
{
    return m_Bf_exitIsSet;
}

void V0_0_40_stats_msg::unsetBf_exit()
{
    m_Bf_exitIsSet = false;
}
std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_type_inner>>& V0_0_40_stats_msg::getRpcsByMessageType()
{
    return m_Rpcs_by_message_type;
}

void V0_0_40_stats_msg::setRpcsByMessageType(const std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_type_inner>>& value)
{
    m_Rpcs_by_message_type = value;
    m_Rpcs_by_message_typeIsSet = true;
}

bool V0_0_40_stats_msg::rpcsByMessageTypeIsSet() const
{
    return m_Rpcs_by_message_typeIsSet;
}

void V0_0_40_stats_msg::unsetRpcs_by_message_type()
{
    m_Rpcs_by_message_typeIsSet = false;
}
std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_user_inner>>& V0_0_40_stats_msg::getRpcsByUser()
{
    return m_Rpcs_by_user;
}

void V0_0_40_stats_msg::setRpcsByUser(const std::vector<std::shared_ptr<V0_0_40_stats_msg_rpcs_by_user_inner>>& value)
{
    m_Rpcs_by_user = value;
    m_Rpcs_by_userIsSet = true;
}

bool V0_0_40_stats_msg::rpcsByUserIsSet() const
{
    return m_Rpcs_by_userIsSet;
}

void V0_0_40_stats_msg::unsetRpcs_by_user()
{
    m_Rpcs_by_userIsSet = false;
}
}
}
}
}


