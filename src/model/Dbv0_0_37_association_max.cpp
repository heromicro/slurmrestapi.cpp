/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_37_association_max.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_37_association_max::Dbv0_0_37_association_max()
{
    m_JobsIsSet = false;
    m_PerIsSet = false;
    m_TresIsSet = false;
}

Dbv0_0_37_association_max::~Dbv0_0_37_association_max()
{
}

void Dbv0_0_37_association_max::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_37_association_max::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_JobsIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs"))] = ModelBase::toJson(m_Jobs);
    }
    if(m_PerIsSet)
    {
        val[utility::conversions::to_string_t(U("per"))] = ModelBase::toJson(m_Per);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }

    return val;
}

bool Dbv0_0_37_association_max::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_37_association_max_jobs> refVal_setJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobs);
            setJobs(refVal_setJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("per"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("per")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_37_association_max_per> refVal_setPer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPer);
            setPer(refVal_setPer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_37_association_max_tres> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    return ok;
}

void Dbv0_0_37_association_max::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_JobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs")), m_Jobs));
    }
    if(m_PerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("per")), m_Per));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
}

bool Dbv0_0_37_association_max::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs"))))
    {
        std::shared_ptr<Dbv0_0_37_association_max_jobs> refVal_setJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs"))), refVal_setJobs );
        setJobs(refVal_setJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("per"))))
    {
        std::shared_ptr<Dbv0_0_37_association_max_per> refVal_setPer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("per"))), refVal_setPer );
        setPer(refVal_setPer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::shared_ptr<Dbv0_0_37_association_max_tres> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    return ok;
}

std::shared_ptr<Dbv0_0_37_association_max_jobs> Dbv0_0_37_association_max::getJobs() const
{
    return m_Jobs;
}

void Dbv0_0_37_association_max::setJobs(const std::shared_ptr<Dbv0_0_37_association_max_jobs>& value)
{
    m_Jobs = value;
    m_JobsIsSet = true;
}

bool Dbv0_0_37_association_max::jobsIsSet() const
{
    return m_JobsIsSet;
}

void Dbv0_0_37_association_max::unsetJobs()
{
    m_JobsIsSet = false;
}
std::shared_ptr<Dbv0_0_37_association_max_per> Dbv0_0_37_association_max::getPer() const
{
    return m_Per;
}

void Dbv0_0_37_association_max::setPer(const std::shared_ptr<Dbv0_0_37_association_max_per>& value)
{
    m_Per = value;
    m_PerIsSet = true;
}

bool Dbv0_0_37_association_max::perIsSet() const
{
    return m_PerIsSet;
}

void Dbv0_0_37_association_max::unsetPer()
{
    m_PerIsSet = false;
}
std::shared_ptr<Dbv0_0_37_association_max_tres> Dbv0_0_37_association_max::getTres() const
{
    return m_Tres;
}

void Dbv0_0_37_association_max::setTres(const std::shared_ptr<Dbv0_0_37_association_max_tres>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool Dbv0_0_37_association_max::tresIsSet() const
{
    return m_TresIsSet;
}

void Dbv0_0_37_association_max::unsetTres()
{
    m_TresIsSet = false;
}
}
}
}
}


