/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_39_config_info.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_39_config_info::Dbv0_0_39_config_info()
{
    m_MetaIsSet = false;
    m_ErrorsIsSet = false;
    m_WarningsIsSet = false;
    m_TresIsSet = false;
    m_AccountsIsSet = false;
    m_AssociationsIsSet = false;
    m_UsersIsSet = false;
    m_QosIsSet = false;
    m_WckeysIsSet = false;
    m_ClustersIsSet = false;
}

Dbv0_0_39_config_info::~Dbv0_0_39_config_info()
{
}

void Dbv0_0_39_config_info::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_39_config_info::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MetaIsSet)
    {
        val[utility::conversions::to_string_t(U("meta"))] = ModelBase::toJson(m_Meta);
    }
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("errors"))] = ModelBase::toJson(m_Errors);
    }
    if(m_WarningsIsSet)
    {
        val[utility::conversions::to_string_t(U("warnings"))] = ModelBase::toJson(m_Warnings);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }
    if(m_AccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("accounts"))] = ModelBase::toJson(m_Accounts);
    }
    if(m_AssociationsIsSet)
    {
        val[utility::conversions::to_string_t(U("associations"))] = ModelBase::toJson(m_Associations);
    }
    if(m_UsersIsSet)
    {
        val[utility::conversions::to_string_t(U("users"))] = ModelBase::toJson(m_Users);
    }
    if(m_QosIsSet)
    {
        val[utility::conversions::to_string_t(U("qos"))] = ModelBase::toJson(m_Qos);
    }
    if(m_WckeysIsSet)
    {
        val[utility::conversions::to_string_t(U("wckeys"))] = ModelBase::toJson(m_Wckeys);
    }
    if(m_ClustersIsSet)
    {
        val[utility::conversions::to_string_t(U("clusters"))] = ModelBase::toJson(m_Clusters);
    }

    return val;
}

bool Dbv0_0_39_config_info::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("meta"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("meta")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_39_meta> refVal_setMeta;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMeta);
            setMeta(refVal_setMeta);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("errors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errors")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_39_error>> refVal_setErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrors);
            setErrors(refVal_setErrors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("warnings"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("warnings")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_39_warning>> refVal_setWarnings;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWarnings);
            setWarnings(refVal_setWarnings);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_account>> refVal_setAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccounts);
            setAccounts(refVal_setAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("associations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("associations")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_assoc>> refVal_setAssociations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociations);
            setAssociations(refVal_setAssociations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("users")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_user>> refVal_setUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsers);
            setUsers(refVal_setUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qos")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_qos>> refVal_setQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQos);
            setQos(refVal_setQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckeys"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckeys")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_wckey>> refVal_setWckeys;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckeys);
            setWckeys(refVal_setWckeys);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("clusters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clusters")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_cluster_rec>> refVal_setClusters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusters);
            setClusters(refVal_setClusters);
        }
    }
    return ok;
}

void Dbv0_0_39_config_info::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MetaIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("meta")), m_Meta));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errors")), m_Errors));
    }
    if(m_WarningsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("warnings")), m_Warnings));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
    if(m_AccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accounts")), m_Accounts));
    }
    if(m_AssociationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("associations")), m_Associations));
    }
    if(m_UsersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("users")), m_Users));
    }
    if(m_QosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qos")), m_Qos));
    }
    if(m_WckeysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckeys")), m_Wckeys));
    }
    if(m_ClustersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clusters")), m_Clusters));
    }
}

bool Dbv0_0_39_config_info::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("meta"))))
    {
        std::shared_ptr<Dbv0_0_39_meta> refVal_setMeta;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("meta"))), refVal_setMeta );
        setMeta(refVal_setMeta);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("errors"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_39_error>> refVal_setErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errors"))), refVal_setErrors );
        setErrors(refVal_setErrors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("warnings"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_39_warning>> refVal_setWarnings;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("warnings"))), refVal_setWarnings );
        setWarnings(refVal_setWarnings);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accounts"))))
    {
        std::vector<std::shared_ptr<V0_0_39_account>> refVal_setAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accounts"))), refVal_setAccounts );
        setAccounts(refVal_setAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("associations"))))
    {
        std::vector<std::shared_ptr<V0_0_39_assoc>> refVal_setAssociations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("associations"))), refVal_setAssociations );
        setAssociations(refVal_setAssociations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("users"))))
    {
        std::vector<std::shared_ptr<V0_0_39_user>> refVal_setUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("users"))), refVal_setUsers );
        setUsers(refVal_setUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qos"))))
    {
        std::vector<std::shared_ptr<V0_0_39_qos>> refVal_setQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qos"))), refVal_setQos );
        setQos(refVal_setQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckeys"))))
    {
        std::vector<std::shared_ptr<V0_0_39_wckey>> refVal_setWckeys;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckeys"))), refVal_setWckeys );
        setWckeys(refVal_setWckeys);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("clusters"))))
    {
        std::vector<std::shared_ptr<V0_0_39_cluster_rec>> refVal_setClusters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clusters"))), refVal_setClusters );
        setClusters(refVal_setClusters);
    }
    return ok;
}

std::shared_ptr<Dbv0_0_39_meta> Dbv0_0_39_config_info::getMeta() const
{
    return m_Meta;
}

void Dbv0_0_39_config_info::setMeta(const std::shared_ptr<Dbv0_0_39_meta>& value)
{
    m_Meta = value;
    m_MetaIsSet = true;
}

bool Dbv0_0_39_config_info::metaIsSet() const
{
    return m_MetaIsSet;
}

void Dbv0_0_39_config_info::unsetMeta()
{
    m_MetaIsSet = false;
}
std::vector<std::shared_ptr<Dbv0_0_39_error>>& Dbv0_0_39_config_info::getErrors()
{
    return m_Errors;
}

void Dbv0_0_39_config_info::setErrors(const std::vector<std::shared_ptr<Dbv0_0_39_error>>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool Dbv0_0_39_config_info::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void Dbv0_0_39_config_info::unsetErrors()
{
    m_ErrorsIsSet = false;
}
std::vector<std::shared_ptr<Dbv0_0_39_warning>>& Dbv0_0_39_config_info::getWarnings()
{
    return m_Warnings;
}

void Dbv0_0_39_config_info::setWarnings(const std::vector<std::shared_ptr<Dbv0_0_39_warning>>& value)
{
    m_Warnings = value;
    m_WarningsIsSet = true;
}

bool Dbv0_0_39_config_info::warningsIsSet() const
{
    return m_WarningsIsSet;
}

void Dbv0_0_39_config_info::unsetWarnings()
{
    m_WarningsIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_tres>>& Dbv0_0_39_config_info::getTres()
{
    return m_Tres;
}

void Dbv0_0_39_config_info::setTres(const std::vector<std::shared_ptr<V0_0_39_tres>>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool Dbv0_0_39_config_info::tresIsSet() const
{
    return m_TresIsSet;
}

void Dbv0_0_39_config_info::unsetTres()
{
    m_TresIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_account>>& Dbv0_0_39_config_info::getAccounts()
{
    return m_Accounts;
}

void Dbv0_0_39_config_info::setAccounts(const std::vector<std::shared_ptr<V0_0_39_account>>& value)
{
    m_Accounts = value;
    m_AccountsIsSet = true;
}

bool Dbv0_0_39_config_info::accountsIsSet() const
{
    return m_AccountsIsSet;
}

void Dbv0_0_39_config_info::unsetAccounts()
{
    m_AccountsIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_assoc>>& Dbv0_0_39_config_info::getAssociations()
{
    return m_Associations;
}

void Dbv0_0_39_config_info::setAssociations(const std::vector<std::shared_ptr<V0_0_39_assoc>>& value)
{
    m_Associations = value;
    m_AssociationsIsSet = true;
}

bool Dbv0_0_39_config_info::associationsIsSet() const
{
    return m_AssociationsIsSet;
}

void Dbv0_0_39_config_info::unsetAssociations()
{
    m_AssociationsIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_user>>& Dbv0_0_39_config_info::getUsers()
{
    return m_Users;
}

void Dbv0_0_39_config_info::setUsers(const std::vector<std::shared_ptr<V0_0_39_user>>& value)
{
    m_Users = value;
    m_UsersIsSet = true;
}

bool Dbv0_0_39_config_info::usersIsSet() const
{
    return m_UsersIsSet;
}

void Dbv0_0_39_config_info::unsetUsers()
{
    m_UsersIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_qos>>& Dbv0_0_39_config_info::getQos()
{
    return m_Qos;
}

void Dbv0_0_39_config_info::setQos(const std::vector<std::shared_ptr<V0_0_39_qos>>& value)
{
    m_Qos = value;
    m_QosIsSet = true;
}

bool Dbv0_0_39_config_info::qosIsSet() const
{
    return m_QosIsSet;
}

void Dbv0_0_39_config_info::unsetQos()
{
    m_QosIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_wckey>>& Dbv0_0_39_config_info::getWckeys()
{
    return m_Wckeys;
}

void Dbv0_0_39_config_info::setWckeys(const std::vector<std::shared_ptr<V0_0_39_wckey>>& value)
{
    m_Wckeys = value;
    m_WckeysIsSet = true;
}

bool Dbv0_0_39_config_info::wckeysIsSet() const
{
    return m_WckeysIsSet;
}

void Dbv0_0_39_config_info::unsetWckeys()
{
    m_WckeysIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_cluster_rec>>& Dbv0_0_39_config_info::getClusters()
{
    return m_Clusters;
}

void Dbv0_0_39_config_info::setClusters(const std::vector<std::shared_ptr<V0_0_39_cluster_rec>>& value)
{
    m_Clusters = value;
    m_ClustersIsSet = true;
}

bool Dbv0_0_39_config_info::clustersIsSet() const
{
    return m_ClustersIsSet;
}

void Dbv0_0_39_config_info::unsetClusters()
{
    m_ClustersIsSet = false;
}
}
}
}
}


