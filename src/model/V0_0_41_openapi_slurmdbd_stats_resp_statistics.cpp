/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_stats_resp_statistics.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_stats_resp_statistics::V0_0_41_openapi_slurmdbd_stats_resp_statistics()
{
    m_Time_start = 0L;
    m_Time_startIsSet = false;
    m_RollupsIsSet = false;
    m_RPCsIsSet = false;
    m_UsersIsSet = false;
}

V0_0_41_openapi_slurmdbd_stats_resp_statistics::~V0_0_41_openapi_slurmdbd_stats_resp_statistics()
{
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_stats_resp_statistics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Time_startIsSet)
    {
        val[utility::conversions::to_string_t(U("time_start"))] = ModelBase::toJson(m_Time_start);
    }
    if(m_RollupsIsSet)
    {
        val[utility::conversions::to_string_t(U("rollups"))] = ModelBase::toJson(m_Rollups);
    }
    if(m_RPCsIsSet)
    {
        val[utility::conversions::to_string_t(U("RPCs"))] = ModelBase::toJson(m_RPCs);
    }
    if(m_UsersIsSet)
    {
        val[utility::conversions::to_string_t(U("users"))] = ModelBase::toJson(m_Users);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("time_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_start")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeStart);
            setTimeStart(refVal_setTimeStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rollups"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rollups")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups> refVal_setRollups;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRollups);
            setRollups(refVal_setRollups);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("RPCs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("RPCs")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_RPCs_inner>> refVal_setRPCs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRPCs);
            setRPCs(refVal_setRPCs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("users")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_users_inner>> refVal_setUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsers);
            setUsers(refVal_setUsers);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Time_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_start")), m_Time_start));
    }
    if(m_RollupsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rollups")), m_Rollups));
    }
    if(m_RPCsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("RPCs")), m_RPCs));
    }
    if(m_UsersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("users")), m_Users));
    }
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("time_start"))))
    {
        int64_t refVal_setTimeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_start"))), refVal_setTimeStart );
        setTimeStart(refVal_setTimeStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rollups"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups> refVal_setRollups;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rollups"))), refVal_setRollups );
        setRollups(refVal_setRollups);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("RPCs"))))
    {
        std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_RPCs_inner>> refVal_setRPCs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("RPCs"))), refVal_setRPCs );
        setRPCs(refVal_setRPCs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("users"))))
    {
        std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_users_inner>> refVal_setUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("users"))), refVal_setUsers );
        setUsers(refVal_setUsers);
    }
    return ok;
}

int64_t V0_0_41_openapi_slurmdbd_stats_resp_statistics::getTimeStart() const
{
    return m_Time_start;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::setTimeStart(int64_t value)
{
    m_Time_start = value;
    m_Time_startIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics::timeStartIsSet() const
{
    return m_Time_startIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::unsetTime_start()
{
    m_Time_startIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups> V0_0_41_openapi_slurmdbd_stats_resp_statistics::getRollups() const
{
    return m_Rollups;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::setRollups(const std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups>& value)
{
    m_Rollups = value;
    m_RollupsIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics::rollupsIsSet() const
{
    return m_RollupsIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::unsetRollups()
{
    m_RollupsIsSet = false;
}
std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_RPCs_inner>>& V0_0_41_openapi_slurmdbd_stats_resp_statistics::getRPCs()
{
    return m_RPCs;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::setRPCs(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_RPCs_inner>>& value)
{
    m_RPCs = value;
    m_RPCsIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics::rPCsIsSet() const
{
    return m_RPCsIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::unsetRPCs()
{
    m_RPCsIsSet = false;
}
std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_users_inner>>& V0_0_41_openapi_slurmdbd_stats_resp_statistics::getUsers()
{
    return m_Users;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::setUsers(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_users_inner>>& value)
{
    m_Users = value;
    m_UsersIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics::usersIsSet() const
{
    return m_UsersIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics::unsetUsers()
{
    m_UsersIsSet = false;
}
}
}
}
}


