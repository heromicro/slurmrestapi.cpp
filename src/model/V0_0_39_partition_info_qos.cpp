/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_partition_info_qos.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_partition_info_qos::V0_0_39_partition_info_qos()
{
    m_Assigned = utility::conversions::to_string_t("");
    m_AssignedIsSet = false;
}

V0_0_39_partition_info_qos::~V0_0_39_partition_info_qos()
{
}

void V0_0_39_partition_info_qos::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_partition_info_qos::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AssignedIsSet)
    {
        val[utility::conversions::to_string_t(U("assigned"))] = ModelBase::toJson(m_Assigned);
    }

    return val;
}

bool V0_0_39_partition_info_qos::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("assigned"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("assigned")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAssigned;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssigned);
            setAssigned(refVal_setAssigned);
        }
    }
    return ok;
}

void V0_0_39_partition_info_qos::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AssignedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("assigned")), m_Assigned));
    }
}

bool V0_0_39_partition_info_qos::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("assigned"))))
    {
        utility::string_t refVal_setAssigned;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("assigned"))), refVal_setAssigned );
        setAssigned(refVal_setAssigned);
    }
    return ok;
}

utility::string_t V0_0_39_partition_info_qos::getAssigned() const
{
    return m_Assigned;
}

void V0_0_39_partition_info_qos::setAssigned(const utility::string_t& value)
{
    m_Assigned = value;
    m_AssignedIsSet = true;
}

bool V0_0_39_partition_info_qos::assignedIsSet() const
{
    return m_AssignedIsSet;
}

void V0_0_39_partition_info_qos::unsetAssigned()
{
    m_AssignedIsSet = false;
}
}
}
}
}


