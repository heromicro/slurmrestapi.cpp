/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_openapi_meta_slurm.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_40_openapi_meta_slurm::V0_0_40_openapi_meta_slurm()
{
    m_VersionIsSet = false;
    m_Release = utility::conversions::to_string_t("");
    m_ReleaseIsSet = false;
    m_Cluster = utility::conversions::to_string_t("");
    m_ClusterIsSet = false;
}

V0_0_40_openapi_meta_slurm::~V0_0_40_openapi_meta_slurm()
{
}

void V0_0_40_openapi_meta_slurm::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_openapi_meta_slurm::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_ReleaseIsSet)
    {
        val[utility::conversions::to_string_t(U("release"))] = ModelBase::toJson(m_Release);
    }
    if(m_ClusterIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster"))] = ModelBase::toJson(m_Cluster);
    }

    return val;
}

bool V0_0_40_openapi_meta_slurm::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_openapi_meta_slurm_version> refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("release")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRelease);
            setRelease(refVal_setRelease);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCluster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCluster);
            setCluster(refVal_setCluster);
        }
    }
    return ok;
}

void V0_0_40_openapi_meta_slurm::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_ReleaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("release")), m_Release));
    }
    if(m_ClusterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster")), m_Cluster));
    }
}

bool V0_0_40_openapi_meta_slurm::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        std::shared_ptr<V0_0_40_openapi_meta_slurm_version> refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("release"))))
    {
        utility::string_t refVal_setRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("release"))), refVal_setRelease );
        setRelease(refVal_setRelease);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster"))))
    {
        utility::string_t refVal_setCluster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster"))), refVal_setCluster );
        setCluster(refVal_setCluster);
    }
    return ok;
}

std::shared_ptr<V0_0_40_openapi_meta_slurm_version> V0_0_40_openapi_meta_slurm::getVersion() const
{
    return m_Version;
}

void V0_0_40_openapi_meta_slurm::setVersion(const std::shared_ptr<V0_0_40_openapi_meta_slurm_version>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool V0_0_40_openapi_meta_slurm::versionIsSet() const
{
    return m_VersionIsSet;
}

void V0_0_40_openapi_meta_slurm::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t V0_0_40_openapi_meta_slurm::getRelease() const
{
    return m_Release;
}

void V0_0_40_openapi_meta_slurm::setRelease(const utility::string_t& value)
{
    m_Release = value;
    m_ReleaseIsSet = true;
}

bool V0_0_40_openapi_meta_slurm::releaseIsSet() const
{
    return m_ReleaseIsSet;
}

void V0_0_40_openapi_meta_slurm::unsetRelease()
{
    m_ReleaseIsSet = false;
}
utility::string_t V0_0_40_openapi_meta_slurm::getCluster() const
{
    return m_Cluster;
}

void V0_0_40_openapi_meta_slurm::setCluster(const utility::string_t& value)
{
    m_Cluster = value;
    m_ClusterIsSet = true;
}

bool V0_0_40_openapi_meta_slurm::clusterIsSet() const
{
    return m_ClusterIsSet;
}

void V0_0_40_openapi_meta_slurm::unsetCluster()
{
    m_ClusterIsSet = false;
}
}
}
}
}


