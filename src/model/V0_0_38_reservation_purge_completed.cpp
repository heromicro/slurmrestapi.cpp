/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_38_reservation_purge_completed.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_38_reservation_purge_completed::V0_0_38_reservation_purge_completed()
{
    m_Time = 0;
    m_TimeIsSet = false;
}

V0_0_38_reservation_purge_completed::~V0_0_38_reservation_purge_completed()
{
}

void V0_0_38_reservation_purge_completed::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_38_reservation_purge_completed::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }

    return val;
}

bool V0_0_38_reservation_purge_completed::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    return ok;
}

void V0_0_38_reservation_purge_completed::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
}

bool V0_0_38_reservation_purge_completed::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        int32_t refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    return ok;
}

int32_t V0_0_38_reservation_purge_completed::getTime() const
{
    return m_Time;
}

void V0_0_38_reservation_purge_completed::setTime(int32_t value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool V0_0_38_reservation_purge_completed::timeIsSet() const
{
    return m_TimeIsSet;
}

void V0_0_38_reservation_purge_completed::unsetTime()
{
    m_TimeIsSet = false;
}
}
}
}
}


