/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_37_job_submission_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_37_job_submission_response::V0_0_37_job_submission_response()
{
    m_ErrorsIsSet = false;
    m_Job_id = 0;
    m_Job_idIsSet = false;
    m_Step_id = utility::conversions::to_string_t("");
    m_Step_idIsSet = false;
    m_Job_submit_user_msg = utility::conversions::to_string_t("");
    m_Job_submit_user_msgIsSet = false;
}

V0_0_37_job_submission_response::~V0_0_37_job_submission_response()
{
}

void V0_0_37_job_submission_response::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_37_job_submission_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ErrorsIsSet)
    {
        val[utility::conversions::to_string_t(U("errors"))] = ModelBase::toJson(m_Errors);
    }
    if(m_Job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("job_id"))] = ModelBase::toJson(m_Job_id);
    }
    if(m_Step_idIsSet)
    {
        val[utility::conversions::to_string_t(U("step_id"))] = ModelBase::toJson(m_Step_id);
    }
    if(m_Job_submit_user_msgIsSet)
    {
        val[utility::conversions::to_string_t(U("job_submit_user_msg"))] = ModelBase::toJson(m_Job_submit_user_msg);
    }

    return val;
}

bool V0_0_37_job_submission_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("errors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errors")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_37_error>> refVal_setErrors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrors);
            setErrors(refVal_setErrors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("step_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("step_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStepId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStepId);
            setStepId(refVal_setStepId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_submit_user_msg"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_submit_user_msg")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setJobSubmitUserMsg;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobSubmitUserMsg);
            setJobSubmitUserMsg(refVal_setJobSubmitUserMsg);
        }
    }
    return ok;
}

void V0_0_37_job_submission_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ErrorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errors")), m_Errors));
    }
    if(m_Job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_id")), m_Job_id));
    }
    if(m_Step_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("step_id")), m_Step_id));
    }
    if(m_Job_submit_user_msgIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_submit_user_msg")), m_Job_submit_user_msg));
    }
}

bool V0_0_37_job_submission_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("errors"))))
    {
        std::vector<std::shared_ptr<V0_0_37_error>> refVal_setErrors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errors"))), refVal_setErrors );
        setErrors(refVal_setErrors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_id"))))
    {
        int32_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_id"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("step_id"))))
    {
        utility::string_t refVal_setStepId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("step_id"))), refVal_setStepId );
        setStepId(refVal_setStepId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_submit_user_msg"))))
    {
        utility::string_t refVal_setJobSubmitUserMsg;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_submit_user_msg"))), refVal_setJobSubmitUserMsg );
        setJobSubmitUserMsg(refVal_setJobSubmitUserMsg);
    }
    return ok;
}

std::vector<std::shared_ptr<V0_0_37_error>>& V0_0_37_job_submission_response::getErrors()
{
    return m_Errors;
}

void V0_0_37_job_submission_response::setErrors(const std::vector<std::shared_ptr<V0_0_37_error>>& value)
{
    m_Errors = value;
    m_ErrorsIsSet = true;
}

bool V0_0_37_job_submission_response::errorsIsSet() const
{
    return m_ErrorsIsSet;
}

void V0_0_37_job_submission_response::unsetErrors()
{
    m_ErrorsIsSet = false;
}
int32_t V0_0_37_job_submission_response::getJobId() const
{
    return m_Job_id;
}

void V0_0_37_job_submission_response::setJobId(int32_t value)
{
    m_Job_id = value;
    m_Job_idIsSet = true;
}

bool V0_0_37_job_submission_response::jobIdIsSet() const
{
    return m_Job_idIsSet;
}

void V0_0_37_job_submission_response::unsetJob_id()
{
    m_Job_idIsSet = false;
}
utility::string_t V0_0_37_job_submission_response::getStepId() const
{
    return m_Step_id;
}

void V0_0_37_job_submission_response::setStepId(const utility::string_t& value)
{
    m_Step_id = value;
    m_Step_idIsSet = true;
}

bool V0_0_37_job_submission_response::stepIdIsSet() const
{
    return m_Step_idIsSet;
}

void V0_0_37_job_submission_response::unsetStep_id()
{
    m_Step_idIsSet = false;
}
utility::string_t V0_0_37_job_submission_response::getJobSubmitUserMsg() const
{
    return m_Job_submit_user_msg;
}

void V0_0_37_job_submission_response::setJobSubmitUserMsg(const utility::string_t& value)
{
    m_Job_submit_user_msg = value;
    m_Job_submit_user_msgIsSet = true;
}

bool V0_0_37_job_submission_response::jobSubmitUserMsgIsSet() const
{
    return m_Job_submit_user_msgIsSet;
}

void V0_0_37_job_submission_response::unsetJob_submit_user_msg()
{
    m_Job_submit_user_msgIsSet = false;
}
}
}
}
}


