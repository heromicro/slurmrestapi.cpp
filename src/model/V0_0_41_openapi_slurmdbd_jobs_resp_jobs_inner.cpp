/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_CommentIsSet = false;
    m_Allocation_nodes = 0;
    m_Allocation_nodesIsSet = false;
    m_arrayIsSet = false;
    m_AssociationIsSet = false;
    m_Block = utility::conversions::to_string_t("");
    m_BlockIsSet = false;
    m_Cluster = utility::conversions::to_string_t("");
    m_ClusterIsSet = false;
    m_Constraints = utility::conversions::to_string_t("");
    m_ConstraintsIsSet = false;
    m_Container = utility::conversions::to_string_t("");
    m_ContainerIsSet = false;
    m_Derived_exit_codeIsSet = false;
    m_TimeIsSet = false;
    m_Exit_codeIsSet = false;
    m_Extra = utility::conversions::to_string_t("");
    m_ExtraIsSet = false;
    m_Failed_node = utility::conversions::to_string_t("");
    m_Failed_nodeIsSet = false;
    m_FlagsIsSet = false;
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
    m_HetIsSet = false;
    m_Job_id = 0;
    m_Job_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Licenses = utility::conversions::to_string_t("");
    m_LicensesIsSet = false;
    m_McsIsSet = false;
    m_Nodes = utility::conversions::to_string_t("");
    m_NodesIsSet = false;
    m_Partition = utility::conversions::to_string_t("");
    m_PartitionIsSet = false;
    m_Hold = false;
    m_HoldIsSet = false;
    m_PriorityIsSet = false;
    m_Qos = utility::conversions::to_string_t("");
    m_QosIsSet = false;
    m_RequiredIsSet = false;
    m_Kill_request_user = utility::conversions::to_string_t("");
    m_Kill_request_userIsSet = false;
    m_ReservationIsSet = false;
    m_Script = utility::conversions::to_string_t("");
    m_ScriptIsSet = false;
    m_Stdin_expanded = utility::conversions::to_string_t("");
    m_Stdin_expandedIsSet = false;
    m_Stdout_expanded = utility::conversions::to_string_t("");
    m_Stdout_expandedIsSet = false;
    m_Stderr_expanded = utility::conversions::to_string_t("");
    m_Stderr_expandedIsSet = false;
    m_Stdout = utility::conversions::to_string_t("");
    m_StdoutIsSet = false;
    m_Stderr = utility::conversions::to_string_t("");
    m_StderrIsSet = false;
    m_Stdin = utility::conversions::to_string_t("");
    m_StdinIsSet = false;
    m_StateIsSet = false;
    m_StepsIsSet = false;
    m_Submit_line = utility::conversions::to_string_t("");
    m_Submit_lineIsSet = false;
    m_TresIsSet = false;
    m_Used_gres = utility::conversions::to_string_t("");
    m_Used_gresIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_WckeyIsSet = false;
    m_Working_directory = utility::conversions::to_string_t("");
    m_Working_directoryIsSet = false;
}

V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::~V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner()
{
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_Allocation_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("allocation_nodes"))] = ModelBase::toJson(m_Allocation_nodes);
    }
    if(m_arrayIsSet)
    {
        val[utility::conversions::to_string_t(U("array"))] = ModelBase::toJson(m_array);
    }
    if(m_AssociationIsSet)
    {
        val[utility::conversions::to_string_t(U("association"))] = ModelBase::toJson(m_Association);
    }
    if(m_BlockIsSet)
    {
        val[utility::conversions::to_string_t(U("block"))] = ModelBase::toJson(m_Block);
    }
    if(m_ClusterIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster"))] = ModelBase::toJson(m_Cluster);
    }
    if(m_ConstraintsIsSet)
    {
        val[utility::conversions::to_string_t(U("constraints"))] = ModelBase::toJson(m_Constraints);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t(U("container"))] = ModelBase::toJson(m_Container);
    }
    if(m_Derived_exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("derived_exit_code"))] = ModelBase::toJson(m_Derived_exit_code);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_Exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("exit_code"))] = ModelBase::toJson(m_Exit_code);
    }
    if(m_ExtraIsSet)
    {
        val[utility::conversions::to_string_t(U("extra"))] = ModelBase::toJson(m_Extra);
    }
    if(m_Failed_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("failed_node"))] = ModelBase::toJson(m_Failed_node);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_Group);
    }
    if(m_HetIsSet)
    {
        val[utility::conversions::to_string_t(U("het"))] = ModelBase::toJson(m_Het);
    }
    if(m_Job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("job_id"))] = ModelBase::toJson(m_Job_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_LicensesIsSet)
    {
        val[utility::conversions::to_string_t(U("licenses"))] = ModelBase::toJson(m_Licenses);
    }
    if(m_McsIsSet)
    {
        val[utility::conversions::to_string_t(U("mcs"))] = ModelBase::toJson(m_Mcs);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_PartitionIsSet)
    {
        val[utility::conversions::to_string_t(U("partition"))] = ModelBase::toJson(m_Partition);
    }
    if(m_HoldIsSet)
    {
        val[utility::conversions::to_string_t(U("hold"))] = ModelBase::toJson(m_Hold);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_QosIsSet)
    {
        val[utility::conversions::to_string_t(U("qos"))] = ModelBase::toJson(m_Qos);
    }
    if(m_RequiredIsSet)
    {
        val[utility::conversions::to_string_t(U("required"))] = ModelBase::toJson(m_Required);
    }
    if(m_Kill_request_userIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_request_user"))] = ModelBase::toJson(m_Kill_request_user);
    }
    if(m_ReservationIsSet)
    {
        val[utility::conversions::to_string_t(U("reservation"))] = ModelBase::toJson(m_Reservation);
    }
    if(m_ScriptIsSet)
    {
        val[utility::conversions::to_string_t(U("script"))] = ModelBase::toJson(m_Script);
    }
    if(m_Stdin_expandedIsSet)
    {
        val[utility::conversions::to_string_t(U("stdin_expanded"))] = ModelBase::toJson(m_Stdin_expanded);
    }
    if(m_Stdout_expandedIsSet)
    {
        val[utility::conversions::to_string_t(U("stdout_expanded"))] = ModelBase::toJson(m_Stdout_expanded);
    }
    if(m_Stderr_expandedIsSet)
    {
        val[utility::conversions::to_string_t(U("stderr_expanded"))] = ModelBase::toJson(m_Stderr_expanded);
    }
    if(m_StdoutIsSet)
    {
        val[utility::conversions::to_string_t(U("stdout"))] = ModelBase::toJson(m_Stdout);
    }
    if(m_StderrIsSet)
    {
        val[utility::conversions::to_string_t(U("stderr"))] = ModelBase::toJson(m_Stderr);
    }
    if(m_StdinIsSet)
    {
        val[utility::conversions::to_string_t(U("stdin"))] = ModelBase::toJson(m_Stdin);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }
    if(m_StepsIsSet)
    {
        val[utility::conversions::to_string_t(U("steps"))] = ModelBase::toJson(m_Steps);
    }
    if(m_Submit_lineIsSet)
    {
        val[utility::conversions::to_string_t(U("submit_line"))] = ModelBase::toJson(m_Submit_line);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }
    if(m_Used_gresIsSet)
    {
        val[utility::conversions::to_string_t(U("used_gres"))] = ModelBase::toJson(m_Used_gres);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_WckeyIsSet)
    {
        val[utility::conversions::to_string_t(U("wckey"))] = ModelBase::toJson(m_Wckey);
    }
    if(m_Working_directoryIsSet)
    {
        val[utility::conversions::to_string_t(U("working_directory"))] = ModelBase::toJson(m_Working_directory);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_comment> refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allocation_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allocation_nodes")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAllocationNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocationNodes);
            setAllocationNodes(refVal_setAllocationNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_array> refVal_setArray;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArray);
            setArray(refVal_setArray);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("association"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("association")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_association> refVal_setAssociation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociation);
            setAssociation(refVal_setAssociation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("block"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("block")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBlock);
            setBlock(refVal_setBlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCluster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCluster);
            setCluster(refVal_setCluster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constraints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constraints")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConstraints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstraints);
            setConstraints(refVal_setConstraints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainer);
            setContainer(refVal_setContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("derived_exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("derived_exit_code")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code> refVal_setDerivedExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDerivedExitCode);
            setDerivedExitCode(refVal_setDerivedExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time> refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exit_code")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_exit_code> refVal_setExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExitCode);
            setExitCode(refVal_setExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extra"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extra")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExtra;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtra);
            setExtra(refVal_setExtra);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("failed_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("failed_node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFailedNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFailedNode);
            setFailedNode(refVal_setFailedNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("het"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("het")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_het> refVal_setHet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHet);
            setHet(refVal_setHet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenses")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenses);
            setLicenses(refVal_setLicenses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcs")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_mcs> refVal_setMcs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcs);
            setMcs(refVal_setMcs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartition);
            setPartition(refVal_setPartition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hold"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hold")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHold;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHold);
            setHold(refVal_setHold);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_priority> refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qos")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQos);
            setQos(refVal_setQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_required> refVal_setRequired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequired);
            setRequired(refVal_setRequired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_request_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_request_user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKillRequestUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillRequestUser);
            setKillRequestUser(refVal_setKillRequestUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reservation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reservation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_reservation> refVal_setReservation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReservation);
            setReservation(refVal_setReservation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("script"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("script")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScript;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScript);
            setScript(refVal_setScript);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stdin_expanded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stdin_expanded")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStdinExpanded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStdinExpanded);
            setStdinExpanded(refVal_setStdinExpanded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stdout_expanded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stdout_expanded")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStdoutExpanded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStdoutExpanded);
            setStdoutExpanded(refVal_setStdoutExpanded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stderr_expanded"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stderr_expanded")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStderrExpanded;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStderrExpanded);
            setStderrExpanded(refVal_setStderrExpanded);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stdout"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stdout")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStdout;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStdout);
            setStdout(refVal_setStdout);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stderr"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stderr")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStderr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStderr);
            setStderr(refVal_setStderr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stdin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stdin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStdin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStdin);
            setStdin(refVal_setStdin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_job_state> refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("steps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("steps")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner>> refVal_setSteps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSteps);
            setSteps(refVal_setSteps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submit_line"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submit_line")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubmitLine;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmitLine);
            setSubmitLine(refVal_setSubmitLine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_tres> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("used_gres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("used_gres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUsedGres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsedGres);
            setUsedGres(refVal_setUsedGres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckey")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_wckey> refVal_setWckey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckey);
            setWckey(refVal_setWckey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("working_directory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("working_directory")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWorkingDirectory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWorkingDirectory);
            setWorkingDirectory(refVal_setWorkingDirectory);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_Allocation_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allocation_nodes")), m_Allocation_nodes));
    }
    if(m_arrayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array")), m_array));
    }
    if(m_AssociationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("association")), m_Association));
    }
    if(m_BlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("block")), m_Block));
    }
    if(m_ClusterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster")), m_Cluster));
    }
    if(m_ConstraintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constraints")), m_Constraints));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container")), m_Container));
    }
    if(m_Derived_exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("derived_exit_code")), m_Derived_exit_code));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if(m_Exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exit_code")), m_Exit_code));
    }
    if(m_ExtraIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extra")), m_Extra));
    }
    if(m_Failed_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("failed_node")), m_Failed_node));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_Group));
    }
    if(m_HetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("het")), m_Het));
    }
    if(m_Job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_id")), m_Job_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_LicensesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenses")), m_Licenses));
    }
    if(m_McsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcs")), m_Mcs));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_PartitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition")), m_Partition));
    }
    if(m_HoldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hold")), m_Hold));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_QosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qos")), m_Qos));
    }
    if(m_RequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required")), m_Required));
    }
    if(m_Kill_request_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_request_user")), m_Kill_request_user));
    }
    if(m_ReservationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reservation")), m_Reservation));
    }
    if(m_ScriptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("script")), m_Script));
    }
    if(m_Stdin_expandedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stdin_expanded")), m_Stdin_expanded));
    }
    if(m_Stdout_expandedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stdout_expanded")), m_Stdout_expanded));
    }
    if(m_Stderr_expandedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stderr_expanded")), m_Stderr_expanded));
    }
    if(m_StdoutIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stdout")), m_Stdout));
    }
    if(m_StderrIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stderr")), m_Stderr));
    }
    if(m_StdinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stdin")), m_Stdin));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
    if(m_StepsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("steps")), m_Steps));
    }
    if(m_Submit_lineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submit_line")), m_Submit_line));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
    if(m_Used_gresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("used_gres")), m_Used_gres));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_WckeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckey")), m_Wckey));
    }
    if(m_Working_directoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("working_directory")), m_Working_directory));
    }
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        std::shared_ptr<V0_0_40_job_comment> refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allocation_nodes"))))
    {
        int32_t refVal_setAllocationNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allocation_nodes"))), refVal_setAllocationNodes );
        setAllocationNodes(refVal_setAllocationNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_array> refVal_setArray;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array"))), refVal_setArray );
        setArray(refVal_setArray);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("association"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_association> refVal_setAssociation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("association"))), refVal_setAssociation );
        setAssociation(refVal_setAssociation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("block"))))
    {
        utility::string_t refVal_setBlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("block"))), refVal_setBlock );
        setBlock(refVal_setBlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster"))))
    {
        utility::string_t refVal_setCluster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster"))), refVal_setCluster );
        setCluster(refVal_setCluster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constraints"))))
    {
        utility::string_t refVal_setConstraints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constraints"))), refVal_setConstraints );
        setConstraints(refVal_setConstraints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container"))))
    {
        utility::string_t refVal_setContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container"))), refVal_setContainer );
        setContainer(refVal_setContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("derived_exit_code"))))
    {
        std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code> refVal_setDerivedExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("derived_exit_code"))), refVal_setDerivedExitCode );
        setDerivedExitCode(refVal_setDerivedExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time> refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exit_code"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_exit_code> refVal_setExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exit_code"))), refVal_setExitCode );
        setExitCode(refVal_setExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extra"))))
    {
        utility::string_t refVal_setExtra;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extra"))), refVal_setExtra );
        setExtra(refVal_setExtra);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("failed_node"))))
    {
        utility::string_t refVal_setFailedNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("failed_node"))), refVal_setFailedNode );
        setFailedNode(refVal_setFailedNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("het"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_het> refVal_setHet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("het"))), refVal_setHet );
        setHet(refVal_setHet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_id"))))
    {
        int32_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_id"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenses"))))
    {
        utility::string_t refVal_setLicenses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenses"))), refVal_setLicenses );
        setLicenses(refVal_setLicenses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcs"))))
    {
        std::shared_ptr<V0_0_40_job_mcs> refVal_setMcs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcs"))), refVal_setMcs );
        setMcs(refVal_setMcs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        utility::string_t refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition"))))
    {
        utility::string_t refVal_setPartition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition"))), refVal_setPartition );
        setPartition(refVal_setPartition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hold"))))
    {
        bool refVal_setHold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hold"))), refVal_setHold );
        setHold(refVal_setHold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_priority> refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qos"))))
    {
        utility::string_t refVal_setQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qos"))), refVal_setQos );
        setQos(refVal_setQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_required> refVal_setRequired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required"))), refVal_setRequired );
        setRequired(refVal_setRequired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_request_user"))))
    {
        utility::string_t refVal_setKillRequestUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_request_user"))), refVal_setKillRequestUser );
        setKillRequestUser(refVal_setKillRequestUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reservation"))))
    {
        std::shared_ptr<V0_0_40_job_reservation> refVal_setReservation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reservation"))), refVal_setReservation );
        setReservation(refVal_setReservation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("script"))))
    {
        utility::string_t refVal_setScript;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("script"))), refVal_setScript );
        setScript(refVal_setScript);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stdin_expanded"))))
    {
        utility::string_t refVal_setStdinExpanded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stdin_expanded"))), refVal_setStdinExpanded );
        setStdinExpanded(refVal_setStdinExpanded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stdout_expanded"))))
    {
        utility::string_t refVal_setStdoutExpanded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stdout_expanded"))), refVal_setStdoutExpanded );
        setStdoutExpanded(refVal_setStdoutExpanded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stderr_expanded"))))
    {
        utility::string_t refVal_setStderrExpanded;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stderr_expanded"))), refVal_setStderrExpanded );
        setStderrExpanded(refVal_setStderrExpanded);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stdout"))))
    {
        utility::string_t refVal_setStdout;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stdout"))), refVal_setStdout );
        setStdout(refVal_setStdout);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stderr"))))
    {
        utility::string_t refVal_setStderr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stderr"))), refVal_setStderr );
        setStderr(refVal_setStderr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stdin"))))
    {
        utility::string_t refVal_setStdin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stdin"))), refVal_setStdin );
        setStdin(refVal_setStdin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        std::shared_ptr<V0_0_40_job_state> refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("steps"))))
    {
        std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner>> refVal_setSteps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("steps"))), refVal_setSteps );
        setSteps(refVal_setSteps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submit_line"))))
    {
        utility::string_t refVal_setSubmitLine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submit_line"))), refVal_setSubmitLine );
        setSubmitLine(refVal_setSubmitLine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_tres> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("used_gres"))))
    {
        utility::string_t refVal_setUsedGres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("used_gres"))), refVal_setUsedGres );
        setUsedGres(refVal_setUsedGres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckey"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_wckey> refVal_setWckey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckey"))), refVal_setWckey );
        setWckey(refVal_setWckey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("working_directory"))))
    {
        utility::string_t refVal_setWorkingDirectory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("working_directory"))), refVal_setWorkingDirectory );
        setWorkingDirectory(refVal_setWorkingDirectory);
    }
    return ok;
}

utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getAccount() const
{
    return m_Account;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::accountIsSet() const
{
    return m_AccountIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetAccount()
{
    m_AccountIsSet = false;
}
std::shared_ptr<V0_0_40_job_comment> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getComment() const
{
    return m_Comment;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setComment(const std::shared_ptr<V0_0_40_job_comment>& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::commentIsSet() const
{
    return m_CommentIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetComment()
{
    m_CommentIsSet = false;
}
int32_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getAllocationNodes() const
{
    return m_Allocation_nodes;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setAllocationNodes(int32_t value)
{
    m_Allocation_nodes = value;
    m_Allocation_nodesIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::allocationNodesIsSet() const
{
    return m_Allocation_nodesIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetAllocation_nodes()
{
    m_Allocation_nodesIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_array> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getArray() const
{
    return m_array;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setArray(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_array>& value)
{
    m_array = value;
    m_arrayIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::arrayIsSet() const
{
    return m_arrayIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetarray()
{
    m_arrayIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_association> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getAssociation() const
{
    return m_Association;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setAssociation(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_association>& value)
{
    m_Association = value;
    m_AssociationIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::associationIsSet() const
{
    return m_AssociationIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetAssociation()
{
    m_AssociationIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getBlock() const
{
    return m_Block;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setBlock(const utility::string_t& value)
{
    m_Block = value;
    m_BlockIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::blockIsSet() const
{
    return m_BlockIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetBlock()
{
    m_BlockIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getCluster() const
{
    return m_Cluster;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setCluster(const utility::string_t& value)
{
    m_Cluster = value;
    m_ClusterIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::clusterIsSet() const
{
    return m_ClusterIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetCluster()
{
    m_ClusterIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getConstraints() const
{
    return m_Constraints;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setConstraints(const utility::string_t& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getContainer() const
{
    return m_Container;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setContainer(const utility::string_t& value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::containerIsSet() const
{
    return m_ContainerIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetContainer()
{
    m_ContainerIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getDerivedExitCode() const
{
    return m_Derived_exit_code;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setDerivedExitCode(const std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code>& value)
{
    m_Derived_exit_code = value;
    m_Derived_exit_codeIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::derivedExitCodeIsSet() const
{
    return m_Derived_exit_codeIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetDerived_exit_code()
{
    m_Derived_exit_codeIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getTime() const
{
    return m_Time;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setTime(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_time>& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::timeIsSet() const
{
    return m_TimeIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetTime()
{
    m_TimeIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_exit_code> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getExitCode() const
{
    return m_Exit_code;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setExitCode(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_exit_code>& value)
{
    m_Exit_code = value;
    m_Exit_codeIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::exitCodeIsSet() const
{
    return m_Exit_codeIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetExit_code()
{
    m_Exit_codeIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getExtra() const
{
    return m_Extra;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setExtra(const utility::string_t& value)
{
    m_Extra = value;
    m_ExtraIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::extraIsSet() const
{
    return m_ExtraIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetExtra()
{
    m_ExtraIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getFailedNode() const
{
    return m_Failed_node;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setFailedNode(const utility::string_t& value)
{
    m_Failed_node = value;
    m_Failed_nodeIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::failedNodeIsSet() const
{
    return m_Failed_nodeIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetFailed_node()
{
    m_Failed_nodeIsSet = false;
}
std::vector<utility::string_t>& V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getFlags()
{
    return m_Flags;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getGroup() const
{
    return m_Group;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setGroup(const utility::string_t& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::groupIsSet() const
{
    return m_GroupIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetGroup()
{
    m_GroupIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_het> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getHet() const
{
    return m_Het;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setHet(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_het>& value)
{
    m_Het = value;
    m_HetIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::hetIsSet() const
{
    return m_HetIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetHet()
{
    m_HetIsSet = false;
}
int32_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getJobId() const
{
    return m_Job_id;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setJobId(int32_t value)
{
    m_Job_id = value;
    m_Job_idIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::jobIdIsSet() const
{
    return m_Job_idIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetJob_id()
{
    m_Job_idIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getName() const
{
    return m_Name;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getLicenses() const
{
    return m_Licenses;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setLicenses(const utility::string_t& value)
{
    m_Licenses = value;
    m_LicensesIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::licensesIsSet() const
{
    return m_LicensesIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetLicenses()
{
    m_LicensesIsSet = false;
}
std::shared_ptr<V0_0_40_job_mcs> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getMcs() const
{
    return m_Mcs;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setMcs(const std::shared_ptr<V0_0_40_job_mcs>& value)
{
    m_Mcs = value;
    m_McsIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::mcsIsSet() const
{
    return m_McsIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetMcs()
{
    m_McsIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getNodes() const
{
    return m_Nodes;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setNodes(const utility::string_t& value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::nodesIsSet() const
{
    return m_NodesIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetNodes()
{
    m_NodesIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getPartition() const
{
    return m_Partition;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setPartition(const utility::string_t& value)
{
    m_Partition = value;
    m_PartitionIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::partitionIsSet() const
{
    return m_PartitionIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetPartition()
{
    m_PartitionIsSet = false;
}
bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::isHold() const
{
    return m_Hold;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setHold(bool value)
{
    m_Hold = value;
    m_HoldIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::holdIsSet() const
{
    return m_HoldIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetHold()
{
    m_HoldIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_priority> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getPriority() const
{
    return m_Priority;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setPriority(const std::shared_ptr<V0_0_41_job_desc_msg_priority>& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getQos() const
{
    return m_Qos;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setQos(const utility::string_t& value)
{
    m_Qos = value;
    m_QosIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::qosIsSet() const
{
    return m_QosIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetQos()
{
    m_QosIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_required> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getRequired() const
{
    return m_Required;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setRequired(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_required>& value)
{
    m_Required = value;
    m_RequiredIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::requiredIsSet() const
{
    return m_RequiredIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetRequired()
{
    m_RequiredIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getKillRequestUser() const
{
    return m_Kill_request_user;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setKillRequestUser(const utility::string_t& value)
{
    m_Kill_request_user = value;
    m_Kill_request_userIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::killRequestUserIsSet() const
{
    return m_Kill_request_userIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetKill_request_user()
{
    m_Kill_request_userIsSet = false;
}
std::shared_ptr<V0_0_40_job_reservation> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getReservation() const
{
    return m_Reservation;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setReservation(const std::shared_ptr<V0_0_40_job_reservation>& value)
{
    m_Reservation = value;
    m_ReservationIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::reservationIsSet() const
{
    return m_ReservationIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetReservation()
{
    m_ReservationIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getScript() const
{
    return m_Script;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setScript(const utility::string_t& value)
{
    m_Script = value;
    m_ScriptIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::scriptIsSet() const
{
    return m_ScriptIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetScript()
{
    m_ScriptIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdinExpanded() const
{
    return m_Stdin_expanded;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdinExpanded(const utility::string_t& value)
{
    m_Stdin_expanded = value;
    m_Stdin_expandedIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stdinExpandedIsSet() const
{
    return m_Stdin_expandedIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetStdin_expanded()
{
    m_Stdin_expandedIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdoutExpanded() const
{
    return m_Stdout_expanded;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdoutExpanded(const utility::string_t& value)
{
    m_Stdout_expanded = value;
    m_Stdout_expandedIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stdoutExpandedIsSet() const
{
    return m_Stdout_expandedIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetStdout_expanded()
{
    m_Stdout_expandedIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStderrExpanded() const
{
    return m_Stderr_expanded;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStderrExpanded(const utility::string_t& value)
{
    m_Stderr_expanded = value;
    m_Stderr_expandedIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stderrExpandedIsSet() const
{
    return m_Stderr_expandedIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetStderr_expanded()
{
    m_Stderr_expandedIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdout() const
{
    return m_Stdout;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdout(const utility::string_t& value)
{
    m_Stdout = value;
    m_StdoutIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stdoutIsSet() const
{
    return m_StdoutIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetStdout()
{
    m_StdoutIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStderr() const
{
    return m_Stderr;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStderr(const utility::string_t& value)
{
    m_Stderr = value;
    m_StderrIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stderrIsSet() const
{
    return m_StderrIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetStderr()
{
    m_StderrIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getStdin() const
{
    return m_Stdin;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setStdin(const utility::string_t& value)
{
    m_Stdin = value;
    m_StdinIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stdinIsSet() const
{
    return m_StdinIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetStdin()
{
    m_StdinIsSet = false;
}
std::shared_ptr<V0_0_40_job_state> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getState() const
{
    return m_State;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setState(const std::shared_ptr<V0_0_40_job_state>& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stateIsSet() const
{
    return m_StateIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetState()
{
    m_StateIsSet = false;
}
std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner>>& V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getSteps()
{
    return m_Steps;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setSteps(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner>>& value)
{
    m_Steps = value;
    m_StepsIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::stepsIsSet() const
{
    return m_StepsIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetSteps()
{
    m_StepsIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getSubmitLine() const
{
    return m_Submit_line;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setSubmitLine(const utility::string_t& value)
{
    m_Submit_line = value;
    m_Submit_lineIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::submitLineIsSet() const
{
    return m_Submit_lineIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetSubmit_line()
{
    m_Submit_lineIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_tres> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getTres() const
{
    return m_Tres;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setTres(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_tres>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::tresIsSet() const
{
    return m_TresIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetTres()
{
    m_TresIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getUsedGres() const
{
    return m_Used_gres;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setUsedGres(const utility::string_t& value)
{
    m_Used_gres = value;
    m_Used_gresIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::usedGresIsSet() const
{
    return m_Used_gresIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetUsed_gres()
{
    m_Used_gresIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getUser() const
{
    return m_User;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::userIsSet() const
{
    return m_UserIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetUser()
{
    m_UserIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_wckey> V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getWckey() const
{
    return m_Wckey;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setWckey(const std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_wckey>& value)
{
    m_Wckey = value;
    m_WckeyIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::wckeyIsSet() const
{
    return m_WckeyIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetWckey()
{
    m_WckeyIsSet = false;
}
utility::string_t V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::getWorkingDirectory() const
{
    return m_Working_directory;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::setWorkingDirectory(const utility::string_t& value)
{
    m_Working_directory = value;
    m_Working_directoryIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::workingDirectoryIsSet() const
{
    return m_Working_directoryIsSet;
}

void V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner::unsetWorking_directory()
{
    m_Working_directoryIsSet = false;
}
}
}
}
}


