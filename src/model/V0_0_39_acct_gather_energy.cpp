/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_acct_gather_energy.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_39_acct_gather_energy::V0_0_39_acct_gather_energy()
{
    m_Average_watts = 0;
    m_Average_wattsIsSet = false;
    m_Base_consumed_energy = 0L;
    m_Base_consumed_energyIsSet = false;
    m_Consumed_energy = 0L;
    m_Consumed_energyIsSet = false;
    m_Current_wattsIsSet = false;
    m_Previous_consumed_energy = 0L;
    m_Previous_consumed_energyIsSet = false;
    m_Last_collected = 0L;
    m_Last_collectedIsSet = false;
}

V0_0_39_acct_gather_energy::~V0_0_39_acct_gather_energy()
{
}

void V0_0_39_acct_gather_energy::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_acct_gather_energy::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Average_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("average_watts"))] = ModelBase::toJson(m_Average_watts);
    }
    if(m_Base_consumed_energyIsSet)
    {
        val[utility::conversions::to_string_t(U("base_consumed_energy"))] = ModelBase::toJson(m_Base_consumed_energy);
    }
    if(m_Consumed_energyIsSet)
    {
        val[utility::conversions::to_string_t(U("consumed_energy"))] = ModelBase::toJson(m_Consumed_energy);
    }
    if(m_Current_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("current_watts"))] = ModelBase::toJson(m_Current_watts);
    }
    if(m_Previous_consumed_energyIsSet)
    {
        val[utility::conversions::to_string_t(U("previous_consumed_energy"))] = ModelBase::toJson(m_Previous_consumed_energy);
    }
    if(m_Last_collectedIsSet)
    {
        val[utility::conversions::to_string_t(U("last_collected"))] = ModelBase::toJson(m_Last_collected);
    }

    return val;
}

bool V0_0_39_acct_gather_energy::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("average_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average_watts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAverageWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverageWatts);
            setAverageWatts(refVal_setAverageWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("base_consumed_energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("base_consumed_energy")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBaseConsumedEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBaseConsumedEnergy);
            setBaseConsumedEnergy(refVal_setBaseConsumedEnergy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumed_energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumed_energy")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setConsumedEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumedEnergy);
            setConsumedEnergy(refVal_setConsumedEnergy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_watts")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCurrentWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentWatts);
            setCurrentWatts(refVal_setCurrentWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("previous_consumed_energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("previous_consumed_energy")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPreviousConsumedEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreviousConsumedEnergy);
            setPreviousConsumedEnergy(refVal_setPreviousConsumedEnergy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_collected"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_collected")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLastCollected;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastCollected);
            setLastCollected(refVal_setLastCollected);
        }
    }
    return ok;
}

void V0_0_39_acct_gather_energy::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Average_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average_watts")), m_Average_watts));
    }
    if(m_Base_consumed_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("base_consumed_energy")), m_Base_consumed_energy));
    }
    if(m_Consumed_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumed_energy")), m_Consumed_energy));
    }
    if(m_Current_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_watts")), m_Current_watts));
    }
    if(m_Previous_consumed_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("previous_consumed_energy")), m_Previous_consumed_energy));
    }
    if(m_Last_collectedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_collected")), m_Last_collected));
    }
}

bool V0_0_39_acct_gather_energy::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("average_watts"))))
    {
        int32_t refVal_setAverageWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average_watts"))), refVal_setAverageWatts );
        setAverageWatts(refVal_setAverageWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("base_consumed_energy"))))
    {
        int64_t refVal_setBaseConsumedEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("base_consumed_energy"))), refVal_setBaseConsumedEnergy );
        setBaseConsumedEnergy(refVal_setBaseConsumedEnergy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumed_energy"))))
    {
        int64_t refVal_setConsumedEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumed_energy"))), refVal_setConsumedEnergy );
        setConsumedEnergy(refVal_setConsumedEnergy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_watts"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCurrentWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_watts"))), refVal_setCurrentWatts );
        setCurrentWatts(refVal_setCurrentWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("previous_consumed_energy"))))
    {
        int64_t refVal_setPreviousConsumedEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("previous_consumed_energy"))), refVal_setPreviousConsumedEnergy );
        setPreviousConsumedEnergy(refVal_setPreviousConsumedEnergy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_collected"))))
    {
        int64_t refVal_setLastCollected;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_collected"))), refVal_setLastCollected );
        setLastCollected(refVal_setLastCollected);
    }
    return ok;
}

int32_t V0_0_39_acct_gather_energy::getAverageWatts() const
{
    return m_Average_watts;
}

void V0_0_39_acct_gather_energy::setAverageWatts(int32_t value)
{
    m_Average_watts = value;
    m_Average_wattsIsSet = true;
}

bool V0_0_39_acct_gather_energy::averageWattsIsSet() const
{
    return m_Average_wattsIsSet;
}

void V0_0_39_acct_gather_energy::unsetAverage_watts()
{
    m_Average_wattsIsSet = false;
}
int64_t V0_0_39_acct_gather_energy::getBaseConsumedEnergy() const
{
    return m_Base_consumed_energy;
}

void V0_0_39_acct_gather_energy::setBaseConsumedEnergy(int64_t value)
{
    m_Base_consumed_energy = value;
    m_Base_consumed_energyIsSet = true;
}

bool V0_0_39_acct_gather_energy::baseConsumedEnergyIsSet() const
{
    return m_Base_consumed_energyIsSet;
}

void V0_0_39_acct_gather_energy::unsetBase_consumed_energy()
{
    m_Base_consumed_energyIsSet = false;
}
int64_t V0_0_39_acct_gather_energy::getConsumedEnergy() const
{
    return m_Consumed_energy;
}

void V0_0_39_acct_gather_energy::setConsumedEnergy(int64_t value)
{
    m_Consumed_energy = value;
    m_Consumed_energyIsSet = true;
}

bool V0_0_39_acct_gather_energy::consumedEnergyIsSet() const
{
    return m_Consumed_energyIsSet;
}

void V0_0_39_acct_gather_energy::unsetConsumed_energy()
{
    m_Consumed_energyIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_acct_gather_energy::getCurrentWatts() const
{
    return m_Current_watts;
}

void V0_0_39_acct_gather_energy::setCurrentWatts(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Current_watts = value;
    m_Current_wattsIsSet = true;
}

bool V0_0_39_acct_gather_energy::currentWattsIsSet() const
{
    return m_Current_wattsIsSet;
}

void V0_0_39_acct_gather_energy::unsetCurrent_watts()
{
    m_Current_wattsIsSet = false;
}
int64_t V0_0_39_acct_gather_energy::getPreviousConsumedEnergy() const
{
    return m_Previous_consumed_energy;
}

void V0_0_39_acct_gather_energy::setPreviousConsumedEnergy(int64_t value)
{
    m_Previous_consumed_energy = value;
    m_Previous_consumed_energyIsSet = true;
}

bool V0_0_39_acct_gather_energy::previousConsumedEnergyIsSet() const
{
    return m_Previous_consumed_energyIsSet;
}

void V0_0_39_acct_gather_energy::unsetPrevious_consumed_energy()
{
    m_Previous_consumed_energyIsSet = false;
}
int64_t V0_0_39_acct_gather_energy::getLastCollected() const
{
    return m_Last_collected;
}

void V0_0_39_acct_gather_energy::setLastCollected(int64_t value)
{
    m_Last_collected = value;
    m_Last_collectedIsSet = true;
}

bool V0_0_39_acct_gather_energy::lastCollectedIsSet() const
{
    return m_Last_collectedIsSet;
}

void V0_0_39_acct_gather_energy::unsetLast_collected()
{
    m_Last_collectedIsSet = false;
}
}
}
}
}


