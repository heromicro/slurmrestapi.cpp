/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_rollup_stats_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_rollup_stats_inner::V0_0_40_rollup_stats_inner()
{
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_Last_run = 0;
    m_Last_runIsSet = false;
    m_Max_cycle = 0L;
    m_Max_cycleIsSet = false;
    m_Total_time = 0L;
    m_Total_timeIsSet = false;
    m_Total_cycles = 0L;
    m_Total_cyclesIsSet = false;
    m_Mean_cycles = 0L;
    m_Mean_cyclesIsSet = false;
}

V0_0_40_rollup_stats_inner::~V0_0_40_rollup_stats_inner()
{
}

void V0_0_40_rollup_stats_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_rollup_stats_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_Last_runIsSet)
    {
        val[utility::conversions::to_string_t(U("last run"))] = ModelBase::toJson(m_Last_run);
    }
    if(m_Max_cycleIsSet)
    {
        val[utility::conversions::to_string_t(U("max_cycle"))] = ModelBase::toJson(m_Max_cycle);
    }
    if(m_Total_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("total_time"))] = ModelBase::toJson(m_Total_time);
    }
    if(m_Total_cyclesIsSet)
    {
        val[utility::conversions::to_string_t(U("total_cycles"))] = ModelBase::toJson(m_Total_cycles);
    }
    if(m_Mean_cyclesIsSet)
    {
        val[utility::conversions::to_string_t(U("mean_cycles"))] = ModelBase::toJson(m_Mean_cycles);
    }

    return val;
}

bool V0_0_40_rollup_stats_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last run"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last run")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLastRun;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastRun);
            setLastRun(refVal_setLastRun);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_cycle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_cycle")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMaxCycle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxCycle);
            setMaxCycle(refVal_setMaxCycle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalTime);
            setTotalTime(refVal_setTotalTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_cycles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_cycles")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalCycles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalCycles);
            setTotalCycles(refVal_setTotalCycles);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mean_cycles"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mean_cycles")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMeanCycles;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMeanCycles);
            setMeanCycles(refVal_setMeanCycles);
        }
    }
    return ok;
}

void V0_0_40_rollup_stats_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_Last_runIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last run")), m_Last_run));
    }
    if(m_Max_cycleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_cycle")), m_Max_cycle));
    }
    if(m_Total_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_time")), m_Total_time));
    }
    if(m_Total_cyclesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_cycles")), m_Total_cycles));
    }
    if(m_Mean_cyclesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mean_cycles")), m_Mean_cycles));
    }
}

bool V0_0_40_rollup_stats_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last run"))))
    {
        int32_t refVal_setLastRun;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last run"))), refVal_setLastRun );
        setLastRun(refVal_setLastRun);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_cycle"))))
    {
        int64_t refVal_setMaxCycle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_cycle"))), refVal_setMaxCycle );
        setMaxCycle(refVal_setMaxCycle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_time"))))
    {
        int64_t refVal_setTotalTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_time"))), refVal_setTotalTime );
        setTotalTime(refVal_setTotalTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_cycles"))))
    {
        int64_t refVal_setTotalCycles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_cycles"))), refVal_setTotalCycles );
        setTotalCycles(refVal_setTotalCycles);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mean_cycles"))))
    {
        int64_t refVal_setMeanCycles;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mean_cycles"))), refVal_setMeanCycles );
        setMeanCycles(refVal_setMeanCycles);
    }
    return ok;
}

utility::string_t V0_0_40_rollup_stats_inner::getType() const
{
    return m_Type;
}

void V0_0_40_rollup_stats_inner::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool V0_0_40_rollup_stats_inner::typeIsSet() const
{
    return m_TypeIsSet;
}

void V0_0_40_rollup_stats_inner::unsetType()
{
    m_TypeIsSet = false;
}
int32_t V0_0_40_rollup_stats_inner::getLastRun() const
{
    return m_Last_run;
}

void V0_0_40_rollup_stats_inner::setLastRun(int32_t value)
{
    m_Last_run = value;
    m_Last_runIsSet = true;
}

bool V0_0_40_rollup_stats_inner::lastRunIsSet() const
{
    return m_Last_runIsSet;
}

void V0_0_40_rollup_stats_inner::unsetLast_run()
{
    m_Last_runIsSet = false;
}
int64_t V0_0_40_rollup_stats_inner::getMaxCycle() const
{
    return m_Max_cycle;
}

void V0_0_40_rollup_stats_inner::setMaxCycle(int64_t value)
{
    m_Max_cycle = value;
    m_Max_cycleIsSet = true;
}

bool V0_0_40_rollup_stats_inner::maxCycleIsSet() const
{
    return m_Max_cycleIsSet;
}

void V0_0_40_rollup_stats_inner::unsetMax_cycle()
{
    m_Max_cycleIsSet = false;
}
int64_t V0_0_40_rollup_stats_inner::getTotalTime() const
{
    return m_Total_time;
}

void V0_0_40_rollup_stats_inner::setTotalTime(int64_t value)
{
    m_Total_time = value;
    m_Total_timeIsSet = true;
}

bool V0_0_40_rollup_stats_inner::totalTimeIsSet() const
{
    return m_Total_timeIsSet;
}

void V0_0_40_rollup_stats_inner::unsetTotal_time()
{
    m_Total_timeIsSet = false;
}
int64_t V0_0_40_rollup_stats_inner::getTotalCycles() const
{
    return m_Total_cycles;
}

void V0_0_40_rollup_stats_inner::setTotalCycles(int64_t value)
{
    m_Total_cycles = value;
    m_Total_cyclesIsSet = true;
}

bool V0_0_40_rollup_stats_inner::totalCyclesIsSet() const
{
    return m_Total_cyclesIsSet;
}

void V0_0_40_rollup_stats_inner::unsetTotal_cycles()
{
    m_Total_cyclesIsSet = false;
}
int64_t V0_0_40_rollup_stats_inner::getMeanCycles() const
{
    return m_Mean_cycles;
}

void V0_0_40_rollup_stats_inner::setMeanCycles(int64_t value)
{
    m_Mean_cycles = value;
    m_Mean_cyclesIsSet = true;
}

bool V0_0_40_rollup_stats_inner::meanCyclesIsSet() const
{
    return m_Mean_cyclesIsSet;
}

void V0_0_40_rollup_stats_inner::unsetMean_cycles()
{
    m_Mean_cyclesIsSet = false;
}
}
}
}
}


