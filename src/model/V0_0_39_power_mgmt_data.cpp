/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_power_mgmt_data.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_power_mgmt_data::V0_0_39_power_mgmt_data()
{
    m_Maximum_wattsIsSet = false;
    m_Current_watts = 0;
    m_Current_wattsIsSet = false;
    m_Total_energy = 0L;
    m_Total_energyIsSet = false;
    m_New_maximum_watts = 0;
    m_New_maximum_wattsIsSet = false;
    m_Peak_watts = 0;
    m_Peak_wattsIsSet = false;
    m_Lowest_watts = 0;
    m_Lowest_wattsIsSet = false;
    m_New_job_time = 0L;
    m_New_job_timeIsSet = false;
    m_State = 0;
    m_StateIsSet = false;
    m_Time_start_day = 0L;
    m_Time_start_dayIsSet = false;
}

V0_0_39_power_mgmt_data::~V0_0_39_power_mgmt_data()
{
}

void V0_0_39_power_mgmt_data::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_power_mgmt_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Maximum_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("maximum_watts"))] = ModelBase::toJson(m_Maximum_watts);
    }
    if(m_Current_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("current_watts"))] = ModelBase::toJson(m_Current_watts);
    }
    if(m_Total_energyIsSet)
    {
        val[utility::conversions::to_string_t(U("total_energy"))] = ModelBase::toJson(m_Total_energy);
    }
    if(m_New_maximum_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("new_maximum_watts"))] = ModelBase::toJson(m_New_maximum_watts);
    }
    if(m_Peak_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("peak_watts"))] = ModelBase::toJson(m_Peak_watts);
    }
    if(m_Lowest_wattsIsSet)
    {
        val[utility::conversions::to_string_t(U("lowest_watts"))] = ModelBase::toJson(m_Lowest_watts);
    }
    if(m_New_job_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("new_job_time"))] = ModelBase::toJson(m_New_job_time);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }
    if(m_Time_start_dayIsSet)
    {
        val[utility::conversions::to_string_t(U("time_start_day"))] = ModelBase::toJson(m_Time_start_day);
    }

    return val;
}

bool V0_0_39_power_mgmt_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("maximum_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maximum_watts")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMaximumWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumWatts);
            setMaximumWatts(refVal_setMaximumWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_watts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCurrentWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentWatts);
            setCurrentWatts(refVal_setCurrentWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_energy")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalEnergy);
            setTotalEnergy(refVal_setTotalEnergy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("new_maximum_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("new_maximum_watts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNewMaximumWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNewMaximumWatts);
            setNewMaximumWatts(refVal_setNewMaximumWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("peak_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("peak_watts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPeakWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPeakWatts);
            setPeakWatts(refVal_setPeakWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("lowest_watts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("lowest_watts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLowestWatts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLowestWatts);
            setLowestWatts(refVal_setLowestWatts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("new_job_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("new_job_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setNewJobTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNewJobTime);
            setNewJobTime(refVal_setNewJobTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_start_day"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_start_day")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimeStartDay;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeStartDay);
            setTimeStartDay(refVal_setTimeStartDay);
        }
    }
    return ok;
}

void V0_0_39_power_mgmt_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Maximum_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maximum_watts")), m_Maximum_watts));
    }
    if(m_Current_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_watts")), m_Current_watts));
    }
    if(m_Total_energyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_energy")), m_Total_energy));
    }
    if(m_New_maximum_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("new_maximum_watts")), m_New_maximum_watts));
    }
    if(m_Peak_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("peak_watts")), m_Peak_watts));
    }
    if(m_Lowest_wattsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("lowest_watts")), m_Lowest_watts));
    }
    if(m_New_job_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("new_job_time")), m_New_job_time));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
    if(m_Time_start_dayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_start_day")), m_Time_start_day));
    }
}

bool V0_0_39_power_mgmt_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("maximum_watts"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMaximumWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maximum_watts"))), refVal_setMaximumWatts );
        setMaximumWatts(refVal_setMaximumWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_watts"))))
    {
        int32_t refVal_setCurrentWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_watts"))), refVal_setCurrentWatts );
        setCurrentWatts(refVal_setCurrentWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_energy"))))
    {
        int64_t refVal_setTotalEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_energy"))), refVal_setTotalEnergy );
        setTotalEnergy(refVal_setTotalEnergy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("new_maximum_watts"))))
    {
        int32_t refVal_setNewMaximumWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("new_maximum_watts"))), refVal_setNewMaximumWatts );
        setNewMaximumWatts(refVal_setNewMaximumWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("peak_watts"))))
    {
        int32_t refVal_setPeakWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("peak_watts"))), refVal_setPeakWatts );
        setPeakWatts(refVal_setPeakWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("lowest_watts"))))
    {
        int32_t refVal_setLowestWatts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("lowest_watts"))), refVal_setLowestWatts );
        setLowestWatts(refVal_setLowestWatts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("new_job_time"))))
    {
        int64_t refVal_setNewJobTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("new_job_time"))), refVal_setNewJobTime );
        setNewJobTime(refVal_setNewJobTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        int32_t refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_start_day"))))
    {
        int64_t refVal_setTimeStartDay;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_start_day"))), refVal_setTimeStartDay );
        setTimeStartDay(refVal_setTimeStartDay);
    }
    return ok;
}

std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_power_mgmt_data::getMaximumWatts() const
{
    return m_Maximum_watts;
}

void V0_0_39_power_mgmt_data::setMaximumWatts(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Maximum_watts = value;
    m_Maximum_wattsIsSet = true;
}

bool V0_0_39_power_mgmt_data::maximumWattsIsSet() const
{
    return m_Maximum_wattsIsSet;
}

void V0_0_39_power_mgmt_data::unsetMaximum_watts()
{
    m_Maximum_wattsIsSet = false;
}
int32_t V0_0_39_power_mgmt_data::getCurrentWatts() const
{
    return m_Current_watts;
}

void V0_0_39_power_mgmt_data::setCurrentWatts(int32_t value)
{
    m_Current_watts = value;
    m_Current_wattsIsSet = true;
}

bool V0_0_39_power_mgmt_data::currentWattsIsSet() const
{
    return m_Current_wattsIsSet;
}

void V0_0_39_power_mgmt_data::unsetCurrent_watts()
{
    m_Current_wattsIsSet = false;
}
int64_t V0_0_39_power_mgmt_data::getTotalEnergy() const
{
    return m_Total_energy;
}

void V0_0_39_power_mgmt_data::setTotalEnergy(int64_t value)
{
    m_Total_energy = value;
    m_Total_energyIsSet = true;
}

bool V0_0_39_power_mgmt_data::totalEnergyIsSet() const
{
    return m_Total_energyIsSet;
}

void V0_0_39_power_mgmt_data::unsetTotal_energy()
{
    m_Total_energyIsSet = false;
}
int32_t V0_0_39_power_mgmt_data::getNewMaximumWatts() const
{
    return m_New_maximum_watts;
}

void V0_0_39_power_mgmt_data::setNewMaximumWatts(int32_t value)
{
    m_New_maximum_watts = value;
    m_New_maximum_wattsIsSet = true;
}

bool V0_0_39_power_mgmt_data::newMaximumWattsIsSet() const
{
    return m_New_maximum_wattsIsSet;
}

void V0_0_39_power_mgmt_data::unsetNew_maximum_watts()
{
    m_New_maximum_wattsIsSet = false;
}
int32_t V0_0_39_power_mgmt_data::getPeakWatts() const
{
    return m_Peak_watts;
}

void V0_0_39_power_mgmt_data::setPeakWatts(int32_t value)
{
    m_Peak_watts = value;
    m_Peak_wattsIsSet = true;
}

bool V0_0_39_power_mgmt_data::peakWattsIsSet() const
{
    return m_Peak_wattsIsSet;
}

void V0_0_39_power_mgmt_data::unsetPeak_watts()
{
    m_Peak_wattsIsSet = false;
}
int32_t V0_0_39_power_mgmt_data::getLowestWatts() const
{
    return m_Lowest_watts;
}

void V0_0_39_power_mgmt_data::setLowestWatts(int32_t value)
{
    m_Lowest_watts = value;
    m_Lowest_wattsIsSet = true;
}

bool V0_0_39_power_mgmt_data::lowestWattsIsSet() const
{
    return m_Lowest_wattsIsSet;
}

void V0_0_39_power_mgmt_data::unsetLowest_watts()
{
    m_Lowest_wattsIsSet = false;
}
int64_t V0_0_39_power_mgmt_data::getNewJobTime() const
{
    return m_New_job_time;
}

void V0_0_39_power_mgmt_data::setNewJobTime(int64_t value)
{
    m_New_job_time = value;
    m_New_job_timeIsSet = true;
}

bool V0_0_39_power_mgmt_data::newJobTimeIsSet() const
{
    return m_New_job_timeIsSet;
}

void V0_0_39_power_mgmt_data::unsetNew_job_time()
{
    m_New_job_timeIsSet = false;
}
int32_t V0_0_39_power_mgmt_data::getState() const
{
    return m_State;
}

void V0_0_39_power_mgmt_data::setState(int32_t value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool V0_0_39_power_mgmt_data::stateIsSet() const
{
    return m_StateIsSet;
}

void V0_0_39_power_mgmt_data::unsetState()
{
    m_StateIsSet = false;
}
int64_t V0_0_39_power_mgmt_data::getTimeStartDay() const
{
    return m_Time_start_day;
}

void V0_0_39_power_mgmt_data::setTimeStartDay(int64_t value)
{
    m_Time_start_day = value;
    m_Time_start_dayIsSet = true;
}

bool V0_0_39_power_mgmt_data::timeStartDayIsSet() const
{
    return m_Time_start_dayIsSet;
}

void V0_0_39_power_mgmt_data::unsetTime_start_day()
{
    m_Time_start_dayIsSet = false;
}
}
}
}
}


