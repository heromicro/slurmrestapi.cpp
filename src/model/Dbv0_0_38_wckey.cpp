/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_38_wckey.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_38_wckey::Dbv0_0_38_wckey()
{
    m_Cluster = utility::conversions::to_string_t("");
    m_ClusterIsSet = false;
    m_Id = 0;
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_FlagsIsSet = false;
    m_AccountingIsSet = false;
}

Dbv0_0_38_wckey::~Dbv0_0_38_wckey()
{
}

void Dbv0_0_38_wckey::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_38_wckey::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ClusterIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster"))] = ModelBase::toJson(m_Cluster);
    }
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_AccountingIsSet)
    {
        val[utility::conversions::to_string_t(U("accounting"))] = ModelBase::toJson(m_Accounting);
    }

    return val;
}

bool Dbv0_0_38_wckey::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cluster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCluster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCluster);
            setCluster(refVal_setCluster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accounting"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accounting")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_38_accounting>> refVal_setAccounting;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccounting);
            setAccounting(refVal_setAccounting);
        }
    }
    return ok;
}

void Dbv0_0_38_wckey::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ClusterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster")), m_Cluster));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_AccountingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accounting")), m_Accounting));
    }
}

bool Dbv0_0_38_wckey::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster"))))
    {
        utility::string_t refVal_setCluster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster"))), refVal_setCluster );
        setCluster(refVal_setCluster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accounting"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_38_accounting>> refVal_setAccounting;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accounting"))), refVal_setAccounting );
        setAccounting(refVal_setAccounting);
    }
    return ok;
}

utility::string_t Dbv0_0_38_wckey::getCluster() const
{
    return m_Cluster;
}

void Dbv0_0_38_wckey::setCluster(const utility::string_t& value)
{
    m_Cluster = value;
    m_ClusterIsSet = true;
}

bool Dbv0_0_38_wckey::clusterIsSet() const
{
    return m_ClusterIsSet;
}

void Dbv0_0_38_wckey::unsetCluster()
{
    m_ClusterIsSet = false;
}
int32_t Dbv0_0_38_wckey::getId() const
{
    return m_Id;
}

void Dbv0_0_38_wckey::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Dbv0_0_38_wckey::idIsSet() const
{
    return m_IdIsSet;
}

void Dbv0_0_38_wckey::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Dbv0_0_38_wckey::getName() const
{
    return m_Name;
}

void Dbv0_0_38_wckey::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Dbv0_0_38_wckey::nameIsSet() const
{
    return m_NameIsSet;
}

void Dbv0_0_38_wckey::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Dbv0_0_38_wckey::getUser() const
{
    return m_User;
}

void Dbv0_0_38_wckey::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool Dbv0_0_38_wckey::userIsSet() const
{
    return m_UserIsSet;
}

void Dbv0_0_38_wckey::unsetUser()
{
    m_UserIsSet = false;
}
std::vector<utility::string_t>& Dbv0_0_38_wckey::getFlags()
{
    return m_Flags;
}

void Dbv0_0_38_wckey::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool Dbv0_0_38_wckey::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void Dbv0_0_38_wckey::unsetFlags()
{
    m_FlagsIsSet = false;
}
std::vector<std::shared_ptr<Dbv0_0_38_accounting>>& Dbv0_0_38_wckey::getAccounting()
{
    return m_Accounting;
}

void Dbv0_0_38_wckey::setAccounting(const std::vector<std::shared_ptr<Dbv0_0_38_accounting>>& value)
{
    m_Accounting = value;
    m_AccountingIsSet = true;
}

bool Dbv0_0_38_wckey::accountingIsSet() const
{
    return m_AccountingIsSet;
}

void Dbv0_0_38_wckey::unsetAccounting()
{
    m_AccountingIsSet = false;
}
}
}
}
}


