/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_38_qos_limits.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_38_qos_limits::Dbv0_0_38_qos_limits()
{
    m_Factor = 0.0;
    m_FactorIsSet = false;
    m_MaxIsSet = false;
    m_MinIsSet = false;
}

Dbv0_0_38_qos_limits::~Dbv0_0_38_qos_limits()
{
}

void Dbv0_0_38_qos_limits::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_38_qos_limits::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FactorIsSet)
    {
        val[utility::conversions::to_string_t(U("factor"))] = ModelBase::toJson(m_Factor);
    }
    if(m_MaxIsSet)
    {
        val[utility::conversions::to_string_t(U("max"))] = ModelBase::toJson(m_Max);
    }
    if(m_MinIsSet)
    {
        val[utility::conversions::to_string_t(U("min"))] = ModelBase::toJson(m_Min);
    }

    return val;
}

bool Dbv0_0_38_qos_limits::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("factor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("factor")));
        if(!fieldValue.is_null())
        {
            double refVal_setFactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFactor);
            setFactor(refVal_setFactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_qos_limits_max> refVal_setMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMax);
            setMax(refVal_setMax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_qos_limits_min> refVal_setMin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMin);
            setMin(refVal_setMin);
        }
    }
    return ok;
}

void Dbv0_0_38_qos_limits::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("factor")), m_Factor));
    }
    if(m_MaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max")), m_Max));
    }
    if(m_MinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min")), m_Min));
    }
}

bool Dbv0_0_38_qos_limits::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("factor"))))
    {
        double refVal_setFactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("factor"))), refVal_setFactor );
        setFactor(refVal_setFactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max"))))
    {
        std::shared_ptr<Dbv0_0_38_qos_limits_max> refVal_setMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max"))), refVal_setMax );
        setMax(refVal_setMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min"))))
    {
        std::shared_ptr<Dbv0_0_38_qos_limits_min> refVal_setMin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min"))), refVal_setMin );
        setMin(refVal_setMin);
    }
    return ok;
}

double Dbv0_0_38_qos_limits::getFactor() const
{
    return m_Factor;
}

void Dbv0_0_38_qos_limits::setFactor(double value)
{
    m_Factor = value;
    m_FactorIsSet = true;
}

bool Dbv0_0_38_qos_limits::factorIsSet() const
{
    return m_FactorIsSet;
}

void Dbv0_0_38_qos_limits::unsetFactor()
{
    m_FactorIsSet = false;
}
std::shared_ptr<Dbv0_0_38_qos_limits_max> Dbv0_0_38_qos_limits::getMax() const
{
    return m_Max;
}

void Dbv0_0_38_qos_limits::setMax(const std::shared_ptr<Dbv0_0_38_qos_limits_max>& value)
{
    m_Max = value;
    m_MaxIsSet = true;
}

bool Dbv0_0_38_qos_limits::maxIsSet() const
{
    return m_MaxIsSet;
}

void Dbv0_0_38_qos_limits::unsetMax()
{
    m_MaxIsSet = false;
}
std::shared_ptr<Dbv0_0_38_qos_limits_min> Dbv0_0_38_qos_limits::getMin() const
{
    return m_Min;
}

void Dbv0_0_38_qos_limits::setMin(const std::shared_ptr<Dbv0_0_38_qos_limits_min>& value)
{
    m_Min = value;
    m_MinIsSet = true;
}

bool Dbv0_0_38_qos_limits::minIsSet() const
{
    return m_MinIsSet;
}

void Dbv0_0_38_qos_limits::unsetMin()
{
    m_MinIsSet = false;
}
}
}
}
}


