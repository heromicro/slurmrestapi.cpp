/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_38_node_allocation.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_38_node_allocation::V0_0_38_node_allocation()
{
    m_Memory = 0;
    m_MemoryIsSet = false;
    m_Cpus = 0;
    m_CpusIsSet = false;
    m_SocketsIsSet = false;
    m_Nodename = utility::conversions::to_string_t("");
    m_NodenameIsSet = false;
}

V0_0_38_node_allocation::~V0_0_38_node_allocation()
{
}

void V0_0_38_node_allocation::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_38_node_allocation::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MemoryIsSet)
    {
        val[utility::conversions::to_string_t(U("memory"))] = ModelBase::toJson(m_Memory);
    }
    if(m_CpusIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus"))] = ModelBase::toJson(m_Cpus);
    }
    if(m_SocketsIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets"))] = ModelBase::toJson(m_Sockets);
    }
    if(m_NodenameIsSet)
    {
        val[utility::conversions::to_string_t(U("nodename"))] = ModelBase::toJson(m_Nodename);
    }

    return val;
}

bool V0_0_38_node_allocation::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("memory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemory);
            setMemory(refVal_setMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpus);
            setCpus(refVal_setCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_38_node_allocation_sockets> refVal_setSockets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSockets);
            setSockets(refVal_setSockets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodename"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodename")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNodename;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodename);
            setNodename(refVal_setNodename);
        }
    }
    return ok;
}

void V0_0_38_node_allocation::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory")), m_Memory));
    }
    if(m_CpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus")), m_Cpus));
    }
    if(m_SocketsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets")), m_Sockets));
    }
    if(m_NodenameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodename")), m_Nodename));
    }
}

bool V0_0_38_node_allocation::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("memory"))))
    {
        int32_t refVal_setMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory"))), refVal_setMemory );
        setMemory(refVal_setMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus"))))
    {
        int32_t refVal_setCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus"))), refVal_setCpus );
        setCpus(refVal_setCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets"))))
    {
        std::shared_ptr<V0_0_38_node_allocation_sockets> refVal_setSockets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets"))), refVal_setSockets );
        setSockets(refVal_setSockets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodename"))))
    {
        utility::string_t refVal_setNodename;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodename"))), refVal_setNodename );
        setNodename(refVal_setNodename);
    }
    return ok;
}

int32_t V0_0_38_node_allocation::getMemory() const
{
    return m_Memory;
}

void V0_0_38_node_allocation::setMemory(int32_t value)
{
    m_Memory = value;
    m_MemoryIsSet = true;
}

bool V0_0_38_node_allocation::memoryIsSet() const
{
    return m_MemoryIsSet;
}

void V0_0_38_node_allocation::unsetMemory()
{
    m_MemoryIsSet = false;
}
int32_t V0_0_38_node_allocation::getCpus() const
{
    return m_Cpus;
}

void V0_0_38_node_allocation::setCpus(int32_t value)
{
    m_Cpus = value;
    m_CpusIsSet = true;
}

bool V0_0_38_node_allocation::cpusIsSet() const
{
    return m_CpusIsSet;
}

void V0_0_38_node_allocation::unsetCpus()
{
    m_CpusIsSet = false;
}
std::shared_ptr<V0_0_38_node_allocation_sockets> V0_0_38_node_allocation::getSockets() const
{
    return m_Sockets;
}

void V0_0_38_node_allocation::setSockets(const std::shared_ptr<V0_0_38_node_allocation_sockets>& value)
{
    m_Sockets = value;
    m_SocketsIsSet = true;
}

bool V0_0_38_node_allocation::socketsIsSet() const
{
    return m_SocketsIsSet;
}

void V0_0_38_node_allocation::unsetSockets()
{
    m_SocketsIsSet = false;
}
utility::string_t V0_0_38_node_allocation::getNodename() const
{
    return m_Nodename;
}

void V0_0_38_node_allocation::setNodename(const utility::string_t& value)
{
    m_Nodename = value;
    m_NodenameIsSet = true;
}

bool V0_0_38_node_allocation::nodenameIsSet() const
{
    return m_NodenameIsSet;
}

void V0_0_38_node_allocation::unsetNodename()
{
    m_NodenameIsSet = false;
}
}
}
}
}


