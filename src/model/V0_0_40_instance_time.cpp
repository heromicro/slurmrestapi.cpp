/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_instance_time.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_40_instance_time::V0_0_40_instance_time()
{
    m_Time_end = 0L;
    m_Time_endIsSet = false;
    m_Time_start = 0L;
    m_Time_startIsSet = false;
}

V0_0_40_instance_time::~V0_0_40_instance_time()
{
}

void V0_0_40_instance_time::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_instance_time::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Time_endIsSet)
    {
        val[utility::conversions::to_string_t(U("time_end"))] = ModelBase::toJson(m_Time_end);
    }
    if(m_Time_startIsSet)
    {
        val[utility::conversions::to_string_t(U("time_start"))] = ModelBase::toJson(m_Time_start);
    }

    return val;
}

bool V0_0_40_instance_time::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("time_end"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_end")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimeEnd;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeEnd);
            setTimeEnd(refVal_setTimeEnd);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_start")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTimeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeStart);
            setTimeStart(refVal_setTimeStart);
        }
    }
    return ok;
}

void V0_0_40_instance_time::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Time_endIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_end")), m_Time_end));
    }
    if(m_Time_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_start")), m_Time_start));
    }
}

bool V0_0_40_instance_time::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("time_end"))))
    {
        int64_t refVal_setTimeEnd;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_end"))), refVal_setTimeEnd );
        setTimeEnd(refVal_setTimeEnd);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_start"))))
    {
        int64_t refVal_setTimeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_start"))), refVal_setTimeStart );
        setTimeStart(refVal_setTimeStart);
    }
    return ok;
}

int64_t V0_0_40_instance_time::getTimeEnd() const
{
    return m_Time_end;
}

void V0_0_40_instance_time::setTimeEnd(int64_t value)
{
    m_Time_end = value;
    m_Time_endIsSet = true;
}

bool V0_0_40_instance_time::timeEndIsSet() const
{
    return m_Time_endIsSet;
}

void V0_0_40_instance_time::unsetTime_end()
{
    m_Time_endIsSet = false;
}
int64_t V0_0_40_instance_time::getTimeStart() const
{
    return m_Time_start;
}

void V0_0_40_instance_time::setTimeStart(int64_t value)
{
    m_Time_start = value;
    m_Time_startIsSet = true;
}

bool V0_0_40_instance_time::timeStartIsSet() const
{
    return m_Time_startIsSet;
}

void V0_0_40_instance_time::unsetTime_start()
{
    m_Time_startIsSet = false;
}
}
}
}
}


