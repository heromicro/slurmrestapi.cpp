/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_job_info.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_job_info::V0_0_39_job_info()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Accrue_time = 0L;
    m_Accrue_timeIsSet = false;
    m_Admin_comment = utility::conversions::to_string_t("");
    m_Admin_commentIsSet = false;
    m_Allocating_node = utility::conversions::to_string_t("");
    m_Allocating_nodeIsSet = false;
    m_Array_job_idIsSet = false;
    m_Array_task_idIsSet = false;
    m_Array_max_tasksIsSet = false;
    m_Array_task_string = utility::conversions::to_string_t("");
    m_Array_task_stringIsSet = false;
    m_Association_id = 0;
    m_Association_idIsSet = false;
    m_Batch_features = utility::conversions::to_string_t("");
    m_Batch_featuresIsSet = false;
    m_Batch_flag = false;
    m_Batch_flagIsSet = false;
    m_Batch_host = utility::conversions::to_string_t("");
    m_Batch_hostIsSet = false;
    m_FlagsIsSet = false;
    m_Burst_buffer = utility::conversions::to_string_t("");
    m_Burst_bufferIsSet = false;
    m_Burst_buffer_state = utility::conversions::to_string_t("");
    m_Burst_buffer_stateIsSet = false;
    m_Cluster = utility::conversions::to_string_t("");
    m_ClusterIsSet = false;
    m_Cluster_features = utility::conversions::to_string_t("");
    m_Cluster_featuresIsSet = false;
    m_Command = utility::conversions::to_string_t("");
    m_CommandIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_Container = utility::conversions::to_string_t("");
    m_ContainerIsSet = false;
    m_Container_id = utility::conversions::to_string_t("");
    m_Container_idIsSet = false;
    m_Contiguous = false;
    m_ContiguousIsSet = false;
    m_Core_spec = 0;
    m_Core_specIsSet = false;
    m_Thread_spec = 0;
    m_Thread_specIsSet = false;
    m_Cores_per_socketIsSet = false;
    m_Billable_tresIsSet = false;
    m_Cpus_per_taskIsSet = false;
    m_Cpu_frequency_minimumIsSet = false;
    m_Cpu_frequency_maximumIsSet = false;
    m_Cpu_frequency_governorIsSet = false;
    m_Cpus_per_tres = utility::conversions::to_string_t("");
    m_Cpus_per_tresIsSet = false;
    m_Cron = utility::conversions::to_string_t("");
    m_CronIsSet = false;
    m_Deadline = 0L;
    m_DeadlineIsSet = false;
    m_Delay_bootIsSet = false;
    m_Dependency = utility::conversions::to_string_t("");
    m_DependencyIsSet = false;
    m_Derived_exit_code = 0;
    m_Derived_exit_codeIsSet = false;
    m_Eligible_time = 0L;
    m_Eligible_timeIsSet = false;
    m_End_time = 0L;
    m_End_timeIsSet = false;
    m_Excluded_nodes = utility::conversions::to_string_t("");
    m_Excluded_nodesIsSet = false;
    m_Exit_code = 0;
    m_Exit_codeIsSet = false;
    m_Extra = utility::conversions::to_string_t("");
    m_ExtraIsSet = false;
    m_Failed_node = utility::conversions::to_string_t("");
    m_Failed_nodeIsSet = false;
    m_Features = utility::conversions::to_string_t("");
    m_FeaturesIsSet = false;
    m_Federation_origin = utility::conversions::to_string_t("");
    m_Federation_originIsSet = false;
    m_Federation_siblings_active = utility::conversions::to_string_t("");
    m_Federation_siblings_activeIsSet = false;
    m_Federation_siblings_viable = utility::conversions::to_string_t("");
    m_Federation_siblings_viableIsSet = false;
    m_Gres_detailIsSet = false;
    m_Group_id = 0;
    m_Group_idIsSet = false;
    m_Group_name = utility::conversions::to_string_t("");
    m_Group_nameIsSet = false;
    m_Het_job_idIsSet = false;
    m_Het_job_id_set = utility::conversions::to_string_t("");
    m_Het_job_id_setIsSet = false;
    m_Het_job_offsetIsSet = false;
    m_Job_id = 0;
    m_Job_idIsSet = false;
    m_Job_resourcesIsSet = false;
    m_Job_size_strIsSet = false;
    m_Job_state = utility::conversions::to_string_t("");
    m_Job_stateIsSet = false;
    m_Last_sched_evaluation = 0L;
    m_Last_sched_evaluationIsSet = false;
    m_Licenses = utility::conversions::to_string_t("");
    m_LicensesIsSet = false;
    m_Mail_typeIsSet = false;
    m_Mail_user = utility::conversions::to_string_t("");
    m_Mail_userIsSet = false;
    m_Max_cpusIsSet = false;
    m_Max_nodesIsSet = false;
    m_Mcs_label = utility::conversions::to_string_t("");
    m_Mcs_labelIsSet = false;
    m_Memory_per_tres = utility::conversions::to_string_t("");
    m_Memory_per_tresIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Network = utility::conversions::to_string_t("");
    m_NetworkIsSet = false;
    m_Nodes = utility::conversions::to_string_t("");
    m_NodesIsSet = false;
    m_Nice = 0;
    m_NiceIsSet = false;
    m_Tasks_per_coreIsSet = false;
    m_Tasks_per_tresIsSet = false;
    m_Tasks_per_nodeIsSet = false;
    m_Tasks_per_socketIsSet = false;
    m_Tasks_per_boardIsSet = false;
    m_CpusIsSet = false;
    m_Node_countIsSet = false;
    m_TasksIsSet = false;
    m_Partition = utility::conversions::to_string_t("");
    m_PartitionIsSet = false;
    m_Prefer = utility::conversions::to_string_t("");
    m_PreferIsSet = false;
    m_Memory_per_cpuIsSet = false;
    m_Memory_per_nodeIsSet = false;
    m_Minimum_cpus_per_nodeIsSet = false;
    m_Minimum_tmp_disk_per_nodeIsSet = false;
    m_PowerIsSet = false;
    m_Preempt_time = 0L;
    m_Preempt_timeIsSet = false;
    m_Preemptable_time = 0L;
    m_Preemptable_timeIsSet = false;
    m_Pre_sus_time = 0L;
    m_Pre_sus_timeIsSet = false;
    m_PriorityIsSet = false;
    m_ProfileIsSet = false;
    m_Qos = utility::conversions::to_string_t("");
    m_QosIsSet = false;
    m_Reboot = false;
    m_RebootIsSet = false;
    m_Required_nodes = utility::conversions::to_string_t("");
    m_Required_nodesIsSet = false;
    m_Minimum_switches = 0;
    m_Minimum_switchesIsSet = false;
    m_Requeue = false;
    m_RequeueIsSet = false;
    m_Resize_time = 0L;
    m_Resize_timeIsSet = false;
    m_Restart_cnt = 0;
    m_Restart_cntIsSet = false;
    m_Resv_name = utility::conversions::to_string_t("");
    m_Resv_nameIsSet = false;
    m_Scheduled_nodes = utility::conversions::to_string_t("");
    m_Scheduled_nodesIsSet = false;
    m_Selinux_context = utility::conversions::to_string_t("");
    m_Selinux_contextIsSet = false;
    m_SharedIsSet = false;
    m_ExclusiveIsSet = false;
    m_Show_flagsIsSet = false;
    m_Sockets_per_board = 0;
    m_Sockets_per_boardIsSet = false;
    m_Sockets_per_nodeIsSet = false;
    m_Start_time = 0L;
    m_Start_timeIsSet = false;
    m_State_description = utility::conversions::to_string_t("");
    m_State_descriptionIsSet = false;
    m_State_reason = utility::conversions::to_string_t("");
    m_State_reasonIsSet = false;
    m_Standard_error = utility::conversions::to_string_t("");
    m_Standard_errorIsSet = false;
    m_Standard_input = utility::conversions::to_string_t("");
    m_Standard_inputIsSet = false;
    m_Standard_output = utility::conversions::to_string_t("");
    m_Standard_outputIsSet = false;
    m_Submit_time = 0L;
    m_Submit_timeIsSet = false;
    m_Suspend_time = 0L;
    m_Suspend_timeIsSet = false;
    m_System_comment = utility::conversions::to_string_t("");
    m_System_commentIsSet = false;
    m_Time_limitIsSet = false;
    m_Time_minimumIsSet = false;
    m_Threads_per_coreIsSet = false;
    m_Tres_bind = utility::conversions::to_string_t("");
    m_Tres_bindIsSet = false;
    m_Tres_freq = utility::conversions::to_string_t("");
    m_Tres_freqIsSet = false;
    m_Tres_per_job = utility::conversions::to_string_t("");
    m_Tres_per_jobIsSet = false;
    m_Tres_per_node = utility::conversions::to_string_t("");
    m_Tres_per_nodeIsSet = false;
    m_Tres_per_socket = utility::conversions::to_string_t("");
    m_Tres_per_socketIsSet = false;
    m_Tres_per_task = utility::conversions::to_string_t("");
    m_Tres_per_taskIsSet = false;
    m_Tres_req_str = utility::conversions::to_string_t("");
    m_Tres_req_strIsSet = false;
    m_Tres_alloc_str = utility::conversions::to_string_t("");
    m_Tres_alloc_strIsSet = false;
    m_User_id = 0;
    m_User_idIsSet = false;
    m_User_name = utility::conversions::to_string_t("");
    m_User_nameIsSet = false;
    m_Maximum_switch_wait_time = 0;
    m_Maximum_switch_wait_timeIsSet = false;
    m_Wckey = utility::conversions::to_string_t("");
    m_WckeyIsSet = false;
    m_Current_working_directory = utility::conversions::to_string_t("");
    m_Current_working_directoryIsSet = false;
}

V0_0_39_job_info::~V0_0_39_job_info()
{
}

void V0_0_39_job_info::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_job_info::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_Accrue_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("accrue_time"))] = ModelBase::toJson(m_Accrue_time);
    }
    if(m_Admin_commentIsSet)
    {
        val[utility::conversions::to_string_t(U("admin_comment"))] = ModelBase::toJson(m_Admin_comment);
    }
    if(m_Allocating_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("allocating_node"))] = ModelBase::toJson(m_Allocating_node);
    }
    if(m_Array_job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("array_job_id"))] = ModelBase::toJson(m_Array_job_id);
    }
    if(m_Array_task_idIsSet)
    {
        val[utility::conversions::to_string_t(U("array_task_id"))] = ModelBase::toJson(m_Array_task_id);
    }
    if(m_Array_max_tasksIsSet)
    {
        val[utility::conversions::to_string_t(U("array_max_tasks"))] = ModelBase::toJson(m_Array_max_tasks);
    }
    if(m_Array_task_stringIsSet)
    {
        val[utility::conversions::to_string_t(U("array_task_string"))] = ModelBase::toJson(m_Array_task_string);
    }
    if(m_Association_idIsSet)
    {
        val[utility::conversions::to_string_t(U("association_id"))] = ModelBase::toJson(m_Association_id);
    }
    if(m_Batch_featuresIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_features"))] = ModelBase::toJson(m_Batch_features);
    }
    if(m_Batch_flagIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_flag"))] = ModelBase::toJson(m_Batch_flag);
    }
    if(m_Batch_hostIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_host"))] = ModelBase::toJson(m_Batch_host);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_Burst_bufferIsSet)
    {
        val[utility::conversions::to_string_t(U("burst_buffer"))] = ModelBase::toJson(m_Burst_buffer);
    }
    if(m_Burst_buffer_stateIsSet)
    {
        val[utility::conversions::to_string_t(U("burst_buffer_state"))] = ModelBase::toJson(m_Burst_buffer_state);
    }
    if(m_ClusterIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster"))] = ModelBase::toJson(m_Cluster);
    }
    if(m_Cluster_featuresIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster_features"))] = ModelBase::toJson(m_Cluster_features);
    }
    if(m_CommandIsSet)
    {
        val[utility::conversions::to_string_t(U("command"))] = ModelBase::toJson(m_Command);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t(U("container"))] = ModelBase::toJson(m_Container);
    }
    if(m_Container_idIsSet)
    {
        val[utility::conversions::to_string_t(U("container_id"))] = ModelBase::toJson(m_Container_id);
    }
    if(m_ContiguousIsSet)
    {
        val[utility::conversions::to_string_t(U("contiguous"))] = ModelBase::toJson(m_Contiguous);
    }
    if(m_Core_specIsSet)
    {
        val[utility::conversions::to_string_t(U("core_spec"))] = ModelBase::toJson(m_Core_spec);
    }
    if(m_Thread_specIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_spec"))] = ModelBase::toJson(m_Thread_spec);
    }
    if(m_Cores_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("cores_per_socket"))] = ModelBase::toJson(m_Cores_per_socket);
    }
    if(m_Billable_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("billable_tres"))] = ModelBase::toJson(m_Billable_tres);
    }
    if(m_Cpus_per_taskIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus_per_task"))] = ModelBase::toJson(m_Cpus_per_task);
    }
    if(m_Cpu_frequency_minimumIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_frequency_minimum"))] = ModelBase::toJson(m_Cpu_frequency_minimum);
    }
    if(m_Cpu_frequency_maximumIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_frequency_maximum"))] = ModelBase::toJson(m_Cpu_frequency_maximum);
    }
    if(m_Cpu_frequency_governorIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_frequency_governor"))] = ModelBase::toJson(m_Cpu_frequency_governor);
    }
    if(m_Cpus_per_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus_per_tres"))] = ModelBase::toJson(m_Cpus_per_tres);
    }
    if(m_CronIsSet)
    {
        val[utility::conversions::to_string_t(U("cron"))] = ModelBase::toJson(m_Cron);
    }
    if(m_DeadlineIsSet)
    {
        val[utility::conversions::to_string_t(U("deadline"))] = ModelBase::toJson(m_Deadline);
    }
    if(m_Delay_bootIsSet)
    {
        val[utility::conversions::to_string_t(U("delay_boot"))] = ModelBase::toJson(m_Delay_boot);
    }
    if(m_DependencyIsSet)
    {
        val[utility::conversions::to_string_t(U("dependency"))] = ModelBase::toJson(m_Dependency);
    }
    if(m_Derived_exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("derived_exit_code"))] = ModelBase::toJson(m_Derived_exit_code);
    }
    if(m_Eligible_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("eligible_time"))] = ModelBase::toJson(m_Eligible_time);
    }
    if(m_End_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("end_time"))] = ModelBase::toJson(m_End_time);
    }
    if(m_Excluded_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("excluded_nodes"))] = ModelBase::toJson(m_Excluded_nodes);
    }
    if(m_Exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("exit_code"))] = ModelBase::toJson(m_Exit_code);
    }
    if(m_ExtraIsSet)
    {
        val[utility::conversions::to_string_t(U("extra"))] = ModelBase::toJson(m_Extra);
    }
    if(m_Failed_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("failed_node"))] = ModelBase::toJson(m_Failed_node);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("features"))] = ModelBase::toJson(m_Features);
    }
    if(m_Federation_originIsSet)
    {
        val[utility::conversions::to_string_t(U("federation_origin"))] = ModelBase::toJson(m_Federation_origin);
    }
    if(m_Federation_siblings_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("federation_siblings_active"))] = ModelBase::toJson(m_Federation_siblings_active);
    }
    if(m_Federation_siblings_viableIsSet)
    {
        val[utility::conversions::to_string_t(U("federation_siblings_viable"))] = ModelBase::toJson(m_Federation_siblings_viable);
    }
    if(m_Gres_detailIsSet)
    {
        val[utility::conversions::to_string_t(U("gres_detail"))] = ModelBase::toJson(m_Gres_detail);
    }
    if(m_Group_idIsSet)
    {
        val[utility::conversions::to_string_t(U("group_id"))] = ModelBase::toJson(m_Group_id);
    }
    if(m_Group_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("group_name"))] = ModelBase::toJson(m_Group_name);
    }
    if(m_Het_job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("het_job_id"))] = ModelBase::toJson(m_Het_job_id);
    }
    if(m_Het_job_id_setIsSet)
    {
        val[utility::conversions::to_string_t(U("het_job_id_set"))] = ModelBase::toJson(m_Het_job_id_set);
    }
    if(m_Het_job_offsetIsSet)
    {
        val[utility::conversions::to_string_t(U("het_job_offset"))] = ModelBase::toJson(m_Het_job_offset);
    }
    if(m_Job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("job_id"))] = ModelBase::toJson(m_Job_id);
    }
    if(m_Job_resourcesIsSet)
    {
        val[utility::conversions::to_string_t(U("job_resources"))] = ModelBase::toJson(m_Job_resources);
    }
    if(m_Job_size_strIsSet)
    {
        val[utility::conversions::to_string_t(U("job_size_str"))] = ModelBase::toJson(m_Job_size_str);
    }
    if(m_Job_stateIsSet)
    {
        val[utility::conversions::to_string_t(U("job_state"))] = ModelBase::toJson(m_Job_state);
    }
    if(m_Last_sched_evaluationIsSet)
    {
        val[utility::conversions::to_string_t(U("last_sched_evaluation"))] = ModelBase::toJson(m_Last_sched_evaluation);
    }
    if(m_LicensesIsSet)
    {
        val[utility::conversions::to_string_t(U("licenses"))] = ModelBase::toJson(m_Licenses);
    }
    if(m_Mail_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_type"))] = ModelBase::toJson(m_Mail_type);
    }
    if(m_Mail_userIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_user"))] = ModelBase::toJson(m_Mail_user);
    }
    if(m_Max_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("max_cpus"))] = ModelBase::toJson(m_Max_cpus);
    }
    if(m_Max_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("max_nodes"))] = ModelBase::toJson(m_Max_nodes);
    }
    if(m_Mcs_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("mcs_label"))] = ModelBase::toJson(m_Mcs_label);
    }
    if(m_Memory_per_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_tres"))] = ModelBase::toJson(m_Memory_per_tres);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_NetworkIsSet)
    {
        val[utility::conversions::to_string_t(U("network"))] = ModelBase::toJson(m_Network);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_NiceIsSet)
    {
        val[utility::conversions::to_string_t(U("nice"))] = ModelBase::toJson(m_Nice);
    }
    if(m_Tasks_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_core"))] = ModelBase::toJson(m_Tasks_per_core);
    }
    if(m_Tasks_per_tresIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_tres"))] = ModelBase::toJson(m_Tasks_per_tres);
    }
    if(m_Tasks_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_node"))] = ModelBase::toJson(m_Tasks_per_node);
    }
    if(m_Tasks_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_socket"))] = ModelBase::toJson(m_Tasks_per_socket);
    }
    if(m_Tasks_per_boardIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_board"))] = ModelBase::toJson(m_Tasks_per_board);
    }
    if(m_CpusIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus"))] = ModelBase::toJson(m_Cpus);
    }
    if(m_Node_countIsSet)
    {
        val[utility::conversions::to_string_t(U("node_count"))] = ModelBase::toJson(m_Node_count);
    }
    if(m_TasksIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks"))] = ModelBase::toJson(m_Tasks);
    }
    if(m_PartitionIsSet)
    {
        val[utility::conversions::to_string_t(U("partition"))] = ModelBase::toJson(m_Partition);
    }
    if(m_PreferIsSet)
    {
        val[utility::conversions::to_string_t(U("prefer"))] = ModelBase::toJson(m_Prefer);
    }
    if(m_Memory_per_cpuIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_cpu"))] = ModelBase::toJson(m_Memory_per_cpu);
    }
    if(m_Memory_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_node"))] = ModelBase::toJson(m_Memory_per_node);
    }
    if(m_Minimum_cpus_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_cpus_per_node"))] = ModelBase::toJson(m_Minimum_cpus_per_node);
    }
    if(m_Minimum_tmp_disk_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_tmp_disk_per_node"))] = ModelBase::toJson(m_Minimum_tmp_disk_per_node);
    }
    if(m_PowerIsSet)
    {
        val[utility::conversions::to_string_t(U("power"))] = ModelBase::toJson(m_Power);
    }
    if(m_Preempt_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("preempt_time"))] = ModelBase::toJson(m_Preempt_time);
    }
    if(m_Preemptable_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("preemptable_time"))] = ModelBase::toJson(m_Preemptable_time);
    }
    if(m_Pre_sus_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("pre_sus_time"))] = ModelBase::toJson(m_Pre_sus_time);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_ProfileIsSet)
    {
        val[utility::conversions::to_string_t(U("profile"))] = ModelBase::toJson(m_Profile);
    }
    if(m_QosIsSet)
    {
        val[utility::conversions::to_string_t(U("qos"))] = ModelBase::toJson(m_Qos);
    }
    if(m_RebootIsSet)
    {
        val[utility::conversions::to_string_t(U("reboot"))] = ModelBase::toJson(m_Reboot);
    }
    if(m_Required_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("required_nodes"))] = ModelBase::toJson(m_Required_nodes);
    }
    if(m_Minimum_switchesIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_switches"))] = ModelBase::toJson(m_Minimum_switches);
    }
    if(m_RequeueIsSet)
    {
        val[utility::conversions::to_string_t(U("requeue"))] = ModelBase::toJson(m_Requeue);
    }
    if(m_Resize_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("resize_time"))] = ModelBase::toJson(m_Resize_time);
    }
    if(m_Restart_cntIsSet)
    {
        val[utility::conversions::to_string_t(U("restart_cnt"))] = ModelBase::toJson(m_Restart_cnt);
    }
    if(m_Resv_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("resv_name"))] = ModelBase::toJson(m_Resv_name);
    }
    if(m_Scheduled_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("scheduled_nodes"))] = ModelBase::toJson(m_Scheduled_nodes);
    }
    if(m_Selinux_contextIsSet)
    {
        val[utility::conversions::to_string_t(U("selinux_context"))] = ModelBase::toJson(m_Selinux_context);
    }
    if(m_SharedIsSet)
    {
        val[utility::conversions::to_string_t(U("shared"))] = ModelBase::toJson(m_Shared);
    }
    if(m_ExclusiveIsSet)
    {
        val[utility::conversions::to_string_t(U("exclusive"))] = ModelBase::toJson(m_Exclusive);
    }
    if(m_Show_flagsIsSet)
    {
        val[utility::conversions::to_string_t(U("show_flags"))] = ModelBase::toJson(m_Show_flags);
    }
    if(m_Sockets_per_boardIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets_per_board"))] = ModelBase::toJson(m_Sockets_per_board);
    }
    if(m_Sockets_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets_per_node"))] = ModelBase::toJson(m_Sockets_per_node);
    }
    if(m_Start_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("start_time"))] = ModelBase::toJson(m_Start_time);
    }
    if(m_State_descriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("state_description"))] = ModelBase::toJson(m_State_description);
    }
    if(m_State_reasonIsSet)
    {
        val[utility::conversions::to_string_t(U("state_reason"))] = ModelBase::toJson(m_State_reason);
    }
    if(m_Standard_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_error"))] = ModelBase::toJson(m_Standard_error);
    }
    if(m_Standard_inputIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_input"))] = ModelBase::toJson(m_Standard_input);
    }
    if(m_Standard_outputIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_output"))] = ModelBase::toJson(m_Standard_output);
    }
    if(m_Submit_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("submit_time"))] = ModelBase::toJson(m_Submit_time);
    }
    if(m_Suspend_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("suspend_time"))] = ModelBase::toJson(m_Suspend_time);
    }
    if(m_System_commentIsSet)
    {
        val[utility::conversions::to_string_t(U("system_comment"))] = ModelBase::toJson(m_System_comment);
    }
    if(m_Time_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("time_limit"))] = ModelBase::toJson(m_Time_limit);
    }
    if(m_Time_minimumIsSet)
    {
        val[utility::conversions::to_string_t(U("time_minimum"))] = ModelBase::toJson(m_Time_minimum);
    }
    if(m_Threads_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("threads_per_core"))] = ModelBase::toJson(m_Threads_per_core);
    }
    if(m_Tres_bindIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_bind"))] = ModelBase::toJson(m_Tres_bind);
    }
    if(m_Tres_freqIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_freq"))] = ModelBase::toJson(m_Tres_freq);
    }
    if(m_Tres_per_jobIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_job"))] = ModelBase::toJson(m_Tres_per_job);
    }
    if(m_Tres_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_node"))] = ModelBase::toJson(m_Tres_per_node);
    }
    if(m_Tres_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_socket"))] = ModelBase::toJson(m_Tres_per_socket);
    }
    if(m_Tres_per_taskIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_per_task"))] = ModelBase::toJson(m_Tres_per_task);
    }
    if(m_Tres_req_strIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_req_str"))] = ModelBase::toJson(m_Tres_req_str);
    }
    if(m_Tres_alloc_strIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_alloc_str"))] = ModelBase::toJson(m_Tres_alloc_str);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_User_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("user_name"))] = ModelBase::toJson(m_User_name);
    }
    if(m_Maximum_switch_wait_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("maximum_switch_wait_time"))] = ModelBase::toJson(m_Maximum_switch_wait_time);
    }
    if(m_WckeyIsSet)
    {
        val[utility::conversions::to_string_t(U("wckey"))] = ModelBase::toJson(m_Wckey);
    }
    if(m_Current_working_directoryIsSet)
    {
        val[utility::conversions::to_string_t(U("current_working_directory"))] = ModelBase::toJson(m_Current_working_directory);
    }

    return val;
}

bool V0_0_39_job_info::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accrue_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accrue_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setAccrueTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccrueTime);
            setAccrueTime(refVal_setAccrueTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("admin_comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("admin_comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAdminComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAdminComment);
            setAdminComment(refVal_setAdminComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allocating_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allocating_node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAllocatingNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocatingNode);
            setAllocatingNode(refVal_setAllocatingNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array_job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array_job_id")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setArrayJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArrayJobId);
            setArrayJobId(refVal_setArrayJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array_task_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array_task_id")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setArrayTaskId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArrayTaskId);
            setArrayTaskId(refVal_setArrayTaskId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array_max_tasks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array_max_tasks")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setArrayMaxTasks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArrayMaxTasks);
            setArrayMaxTasks(refVal_setArrayMaxTasks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array_task_string"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array_task_string")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setArrayTaskString;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArrayTaskString);
            setArrayTaskString(refVal_setArrayTaskString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("association_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("association_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAssociationId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociationId);
            setAssociationId(refVal_setAssociationId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("batch_features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_features")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBatchFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchFeatures);
            setBatchFeatures(refVal_setBatchFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("batch_flag"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_flag")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBatchFlag;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchFlag);
            setBatchFlag(refVal_setBatchFlag);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("batch_host"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_host")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBatchHost;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchHost);
            setBatchHost(refVal_setBatchHost);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("burst_buffer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("burst_buffer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBurstBuffer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBurstBuffer);
            setBurstBuffer(refVal_setBurstBuffer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("burst_buffer_state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("burst_buffer_state")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBurstBufferState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBurstBufferState);
            setBurstBufferState(refVal_setBurstBufferState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCluster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCluster);
            setCluster(refVal_setCluster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster_features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster_features")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClusterFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusterFeatures);
            setClusterFeatures(refVal_setClusterFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("command"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("command")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCommand;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCommand);
            setCommand(refVal_setCommand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainer);
            setContainer(refVal_setContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainerId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainerId);
            setContainerId(refVal_setContainerId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("contiguous"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("contiguous")));
        if(!fieldValue.is_null())
        {
            bool refVal_setContiguous;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContiguous);
            setContiguous(refVal_setContiguous);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("core_spec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("core_spec")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCoreSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoreSpec);
            setCoreSpec(refVal_setCoreSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_spec"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_spec")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setThreadSpec;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadSpec);
            setThreadSpec(refVal_setThreadSpec);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cores_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cores_per_socket")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setCoresPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoresPerSocket);
            setCoresPerSocket(refVal_setCoresPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("billable_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("billable_tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_float64_no_val> refVal_setBillableTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBillableTres);
            setBillableTres(refVal_setBillableTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus_per_task"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus_per_task")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setCpusPerTask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpusPerTask);
            setCpusPerTask(refVal_setCpusPerTask);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_frequency_minimum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_frequency_minimum")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuFrequencyMinimum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuFrequencyMinimum);
            setCpuFrequencyMinimum(refVal_setCpuFrequencyMinimum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_frequency_maximum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_frequency_maximum")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuFrequencyMaximum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuFrequencyMaximum);
            setCpuFrequencyMaximum(refVal_setCpuFrequencyMaximum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_frequency_governor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_frequency_governor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuFrequencyGovernor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuFrequencyGovernor);
            setCpuFrequencyGovernor(refVal_setCpuFrequencyGovernor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus_per_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus_per_tres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpusPerTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpusPerTres);
            setCpusPerTres(refVal_setCpusPerTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cron"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cron")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCron;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCron);
            setCron(refVal_setCron);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deadline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deadline")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setDeadline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeadline);
            setDeadline(refVal_setDeadline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delay_boot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delay_boot")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setDelayBoot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelayBoot);
            setDelayBoot(refVal_setDelayBoot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dependency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dependency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDependency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDependency);
            setDependency(refVal_setDependency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("derived_exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("derived_exit_code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDerivedExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDerivedExitCode);
            setDerivedExitCode(refVal_setDerivedExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("eligible_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("eligible_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEligibleTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEligibleTime);
            setEligibleTime(refVal_setEligibleTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("end_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setEndTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndTime);
            setEndTime(refVal_setEndTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("excluded_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("excluded_nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExcludedNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExcludedNodes);
            setExcludedNodes(refVal_setExcludedNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exit_code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExitCode);
            setExitCode(refVal_setExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extra"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extra")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExtra;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtra);
            setExtra(refVal_setExtra);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("failed_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("failed_node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFailedNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFailedNode);
            setFailedNode(refVal_setFailedNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("features")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatures);
            setFeatures(refVal_setFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("federation_origin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("federation_origin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFederationOrigin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFederationOrigin);
            setFederationOrigin(refVal_setFederationOrigin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("federation_siblings_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("federation_siblings_active")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFederationSiblingsActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFederationSiblingsActive);
            setFederationSiblingsActive(refVal_setFederationSiblingsActive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("federation_siblings_viable"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("federation_siblings_viable")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFederationSiblingsViable;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFederationSiblingsViable);
            setFederationSiblingsViable(refVal_setFederationSiblingsViable);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gres_detail"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gres_detail")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setGresDetail;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGresDetail);
            setGresDetail(refVal_setGresDetail);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGroupId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupId);
            setGroupId(refVal_setGroupId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroupName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupName);
            setGroupName(refVal_setGroupName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("het_job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("het_job_id")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setHetJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHetJobId);
            setHetJobId(refVal_setHetJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("het_job_id_set"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("het_job_id_set")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHetJobIdSet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHetJobIdSet);
            setHetJobIdSet(refVal_setHetJobIdSet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("het_job_offset"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("het_job_offset")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setHetJobOffset;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHetJobOffset);
            setHetJobOffset(refVal_setHetJobOffset);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_resources"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_resources")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_job_res> refVal_setJobResources;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobResources);
            setJobResources(refVal_setJobResources);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_size_str"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_size_str")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setJobSizeStr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobSizeStr);
            setJobSizeStr(refVal_setJobSizeStr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_state")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setJobState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobState);
            setJobState(refVal_setJobState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_sched_evaluation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_sched_evaluation")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLastSchedEvaluation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastSchedEvaluation);
            setLastSchedEvaluation(refVal_setLastSchedEvaluation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenses")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenses);
            setLicenses(refVal_setLicenses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_type")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMailType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailType);
            setMailType(refVal_setMailType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailUser);
            setMailUser(refVal_setMailUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_cpus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMaxCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxCpus);
            setMaxCpus(refVal_setMaxCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_nodes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMaxNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxNodes);
            setMaxNodes(refVal_setMaxNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcs_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcs_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMcsLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcsLabel);
            setMcsLabel(refVal_setMcsLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_tres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMemoryPerTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerTres);
            setMemoryPerTres(refVal_setMemoryPerTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("network"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("network")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNetwork;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNetwork);
            setNetwork(refVal_setNetwork);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nice")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNice);
            setNice(refVal_setNice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_core")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerCore);
            setTasksPerCore(refVal_setTasksPerCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerTres);
            setTasksPerTres(refVal_setTasksPerTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerNode);
            setTasksPerNode(refVal_setTasksPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_socket")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerSocket);
            setTasksPerSocket(refVal_setTasksPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_board"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_board")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerBoard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerBoard);
            setTasksPerBoard(refVal_setTasksPerBoard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpus);
            setCpus(refVal_setCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("node_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("node_count")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setNodeCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodeCount);
            setNodeCount(refVal_setNodeCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTasks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasks);
            setTasks(refVal_setTasks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartition);
            setPartition(refVal_setPartition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prefer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prefer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrefer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrefer);
            setPrefer(refVal_setPrefer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_cpu")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerCpu);
            setMemoryPerCpu(refVal_setMemoryPerCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerNode);
            setMemoryPerNode(refVal_setMemoryPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_cpus_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_cpus_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setMinimumCpusPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumCpusPerNode);
            setMinimumCpusPerNode(refVal_setMinimumCpusPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_tmp_disk_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_tmp_disk_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMinimumTmpDiskPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumTmpDiskPerNode);
            setMinimumTmpDiskPerNode(refVal_setMinimumTmpDiskPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("power"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("power")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_job_info_power> refVal_setPower;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPower);
            setPower(refVal_setPower);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preempt_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preempt_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPreemptTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreemptTime);
            setPreemptTime(refVal_setPreemptTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("preemptable_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("preemptable_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPreemptableTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreemptableTime);
            setPreemptableTime(refVal_setPreemptableTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("pre_sus_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("pre_sus_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setPreSusTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPreSusTime);
            setPreSusTime(refVal_setPreSusTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("profile"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("profile")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setProfile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProfile);
            setProfile(refVal_setProfile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qos")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQos);
            setQos(refVal_setQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reboot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reboot")));
        if(!fieldValue.is_null())
        {
            bool refVal_setReboot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReboot);
            setReboot(refVal_setReboot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required_nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRequiredNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequiredNodes);
            setRequiredNodes(refVal_setRequiredNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_switches"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_switches")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumSwitches;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumSwitches);
            setMinimumSwitches(refVal_setMinimumSwitches);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requeue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requeue")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRequeue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequeue);
            setRequeue(refVal_setRequeue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resize_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resize_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setResizeTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResizeTime);
            setResizeTime(refVal_setResizeTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("restart_cnt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("restart_cnt")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRestartCnt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRestartCnt);
            setRestartCnt(refVal_setRestartCnt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resv_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resv_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResvName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResvName);
            setResvName(refVal_setResvName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("scheduled_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("scheduled_nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setScheduledNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduledNodes);
            setScheduledNodes(refVal_setScheduledNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("selinux_context"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("selinux_context")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSelinuxContext;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelinuxContext);
            setSelinuxContext(refVal_setSelinuxContext);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shared"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shared")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setShared;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShared);
            setShared(refVal_setShared);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exclusive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exclusive")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setExclusive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExclusive);
            setExclusive(refVal_setExclusive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("show_flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("show_flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setShowFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShowFlags);
            setShowFlags(refVal_setShowFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets_per_board"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets_per_board")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSocketsPerBoard;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSocketsPerBoard);
            setSocketsPerBoard(refVal_setSocketsPerBoard);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setSocketsPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSocketsPerNode);
            setSocketsPerNode(refVal_setSocketsPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("start_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("start_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartTime);
            setStartTime(refVal_setStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state_description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state_description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStateDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStateDescription);
            setStateDescription(refVal_setStateDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state_reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state_reason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStateReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStateReason);
            setStateReason(refVal_setStateReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardError);
            setStandardError(refVal_setStandardError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_input"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_input")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardInput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardInput);
            setStandardInput(refVal_setStandardInput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_output"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_output")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardOutput);
            setStandardOutput(refVal_setStandardOutput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submit_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submit_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSubmitTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmitTime);
            setSubmitTime(refVal_setSubmitTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("suspend_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("suspend_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSuspendTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSuspendTime);
            setSuspendTime(refVal_setSuspendTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("system_comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("system_comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSystemComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemComment);
            setSystemComment(refVal_setSystemComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_limit")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeLimit);
            setTimeLimit(refVal_setTimeLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_minimum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_minimum")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeMinimum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeMinimum);
            setTimeMinimum(refVal_setTimeMinimum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threads_per_core")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint16_no_val> refVal_setThreadsPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadsPerCore);
            setThreadsPerCore(refVal_setThreadsPerCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_bind"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_bind")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresBind;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresBind);
            setTresBind(refVal_setTresBind);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_freq"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_freq")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresFreq;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresFreq);
            setTresFreq(refVal_setTresFreq);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_job"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_job")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerJob;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerJob);
            setTresPerJob(refVal_setTresPerJob);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerNode);
            setTresPerNode(refVal_setTresPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_socket")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerSocket);
            setTresPerSocket(refVal_setTresPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_per_task"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_per_task")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresPerTask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresPerTask);
            setTresPerTask(refVal_setTresPerTask);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_req_str"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_req_str")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresReqStr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresReqStr);
            setTresReqStr(refVal_setTresReqStr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_alloc_str"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_alloc_str")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresAllocStr;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresAllocStr);
            setTresAllocStr(refVal_setTresAllocStr);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserName);
            setUserName(refVal_setUserName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("maximum_switch_wait_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("maximum_switch_wait_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaximumSwitchWaitTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaximumSwitchWaitTime);
            setMaximumSwitchWaitTime(refVal_setMaximumSwitchWaitTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWckey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckey);
            setWckey(refVal_setWckey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_working_directory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_working_directory")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentWorkingDirectory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentWorkingDirectory);
            setCurrentWorkingDirectory(refVal_setCurrentWorkingDirectory);
        }
    }
    return ok;
}

void V0_0_39_job_info::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_Accrue_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accrue_time")), m_Accrue_time));
    }
    if(m_Admin_commentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("admin_comment")), m_Admin_comment));
    }
    if(m_Allocating_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allocating_node")), m_Allocating_node));
    }
    if(m_Array_job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array_job_id")), m_Array_job_id));
    }
    if(m_Array_task_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array_task_id")), m_Array_task_id));
    }
    if(m_Array_max_tasksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array_max_tasks")), m_Array_max_tasks));
    }
    if(m_Array_task_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array_task_string")), m_Array_task_string));
    }
    if(m_Association_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("association_id")), m_Association_id));
    }
    if(m_Batch_featuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_features")), m_Batch_features));
    }
    if(m_Batch_flagIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_flag")), m_Batch_flag));
    }
    if(m_Batch_hostIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_host")), m_Batch_host));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_Burst_bufferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("burst_buffer")), m_Burst_buffer));
    }
    if(m_Burst_buffer_stateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("burst_buffer_state")), m_Burst_buffer_state));
    }
    if(m_ClusterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster")), m_Cluster));
    }
    if(m_Cluster_featuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster_features")), m_Cluster_features));
    }
    if(m_CommandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("command")), m_Command));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container")), m_Container));
    }
    if(m_Container_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container_id")), m_Container_id));
    }
    if(m_ContiguousIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("contiguous")), m_Contiguous));
    }
    if(m_Core_specIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("core_spec")), m_Core_spec));
    }
    if(m_Thread_specIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_spec")), m_Thread_spec));
    }
    if(m_Cores_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cores_per_socket")), m_Cores_per_socket));
    }
    if(m_Billable_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("billable_tres")), m_Billable_tres));
    }
    if(m_Cpus_per_taskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus_per_task")), m_Cpus_per_task));
    }
    if(m_Cpu_frequency_minimumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_frequency_minimum")), m_Cpu_frequency_minimum));
    }
    if(m_Cpu_frequency_maximumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_frequency_maximum")), m_Cpu_frequency_maximum));
    }
    if(m_Cpu_frequency_governorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_frequency_governor")), m_Cpu_frequency_governor));
    }
    if(m_Cpus_per_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus_per_tres")), m_Cpus_per_tres));
    }
    if(m_CronIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cron")), m_Cron));
    }
    if(m_DeadlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deadline")), m_Deadline));
    }
    if(m_Delay_bootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delay_boot")), m_Delay_boot));
    }
    if(m_DependencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dependency")), m_Dependency));
    }
    if(m_Derived_exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("derived_exit_code")), m_Derived_exit_code));
    }
    if(m_Eligible_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("eligible_time")), m_Eligible_time));
    }
    if(m_End_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_time")), m_End_time));
    }
    if(m_Excluded_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("excluded_nodes")), m_Excluded_nodes));
    }
    if(m_Exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exit_code")), m_Exit_code));
    }
    if(m_ExtraIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extra")), m_Extra));
    }
    if(m_Failed_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("failed_node")), m_Failed_node));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("features")), m_Features));
    }
    if(m_Federation_originIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("federation_origin")), m_Federation_origin));
    }
    if(m_Federation_siblings_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("federation_siblings_active")), m_Federation_siblings_active));
    }
    if(m_Federation_siblings_viableIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("federation_siblings_viable")), m_Federation_siblings_viable));
    }
    if(m_Gres_detailIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gres_detail")), m_Gres_detail));
    }
    if(m_Group_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_id")), m_Group_id));
    }
    if(m_Group_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_name")), m_Group_name));
    }
    if(m_Het_job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("het_job_id")), m_Het_job_id));
    }
    if(m_Het_job_id_setIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("het_job_id_set")), m_Het_job_id_set));
    }
    if(m_Het_job_offsetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("het_job_offset")), m_Het_job_offset));
    }
    if(m_Job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_id")), m_Job_id));
    }
    if(m_Job_resourcesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_resources")), m_Job_resources));
    }
    if(m_Job_size_strIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_size_str")), m_Job_size_str));
    }
    if(m_Job_stateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_state")), m_Job_state));
    }
    if(m_Last_sched_evaluationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_sched_evaluation")), m_Last_sched_evaluation));
    }
    if(m_LicensesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenses")), m_Licenses));
    }
    if(m_Mail_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_type")), m_Mail_type));
    }
    if(m_Mail_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_user")), m_Mail_user));
    }
    if(m_Max_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_cpus")), m_Max_cpus));
    }
    if(m_Max_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_nodes")), m_Max_nodes));
    }
    if(m_Mcs_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcs_label")), m_Mcs_label));
    }
    if(m_Memory_per_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_tres")), m_Memory_per_tres));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_NetworkIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("network")), m_Network));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_NiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nice")), m_Nice));
    }
    if(m_Tasks_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_core")), m_Tasks_per_core));
    }
    if(m_Tasks_per_tresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_tres")), m_Tasks_per_tres));
    }
    if(m_Tasks_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_node")), m_Tasks_per_node));
    }
    if(m_Tasks_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_socket")), m_Tasks_per_socket));
    }
    if(m_Tasks_per_boardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_board")), m_Tasks_per_board));
    }
    if(m_CpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus")), m_Cpus));
    }
    if(m_Node_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("node_count")), m_Node_count));
    }
    if(m_TasksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks")), m_Tasks));
    }
    if(m_PartitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition")), m_Partition));
    }
    if(m_PreferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prefer")), m_Prefer));
    }
    if(m_Memory_per_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_cpu")), m_Memory_per_cpu));
    }
    if(m_Memory_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_node")), m_Memory_per_node));
    }
    if(m_Minimum_cpus_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_cpus_per_node")), m_Minimum_cpus_per_node));
    }
    if(m_Minimum_tmp_disk_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_tmp_disk_per_node")), m_Minimum_tmp_disk_per_node));
    }
    if(m_PowerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("power")), m_Power));
    }
    if(m_Preempt_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preempt_time")), m_Preempt_time));
    }
    if(m_Preemptable_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("preemptable_time")), m_Preemptable_time));
    }
    if(m_Pre_sus_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("pre_sus_time")), m_Pre_sus_time));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_ProfileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("profile")), m_Profile));
    }
    if(m_QosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qos")), m_Qos));
    }
    if(m_RebootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reboot")), m_Reboot));
    }
    if(m_Required_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required_nodes")), m_Required_nodes));
    }
    if(m_Minimum_switchesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_switches")), m_Minimum_switches));
    }
    if(m_RequeueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requeue")), m_Requeue));
    }
    if(m_Resize_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resize_time")), m_Resize_time));
    }
    if(m_Restart_cntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("restart_cnt")), m_Restart_cnt));
    }
    if(m_Resv_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resv_name")), m_Resv_name));
    }
    if(m_Scheduled_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("scheduled_nodes")), m_Scheduled_nodes));
    }
    if(m_Selinux_contextIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("selinux_context")), m_Selinux_context));
    }
    if(m_SharedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shared")), m_Shared));
    }
    if(m_ExclusiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exclusive")), m_Exclusive));
    }
    if(m_Show_flagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("show_flags")), m_Show_flags));
    }
    if(m_Sockets_per_boardIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets_per_board")), m_Sockets_per_board));
    }
    if(m_Sockets_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets_per_node")), m_Sockets_per_node));
    }
    if(m_Start_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("start_time")), m_Start_time));
    }
    if(m_State_descriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state_description")), m_State_description));
    }
    if(m_State_reasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state_reason")), m_State_reason));
    }
    if(m_Standard_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_error")), m_Standard_error));
    }
    if(m_Standard_inputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_input")), m_Standard_input));
    }
    if(m_Standard_outputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_output")), m_Standard_output));
    }
    if(m_Submit_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submit_time")), m_Submit_time));
    }
    if(m_Suspend_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("suspend_time")), m_Suspend_time));
    }
    if(m_System_commentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("system_comment")), m_System_comment));
    }
    if(m_Time_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_limit")), m_Time_limit));
    }
    if(m_Time_minimumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_minimum")), m_Time_minimum));
    }
    if(m_Threads_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threads_per_core")), m_Threads_per_core));
    }
    if(m_Tres_bindIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_bind")), m_Tres_bind));
    }
    if(m_Tres_freqIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_freq")), m_Tres_freq));
    }
    if(m_Tres_per_jobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_job")), m_Tres_per_job));
    }
    if(m_Tres_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_node")), m_Tres_per_node));
    }
    if(m_Tres_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_socket")), m_Tres_per_socket));
    }
    if(m_Tres_per_taskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_per_task")), m_Tres_per_task));
    }
    if(m_Tres_req_strIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_req_str")), m_Tres_req_str));
    }
    if(m_Tres_alloc_strIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_alloc_str")), m_Tres_alloc_str));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_User_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_name")), m_User_name));
    }
    if(m_Maximum_switch_wait_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("maximum_switch_wait_time")), m_Maximum_switch_wait_time));
    }
    if(m_WckeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckey")), m_Wckey));
    }
    if(m_Current_working_directoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_working_directory")), m_Current_working_directory));
    }
}

bool V0_0_39_job_info::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accrue_time"))))
    {
        int64_t refVal_setAccrueTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accrue_time"))), refVal_setAccrueTime );
        setAccrueTime(refVal_setAccrueTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("admin_comment"))))
    {
        utility::string_t refVal_setAdminComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("admin_comment"))), refVal_setAdminComment );
        setAdminComment(refVal_setAdminComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allocating_node"))))
    {
        utility::string_t refVal_setAllocatingNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allocating_node"))), refVal_setAllocatingNode );
        setAllocatingNode(refVal_setAllocatingNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array_job_id"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setArrayJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array_job_id"))), refVal_setArrayJobId );
        setArrayJobId(refVal_setArrayJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array_task_id"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setArrayTaskId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array_task_id"))), refVal_setArrayTaskId );
        setArrayTaskId(refVal_setArrayTaskId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array_max_tasks"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setArrayMaxTasks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array_max_tasks"))), refVal_setArrayMaxTasks );
        setArrayMaxTasks(refVal_setArrayMaxTasks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array_task_string"))))
    {
        utility::string_t refVal_setArrayTaskString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array_task_string"))), refVal_setArrayTaskString );
        setArrayTaskString(refVal_setArrayTaskString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("association_id"))))
    {
        int32_t refVal_setAssociationId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("association_id"))), refVal_setAssociationId );
        setAssociationId(refVal_setAssociationId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_features"))))
    {
        utility::string_t refVal_setBatchFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_features"))), refVal_setBatchFeatures );
        setBatchFeatures(refVal_setBatchFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_flag"))))
    {
        bool refVal_setBatchFlag;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_flag"))), refVal_setBatchFlag );
        setBatchFlag(refVal_setBatchFlag);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_host"))))
    {
        utility::string_t refVal_setBatchHost;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_host"))), refVal_setBatchHost );
        setBatchHost(refVal_setBatchHost);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("burst_buffer"))))
    {
        utility::string_t refVal_setBurstBuffer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("burst_buffer"))), refVal_setBurstBuffer );
        setBurstBuffer(refVal_setBurstBuffer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("burst_buffer_state"))))
    {
        utility::string_t refVal_setBurstBufferState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("burst_buffer_state"))), refVal_setBurstBufferState );
        setBurstBufferState(refVal_setBurstBufferState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster"))))
    {
        utility::string_t refVal_setCluster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster"))), refVal_setCluster );
        setCluster(refVal_setCluster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster_features"))))
    {
        utility::string_t refVal_setClusterFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster_features"))), refVal_setClusterFeatures );
        setClusterFeatures(refVal_setClusterFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("command"))))
    {
        utility::string_t refVal_setCommand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("command"))), refVal_setCommand );
        setCommand(refVal_setCommand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container"))))
    {
        utility::string_t refVal_setContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container"))), refVal_setContainer );
        setContainer(refVal_setContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container_id"))))
    {
        utility::string_t refVal_setContainerId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container_id"))), refVal_setContainerId );
        setContainerId(refVal_setContainerId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("contiguous"))))
    {
        bool refVal_setContiguous;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("contiguous"))), refVal_setContiguous );
        setContiguous(refVal_setContiguous);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("core_spec"))))
    {
        int32_t refVal_setCoreSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("core_spec"))), refVal_setCoreSpec );
        setCoreSpec(refVal_setCoreSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_spec"))))
    {
        int32_t refVal_setThreadSpec;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_spec"))), refVal_setThreadSpec );
        setThreadSpec(refVal_setThreadSpec);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cores_per_socket"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setCoresPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cores_per_socket"))), refVal_setCoresPerSocket );
        setCoresPerSocket(refVal_setCoresPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("billable_tres"))))
    {
        std::shared_ptr<V0_0_39_float64_no_val> refVal_setBillableTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("billable_tres"))), refVal_setBillableTres );
        setBillableTres(refVal_setBillableTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus_per_task"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setCpusPerTask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus_per_task"))), refVal_setCpusPerTask );
        setCpusPerTask(refVal_setCpusPerTask);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_frequency_minimum"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuFrequencyMinimum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_frequency_minimum"))), refVal_setCpuFrequencyMinimum );
        setCpuFrequencyMinimum(refVal_setCpuFrequencyMinimum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_frequency_maximum"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuFrequencyMaximum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_frequency_maximum"))), refVal_setCpuFrequencyMaximum );
        setCpuFrequencyMaximum(refVal_setCpuFrequencyMaximum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_frequency_governor"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuFrequencyGovernor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_frequency_governor"))), refVal_setCpuFrequencyGovernor );
        setCpuFrequencyGovernor(refVal_setCpuFrequencyGovernor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus_per_tres"))))
    {
        utility::string_t refVal_setCpusPerTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus_per_tres"))), refVal_setCpusPerTres );
        setCpusPerTres(refVal_setCpusPerTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cron"))))
    {
        utility::string_t refVal_setCron;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cron"))), refVal_setCron );
        setCron(refVal_setCron);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deadline"))))
    {
        int64_t refVal_setDeadline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deadline"))), refVal_setDeadline );
        setDeadline(refVal_setDeadline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delay_boot"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setDelayBoot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delay_boot"))), refVal_setDelayBoot );
        setDelayBoot(refVal_setDelayBoot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dependency"))))
    {
        utility::string_t refVal_setDependency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dependency"))), refVal_setDependency );
        setDependency(refVal_setDependency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("derived_exit_code"))))
    {
        int32_t refVal_setDerivedExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("derived_exit_code"))), refVal_setDerivedExitCode );
        setDerivedExitCode(refVal_setDerivedExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("eligible_time"))))
    {
        int64_t refVal_setEligibleTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("eligible_time"))), refVal_setEligibleTime );
        setEligibleTime(refVal_setEligibleTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("end_time"))))
    {
        int64_t refVal_setEndTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_time"))), refVal_setEndTime );
        setEndTime(refVal_setEndTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("excluded_nodes"))))
    {
        utility::string_t refVal_setExcludedNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("excluded_nodes"))), refVal_setExcludedNodes );
        setExcludedNodes(refVal_setExcludedNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exit_code"))))
    {
        int32_t refVal_setExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exit_code"))), refVal_setExitCode );
        setExitCode(refVal_setExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extra"))))
    {
        utility::string_t refVal_setExtra;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extra"))), refVal_setExtra );
        setExtra(refVal_setExtra);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("failed_node"))))
    {
        utility::string_t refVal_setFailedNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("failed_node"))), refVal_setFailedNode );
        setFailedNode(refVal_setFailedNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("features"))))
    {
        utility::string_t refVal_setFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("features"))), refVal_setFeatures );
        setFeatures(refVal_setFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("federation_origin"))))
    {
        utility::string_t refVal_setFederationOrigin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("federation_origin"))), refVal_setFederationOrigin );
        setFederationOrigin(refVal_setFederationOrigin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("federation_siblings_active"))))
    {
        utility::string_t refVal_setFederationSiblingsActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("federation_siblings_active"))), refVal_setFederationSiblingsActive );
        setFederationSiblingsActive(refVal_setFederationSiblingsActive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("federation_siblings_viable"))))
    {
        utility::string_t refVal_setFederationSiblingsViable;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("federation_siblings_viable"))), refVal_setFederationSiblingsViable );
        setFederationSiblingsViable(refVal_setFederationSiblingsViable);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gres_detail"))))
    {
        std::vector<utility::string_t> refVal_setGresDetail;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gres_detail"))), refVal_setGresDetail );
        setGresDetail(refVal_setGresDetail);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_id"))))
    {
        int32_t refVal_setGroupId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_id"))), refVal_setGroupId );
        setGroupId(refVal_setGroupId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_name"))))
    {
        utility::string_t refVal_setGroupName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_name"))), refVal_setGroupName );
        setGroupName(refVal_setGroupName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("het_job_id"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setHetJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("het_job_id"))), refVal_setHetJobId );
        setHetJobId(refVal_setHetJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("het_job_id_set"))))
    {
        utility::string_t refVal_setHetJobIdSet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("het_job_id_set"))), refVal_setHetJobIdSet );
        setHetJobIdSet(refVal_setHetJobIdSet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("het_job_offset"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setHetJobOffset;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("het_job_offset"))), refVal_setHetJobOffset );
        setHetJobOffset(refVal_setHetJobOffset);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_id"))))
    {
        int32_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_id"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_resources"))))
    {
        std::shared_ptr<V0_0_39_job_res> refVal_setJobResources;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_resources"))), refVal_setJobResources );
        setJobResources(refVal_setJobResources);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_size_str"))))
    {
        std::vector<utility::string_t> refVal_setJobSizeStr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_size_str"))), refVal_setJobSizeStr );
        setJobSizeStr(refVal_setJobSizeStr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_state"))))
    {
        utility::string_t refVal_setJobState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_state"))), refVal_setJobState );
        setJobState(refVal_setJobState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_sched_evaluation"))))
    {
        int64_t refVal_setLastSchedEvaluation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_sched_evaluation"))), refVal_setLastSchedEvaluation );
        setLastSchedEvaluation(refVal_setLastSchedEvaluation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenses"))))
    {
        utility::string_t refVal_setLicenses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenses"))), refVal_setLicenses );
        setLicenses(refVal_setLicenses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_type"))))
    {
        std::vector<utility::string_t> refVal_setMailType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_type"))), refVal_setMailType );
        setMailType(refVal_setMailType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_user"))))
    {
        utility::string_t refVal_setMailUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_user"))), refVal_setMailUser );
        setMailUser(refVal_setMailUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_cpus"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMaxCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_cpus"))), refVal_setMaxCpus );
        setMaxCpus(refVal_setMaxCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_nodes"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMaxNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_nodes"))), refVal_setMaxNodes );
        setMaxNodes(refVal_setMaxNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcs_label"))))
    {
        utility::string_t refVal_setMcsLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcs_label"))), refVal_setMcsLabel );
        setMcsLabel(refVal_setMcsLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_tres"))))
    {
        utility::string_t refVal_setMemoryPerTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_tres"))), refVal_setMemoryPerTres );
        setMemoryPerTres(refVal_setMemoryPerTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("network"))))
    {
        utility::string_t refVal_setNetwork;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("network"))), refVal_setNetwork );
        setNetwork(refVal_setNetwork);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        utility::string_t refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nice"))))
    {
        int32_t refVal_setNice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nice"))), refVal_setNice );
        setNice(refVal_setNice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_core"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_core"))), refVal_setTasksPerCore );
        setTasksPerCore(refVal_setTasksPerCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_tres"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_tres"))), refVal_setTasksPerTres );
        setTasksPerTres(refVal_setTasksPerTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_node"))), refVal_setTasksPerNode );
        setTasksPerNode(refVal_setTasksPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_socket"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_socket"))), refVal_setTasksPerSocket );
        setTasksPerSocket(refVal_setTasksPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_board"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setTasksPerBoard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_board"))), refVal_setTasksPerBoard );
        setTasksPerBoard(refVal_setTasksPerBoard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus"))), refVal_setCpus );
        setCpus(refVal_setCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("node_count"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setNodeCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("node_count"))), refVal_setNodeCount );
        setNodeCount(refVal_setNodeCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTasks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks"))), refVal_setTasks );
        setTasks(refVal_setTasks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition"))))
    {
        utility::string_t refVal_setPartition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition"))), refVal_setPartition );
        setPartition(refVal_setPartition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prefer"))))
    {
        utility::string_t refVal_setPrefer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prefer"))), refVal_setPrefer );
        setPrefer(refVal_setPrefer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_cpu"))), refVal_setMemoryPerCpu );
        setMemoryPerCpu(refVal_setMemoryPerCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_node"))), refVal_setMemoryPerNode );
        setMemoryPerNode(refVal_setMemoryPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_cpus_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setMinimumCpusPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_cpus_per_node"))), refVal_setMinimumCpusPerNode );
        setMinimumCpusPerNode(refVal_setMinimumCpusPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_tmp_disk_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setMinimumTmpDiskPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_tmp_disk_per_node"))), refVal_setMinimumTmpDiskPerNode );
        setMinimumTmpDiskPerNode(refVal_setMinimumTmpDiskPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("power"))))
    {
        std::shared_ptr<V0_0_39_job_info_power> refVal_setPower;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("power"))), refVal_setPower );
        setPower(refVal_setPower);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preempt_time"))))
    {
        int64_t refVal_setPreemptTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preempt_time"))), refVal_setPreemptTime );
        setPreemptTime(refVal_setPreemptTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("preemptable_time"))))
    {
        int64_t refVal_setPreemptableTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("preemptable_time"))), refVal_setPreemptableTime );
        setPreemptableTime(refVal_setPreemptableTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("pre_sus_time"))))
    {
        int64_t refVal_setPreSusTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("pre_sus_time"))), refVal_setPreSusTime );
        setPreSusTime(refVal_setPreSusTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("profile"))))
    {
        std::vector<utility::string_t> refVal_setProfile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("profile"))), refVal_setProfile );
        setProfile(refVal_setProfile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qos"))))
    {
        utility::string_t refVal_setQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qos"))), refVal_setQos );
        setQos(refVal_setQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reboot"))))
    {
        bool refVal_setReboot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reboot"))), refVal_setReboot );
        setReboot(refVal_setReboot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required_nodes"))))
    {
        utility::string_t refVal_setRequiredNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required_nodes"))), refVal_setRequiredNodes );
        setRequiredNodes(refVal_setRequiredNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_switches"))))
    {
        int32_t refVal_setMinimumSwitches;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_switches"))), refVal_setMinimumSwitches );
        setMinimumSwitches(refVal_setMinimumSwitches);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requeue"))))
    {
        bool refVal_setRequeue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requeue"))), refVal_setRequeue );
        setRequeue(refVal_setRequeue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resize_time"))))
    {
        int64_t refVal_setResizeTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resize_time"))), refVal_setResizeTime );
        setResizeTime(refVal_setResizeTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("restart_cnt"))))
    {
        int32_t refVal_setRestartCnt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("restart_cnt"))), refVal_setRestartCnt );
        setRestartCnt(refVal_setRestartCnt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resv_name"))))
    {
        utility::string_t refVal_setResvName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resv_name"))), refVal_setResvName );
        setResvName(refVal_setResvName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("scheduled_nodes"))))
    {
        utility::string_t refVal_setScheduledNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("scheduled_nodes"))), refVal_setScheduledNodes );
        setScheduledNodes(refVal_setScheduledNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("selinux_context"))))
    {
        utility::string_t refVal_setSelinuxContext;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("selinux_context"))), refVal_setSelinuxContext );
        setSelinuxContext(refVal_setSelinuxContext);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shared"))))
    {
        std::vector<utility::string_t> refVal_setShared;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shared"))), refVal_setShared );
        setShared(refVal_setShared);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exclusive"))))
    {
        std::vector<utility::string_t> refVal_setExclusive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exclusive"))), refVal_setExclusive );
        setExclusive(refVal_setExclusive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("show_flags"))))
    {
        std::vector<utility::string_t> refVal_setShowFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("show_flags"))), refVal_setShowFlags );
        setShowFlags(refVal_setShowFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets_per_board"))))
    {
        int32_t refVal_setSocketsPerBoard;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets_per_board"))), refVal_setSocketsPerBoard );
        setSocketsPerBoard(refVal_setSocketsPerBoard);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setSocketsPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets_per_node"))), refVal_setSocketsPerNode );
        setSocketsPerNode(refVal_setSocketsPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("start_time"))))
    {
        int64_t refVal_setStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("start_time"))), refVal_setStartTime );
        setStartTime(refVal_setStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state_description"))))
    {
        utility::string_t refVal_setStateDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state_description"))), refVal_setStateDescription );
        setStateDescription(refVal_setStateDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state_reason"))))
    {
        utility::string_t refVal_setStateReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state_reason"))), refVal_setStateReason );
        setStateReason(refVal_setStateReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_error"))))
    {
        utility::string_t refVal_setStandardError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_error"))), refVal_setStandardError );
        setStandardError(refVal_setStandardError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_input"))))
    {
        utility::string_t refVal_setStandardInput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_input"))), refVal_setStandardInput );
        setStandardInput(refVal_setStandardInput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_output"))))
    {
        utility::string_t refVal_setStandardOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_output"))), refVal_setStandardOutput );
        setStandardOutput(refVal_setStandardOutput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submit_time"))))
    {
        int64_t refVal_setSubmitTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submit_time"))), refVal_setSubmitTime );
        setSubmitTime(refVal_setSubmitTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("suspend_time"))))
    {
        int64_t refVal_setSuspendTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("suspend_time"))), refVal_setSuspendTime );
        setSuspendTime(refVal_setSuspendTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("system_comment"))))
    {
        utility::string_t refVal_setSystemComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("system_comment"))), refVal_setSystemComment );
        setSystemComment(refVal_setSystemComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_limit"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_limit"))), refVal_setTimeLimit );
        setTimeLimit(refVal_setTimeLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_minimum"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setTimeMinimum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_minimum"))), refVal_setTimeMinimum );
        setTimeMinimum(refVal_setTimeMinimum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        std::shared_ptr<V0_0_39_uint16_no_val> refVal_setThreadsPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threads_per_core"))), refVal_setThreadsPerCore );
        setThreadsPerCore(refVal_setThreadsPerCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_bind"))))
    {
        utility::string_t refVal_setTresBind;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_bind"))), refVal_setTresBind );
        setTresBind(refVal_setTresBind);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_freq"))))
    {
        utility::string_t refVal_setTresFreq;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_freq"))), refVal_setTresFreq );
        setTresFreq(refVal_setTresFreq);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_job"))))
    {
        utility::string_t refVal_setTresPerJob;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_job"))), refVal_setTresPerJob );
        setTresPerJob(refVal_setTresPerJob);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_node"))))
    {
        utility::string_t refVal_setTresPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_node"))), refVal_setTresPerNode );
        setTresPerNode(refVal_setTresPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_socket"))))
    {
        utility::string_t refVal_setTresPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_socket"))), refVal_setTresPerSocket );
        setTresPerSocket(refVal_setTresPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_per_task"))))
    {
        utility::string_t refVal_setTresPerTask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_per_task"))), refVal_setTresPerTask );
        setTresPerTask(refVal_setTresPerTask);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_req_str"))))
    {
        utility::string_t refVal_setTresReqStr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_req_str"))), refVal_setTresReqStr );
        setTresReqStr(refVal_setTresReqStr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_alloc_str"))))
    {
        utility::string_t refVal_setTresAllocStr;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_alloc_str"))), refVal_setTresAllocStr );
        setTresAllocStr(refVal_setTresAllocStr);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        int32_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_name"))))
    {
        utility::string_t refVal_setUserName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_name"))), refVal_setUserName );
        setUserName(refVal_setUserName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("maximum_switch_wait_time"))))
    {
        int32_t refVal_setMaximumSwitchWaitTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("maximum_switch_wait_time"))), refVal_setMaximumSwitchWaitTime );
        setMaximumSwitchWaitTime(refVal_setMaximumSwitchWaitTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckey"))))
    {
        utility::string_t refVal_setWckey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckey"))), refVal_setWckey );
        setWckey(refVal_setWckey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_working_directory"))))
    {
        utility::string_t refVal_setCurrentWorkingDirectory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_working_directory"))), refVal_setCurrentWorkingDirectory );
        setCurrentWorkingDirectory(refVal_setCurrentWorkingDirectory);
    }
    return ok;
}

utility::string_t V0_0_39_job_info::getAccount() const
{
    return m_Account;
}

void V0_0_39_job_info::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool V0_0_39_job_info::accountIsSet() const
{
    return m_AccountIsSet;
}

void V0_0_39_job_info::unsetAccount()
{
    m_AccountIsSet = false;
}
int64_t V0_0_39_job_info::getAccrueTime() const
{
    return m_Accrue_time;
}

void V0_0_39_job_info::setAccrueTime(int64_t value)
{
    m_Accrue_time = value;
    m_Accrue_timeIsSet = true;
}

bool V0_0_39_job_info::accrueTimeIsSet() const
{
    return m_Accrue_timeIsSet;
}

void V0_0_39_job_info::unsetAccrue_time()
{
    m_Accrue_timeIsSet = false;
}
utility::string_t V0_0_39_job_info::getAdminComment() const
{
    return m_Admin_comment;
}

void V0_0_39_job_info::setAdminComment(const utility::string_t& value)
{
    m_Admin_comment = value;
    m_Admin_commentIsSet = true;
}

bool V0_0_39_job_info::adminCommentIsSet() const
{
    return m_Admin_commentIsSet;
}

void V0_0_39_job_info::unsetAdmin_comment()
{
    m_Admin_commentIsSet = false;
}
utility::string_t V0_0_39_job_info::getAllocatingNode() const
{
    return m_Allocating_node;
}

void V0_0_39_job_info::setAllocatingNode(const utility::string_t& value)
{
    m_Allocating_node = value;
    m_Allocating_nodeIsSet = true;
}

bool V0_0_39_job_info::allocatingNodeIsSet() const
{
    return m_Allocating_nodeIsSet;
}

void V0_0_39_job_info::unsetAllocating_node()
{
    m_Allocating_nodeIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getArrayJobId() const
{
    return m_Array_job_id;
}

void V0_0_39_job_info::setArrayJobId(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Array_job_id = value;
    m_Array_job_idIsSet = true;
}

bool V0_0_39_job_info::arrayJobIdIsSet() const
{
    return m_Array_job_idIsSet;
}

void V0_0_39_job_info::unsetArray_job_id()
{
    m_Array_job_idIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getArrayTaskId() const
{
    return m_Array_task_id;
}

void V0_0_39_job_info::setArrayTaskId(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Array_task_id = value;
    m_Array_task_idIsSet = true;
}

bool V0_0_39_job_info::arrayTaskIdIsSet() const
{
    return m_Array_task_idIsSet;
}

void V0_0_39_job_info::unsetArray_task_id()
{
    m_Array_task_idIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getArrayMaxTasks() const
{
    return m_Array_max_tasks;
}

void V0_0_39_job_info::setArrayMaxTasks(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Array_max_tasks = value;
    m_Array_max_tasksIsSet = true;
}

bool V0_0_39_job_info::arrayMaxTasksIsSet() const
{
    return m_Array_max_tasksIsSet;
}

void V0_0_39_job_info::unsetArray_max_tasks()
{
    m_Array_max_tasksIsSet = false;
}
utility::string_t V0_0_39_job_info::getArrayTaskString() const
{
    return m_Array_task_string;
}

void V0_0_39_job_info::setArrayTaskString(const utility::string_t& value)
{
    m_Array_task_string = value;
    m_Array_task_stringIsSet = true;
}

bool V0_0_39_job_info::arrayTaskStringIsSet() const
{
    return m_Array_task_stringIsSet;
}

void V0_0_39_job_info::unsetArray_task_string()
{
    m_Array_task_stringIsSet = false;
}
int32_t V0_0_39_job_info::getAssociationId() const
{
    return m_Association_id;
}

void V0_0_39_job_info::setAssociationId(int32_t value)
{
    m_Association_id = value;
    m_Association_idIsSet = true;
}

bool V0_0_39_job_info::associationIdIsSet() const
{
    return m_Association_idIsSet;
}

void V0_0_39_job_info::unsetAssociation_id()
{
    m_Association_idIsSet = false;
}
utility::string_t V0_0_39_job_info::getBatchFeatures() const
{
    return m_Batch_features;
}

void V0_0_39_job_info::setBatchFeatures(const utility::string_t& value)
{
    m_Batch_features = value;
    m_Batch_featuresIsSet = true;
}

bool V0_0_39_job_info::batchFeaturesIsSet() const
{
    return m_Batch_featuresIsSet;
}

void V0_0_39_job_info::unsetBatch_features()
{
    m_Batch_featuresIsSet = false;
}
bool V0_0_39_job_info::isBatchFlag() const
{
    return m_Batch_flag;
}

void V0_0_39_job_info::setBatchFlag(bool value)
{
    m_Batch_flag = value;
    m_Batch_flagIsSet = true;
}

bool V0_0_39_job_info::batchFlagIsSet() const
{
    return m_Batch_flagIsSet;
}

void V0_0_39_job_info::unsetBatch_flag()
{
    m_Batch_flagIsSet = false;
}
utility::string_t V0_0_39_job_info::getBatchHost() const
{
    return m_Batch_host;
}

void V0_0_39_job_info::setBatchHost(const utility::string_t& value)
{
    m_Batch_host = value;
    m_Batch_hostIsSet = true;
}

bool V0_0_39_job_info::batchHostIsSet() const
{
    return m_Batch_hostIsSet;
}

void V0_0_39_job_info::unsetBatch_host()
{
    m_Batch_hostIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getFlags()
{
    return m_Flags;
}

void V0_0_39_job_info::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool V0_0_39_job_info::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void V0_0_39_job_info::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t V0_0_39_job_info::getBurstBuffer() const
{
    return m_Burst_buffer;
}

void V0_0_39_job_info::setBurstBuffer(const utility::string_t& value)
{
    m_Burst_buffer = value;
    m_Burst_bufferIsSet = true;
}

bool V0_0_39_job_info::burstBufferIsSet() const
{
    return m_Burst_bufferIsSet;
}

void V0_0_39_job_info::unsetBurst_buffer()
{
    m_Burst_bufferIsSet = false;
}
utility::string_t V0_0_39_job_info::getBurstBufferState() const
{
    return m_Burst_buffer_state;
}

void V0_0_39_job_info::setBurstBufferState(const utility::string_t& value)
{
    m_Burst_buffer_state = value;
    m_Burst_buffer_stateIsSet = true;
}

bool V0_0_39_job_info::burstBufferStateIsSet() const
{
    return m_Burst_buffer_stateIsSet;
}

void V0_0_39_job_info::unsetBurst_buffer_state()
{
    m_Burst_buffer_stateIsSet = false;
}
utility::string_t V0_0_39_job_info::getCluster() const
{
    return m_Cluster;
}

void V0_0_39_job_info::setCluster(const utility::string_t& value)
{
    m_Cluster = value;
    m_ClusterIsSet = true;
}

bool V0_0_39_job_info::clusterIsSet() const
{
    return m_ClusterIsSet;
}

void V0_0_39_job_info::unsetCluster()
{
    m_ClusterIsSet = false;
}
utility::string_t V0_0_39_job_info::getClusterFeatures() const
{
    return m_Cluster_features;
}

void V0_0_39_job_info::setClusterFeatures(const utility::string_t& value)
{
    m_Cluster_features = value;
    m_Cluster_featuresIsSet = true;
}

bool V0_0_39_job_info::clusterFeaturesIsSet() const
{
    return m_Cluster_featuresIsSet;
}

void V0_0_39_job_info::unsetCluster_features()
{
    m_Cluster_featuresIsSet = false;
}
utility::string_t V0_0_39_job_info::getCommand() const
{
    return m_Command;
}

void V0_0_39_job_info::setCommand(const utility::string_t& value)
{
    m_Command = value;
    m_CommandIsSet = true;
}

bool V0_0_39_job_info::commandIsSet() const
{
    return m_CommandIsSet;
}

void V0_0_39_job_info::unsetCommand()
{
    m_CommandIsSet = false;
}
utility::string_t V0_0_39_job_info::getComment() const
{
    return m_Comment;
}

void V0_0_39_job_info::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool V0_0_39_job_info::commentIsSet() const
{
    return m_CommentIsSet;
}

void V0_0_39_job_info::unsetComment()
{
    m_CommentIsSet = false;
}
utility::string_t V0_0_39_job_info::getContainer() const
{
    return m_Container;
}

void V0_0_39_job_info::setContainer(const utility::string_t& value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool V0_0_39_job_info::containerIsSet() const
{
    return m_ContainerIsSet;
}

void V0_0_39_job_info::unsetContainer()
{
    m_ContainerIsSet = false;
}
utility::string_t V0_0_39_job_info::getContainerId() const
{
    return m_Container_id;
}

void V0_0_39_job_info::setContainerId(const utility::string_t& value)
{
    m_Container_id = value;
    m_Container_idIsSet = true;
}

bool V0_0_39_job_info::containerIdIsSet() const
{
    return m_Container_idIsSet;
}

void V0_0_39_job_info::unsetContainer_id()
{
    m_Container_idIsSet = false;
}
bool V0_0_39_job_info::isContiguous() const
{
    return m_Contiguous;
}

void V0_0_39_job_info::setContiguous(bool value)
{
    m_Contiguous = value;
    m_ContiguousIsSet = true;
}

bool V0_0_39_job_info::contiguousIsSet() const
{
    return m_ContiguousIsSet;
}

void V0_0_39_job_info::unsetContiguous()
{
    m_ContiguousIsSet = false;
}
int32_t V0_0_39_job_info::getCoreSpec() const
{
    return m_Core_spec;
}

void V0_0_39_job_info::setCoreSpec(int32_t value)
{
    m_Core_spec = value;
    m_Core_specIsSet = true;
}

bool V0_0_39_job_info::coreSpecIsSet() const
{
    return m_Core_specIsSet;
}

void V0_0_39_job_info::unsetCore_spec()
{
    m_Core_specIsSet = false;
}
int32_t V0_0_39_job_info::getThreadSpec() const
{
    return m_Thread_spec;
}

void V0_0_39_job_info::setThreadSpec(int32_t value)
{
    m_Thread_spec = value;
    m_Thread_specIsSet = true;
}

bool V0_0_39_job_info::threadSpecIsSet() const
{
    return m_Thread_specIsSet;
}

void V0_0_39_job_info::unsetThread_spec()
{
    m_Thread_specIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getCoresPerSocket() const
{
    return m_Cores_per_socket;
}

void V0_0_39_job_info::setCoresPerSocket(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Cores_per_socket = value;
    m_Cores_per_socketIsSet = true;
}

bool V0_0_39_job_info::coresPerSocketIsSet() const
{
    return m_Cores_per_socketIsSet;
}

void V0_0_39_job_info::unsetCores_per_socket()
{
    m_Cores_per_socketIsSet = false;
}
std::shared_ptr<V0_0_39_float64_no_val> V0_0_39_job_info::getBillableTres() const
{
    return m_Billable_tres;
}

void V0_0_39_job_info::setBillableTres(const std::shared_ptr<V0_0_39_float64_no_val>& value)
{
    m_Billable_tres = value;
    m_Billable_tresIsSet = true;
}

bool V0_0_39_job_info::billableTresIsSet() const
{
    return m_Billable_tresIsSet;
}

void V0_0_39_job_info::unsetBillable_tres()
{
    m_Billable_tresIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getCpusPerTask() const
{
    return m_Cpus_per_task;
}

void V0_0_39_job_info::setCpusPerTask(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Cpus_per_task = value;
    m_Cpus_per_taskIsSet = true;
}

bool V0_0_39_job_info::cpusPerTaskIsSet() const
{
    return m_Cpus_per_taskIsSet;
}

void V0_0_39_job_info::unsetCpus_per_task()
{
    m_Cpus_per_taskIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getCpuFrequencyMinimum() const
{
    return m_Cpu_frequency_minimum;
}

void V0_0_39_job_info::setCpuFrequencyMinimum(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Cpu_frequency_minimum = value;
    m_Cpu_frequency_minimumIsSet = true;
}

bool V0_0_39_job_info::cpuFrequencyMinimumIsSet() const
{
    return m_Cpu_frequency_minimumIsSet;
}

void V0_0_39_job_info::unsetCpu_frequency_minimum()
{
    m_Cpu_frequency_minimumIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getCpuFrequencyMaximum() const
{
    return m_Cpu_frequency_maximum;
}

void V0_0_39_job_info::setCpuFrequencyMaximum(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Cpu_frequency_maximum = value;
    m_Cpu_frequency_maximumIsSet = true;
}

bool V0_0_39_job_info::cpuFrequencyMaximumIsSet() const
{
    return m_Cpu_frequency_maximumIsSet;
}

void V0_0_39_job_info::unsetCpu_frequency_maximum()
{
    m_Cpu_frequency_maximumIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getCpuFrequencyGovernor() const
{
    return m_Cpu_frequency_governor;
}

void V0_0_39_job_info::setCpuFrequencyGovernor(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Cpu_frequency_governor = value;
    m_Cpu_frequency_governorIsSet = true;
}

bool V0_0_39_job_info::cpuFrequencyGovernorIsSet() const
{
    return m_Cpu_frequency_governorIsSet;
}

void V0_0_39_job_info::unsetCpu_frequency_governor()
{
    m_Cpu_frequency_governorIsSet = false;
}
utility::string_t V0_0_39_job_info::getCpusPerTres() const
{
    return m_Cpus_per_tres;
}

void V0_0_39_job_info::setCpusPerTres(const utility::string_t& value)
{
    m_Cpus_per_tres = value;
    m_Cpus_per_tresIsSet = true;
}

bool V0_0_39_job_info::cpusPerTresIsSet() const
{
    return m_Cpus_per_tresIsSet;
}

void V0_0_39_job_info::unsetCpus_per_tres()
{
    m_Cpus_per_tresIsSet = false;
}
utility::string_t V0_0_39_job_info::getCron() const
{
    return m_Cron;
}

void V0_0_39_job_info::setCron(const utility::string_t& value)
{
    m_Cron = value;
    m_CronIsSet = true;
}

bool V0_0_39_job_info::cronIsSet() const
{
    return m_CronIsSet;
}

void V0_0_39_job_info::unsetCron()
{
    m_CronIsSet = false;
}
int64_t V0_0_39_job_info::getDeadline() const
{
    return m_Deadline;
}

void V0_0_39_job_info::setDeadline(int64_t value)
{
    m_Deadline = value;
    m_DeadlineIsSet = true;
}

bool V0_0_39_job_info::deadlineIsSet() const
{
    return m_DeadlineIsSet;
}

void V0_0_39_job_info::unsetDeadline()
{
    m_DeadlineIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getDelayBoot() const
{
    return m_Delay_boot;
}

void V0_0_39_job_info::setDelayBoot(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Delay_boot = value;
    m_Delay_bootIsSet = true;
}

bool V0_0_39_job_info::delayBootIsSet() const
{
    return m_Delay_bootIsSet;
}

void V0_0_39_job_info::unsetDelay_boot()
{
    m_Delay_bootIsSet = false;
}
utility::string_t V0_0_39_job_info::getDependency() const
{
    return m_Dependency;
}

void V0_0_39_job_info::setDependency(const utility::string_t& value)
{
    m_Dependency = value;
    m_DependencyIsSet = true;
}

bool V0_0_39_job_info::dependencyIsSet() const
{
    return m_DependencyIsSet;
}

void V0_0_39_job_info::unsetDependency()
{
    m_DependencyIsSet = false;
}
int32_t V0_0_39_job_info::getDerivedExitCode() const
{
    return m_Derived_exit_code;
}

void V0_0_39_job_info::setDerivedExitCode(int32_t value)
{
    m_Derived_exit_code = value;
    m_Derived_exit_codeIsSet = true;
}

bool V0_0_39_job_info::derivedExitCodeIsSet() const
{
    return m_Derived_exit_codeIsSet;
}

void V0_0_39_job_info::unsetDerived_exit_code()
{
    m_Derived_exit_codeIsSet = false;
}
int64_t V0_0_39_job_info::getEligibleTime() const
{
    return m_Eligible_time;
}

void V0_0_39_job_info::setEligibleTime(int64_t value)
{
    m_Eligible_time = value;
    m_Eligible_timeIsSet = true;
}

bool V0_0_39_job_info::eligibleTimeIsSet() const
{
    return m_Eligible_timeIsSet;
}

void V0_0_39_job_info::unsetEligible_time()
{
    m_Eligible_timeIsSet = false;
}
int64_t V0_0_39_job_info::getEndTime() const
{
    return m_End_time;
}

void V0_0_39_job_info::setEndTime(int64_t value)
{
    m_End_time = value;
    m_End_timeIsSet = true;
}

bool V0_0_39_job_info::endTimeIsSet() const
{
    return m_End_timeIsSet;
}

void V0_0_39_job_info::unsetEnd_time()
{
    m_End_timeIsSet = false;
}
utility::string_t V0_0_39_job_info::getExcludedNodes() const
{
    return m_Excluded_nodes;
}

void V0_0_39_job_info::setExcludedNodes(const utility::string_t& value)
{
    m_Excluded_nodes = value;
    m_Excluded_nodesIsSet = true;
}

bool V0_0_39_job_info::excludedNodesIsSet() const
{
    return m_Excluded_nodesIsSet;
}

void V0_0_39_job_info::unsetExcluded_nodes()
{
    m_Excluded_nodesIsSet = false;
}
int32_t V0_0_39_job_info::getExitCode() const
{
    return m_Exit_code;
}

void V0_0_39_job_info::setExitCode(int32_t value)
{
    m_Exit_code = value;
    m_Exit_codeIsSet = true;
}

bool V0_0_39_job_info::exitCodeIsSet() const
{
    return m_Exit_codeIsSet;
}

void V0_0_39_job_info::unsetExit_code()
{
    m_Exit_codeIsSet = false;
}
utility::string_t V0_0_39_job_info::getExtra() const
{
    return m_Extra;
}

void V0_0_39_job_info::setExtra(const utility::string_t& value)
{
    m_Extra = value;
    m_ExtraIsSet = true;
}

bool V0_0_39_job_info::extraIsSet() const
{
    return m_ExtraIsSet;
}

void V0_0_39_job_info::unsetExtra()
{
    m_ExtraIsSet = false;
}
utility::string_t V0_0_39_job_info::getFailedNode() const
{
    return m_Failed_node;
}

void V0_0_39_job_info::setFailedNode(const utility::string_t& value)
{
    m_Failed_node = value;
    m_Failed_nodeIsSet = true;
}

bool V0_0_39_job_info::failedNodeIsSet() const
{
    return m_Failed_nodeIsSet;
}

void V0_0_39_job_info::unsetFailed_node()
{
    m_Failed_nodeIsSet = false;
}
utility::string_t V0_0_39_job_info::getFeatures() const
{
    return m_Features;
}

void V0_0_39_job_info::setFeatures(const utility::string_t& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool V0_0_39_job_info::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void V0_0_39_job_info::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
utility::string_t V0_0_39_job_info::getFederationOrigin() const
{
    return m_Federation_origin;
}

void V0_0_39_job_info::setFederationOrigin(const utility::string_t& value)
{
    m_Federation_origin = value;
    m_Federation_originIsSet = true;
}

bool V0_0_39_job_info::federationOriginIsSet() const
{
    return m_Federation_originIsSet;
}

void V0_0_39_job_info::unsetFederation_origin()
{
    m_Federation_originIsSet = false;
}
utility::string_t V0_0_39_job_info::getFederationSiblingsActive() const
{
    return m_Federation_siblings_active;
}

void V0_0_39_job_info::setFederationSiblingsActive(const utility::string_t& value)
{
    m_Federation_siblings_active = value;
    m_Federation_siblings_activeIsSet = true;
}

bool V0_0_39_job_info::federationSiblingsActiveIsSet() const
{
    return m_Federation_siblings_activeIsSet;
}

void V0_0_39_job_info::unsetFederation_siblings_active()
{
    m_Federation_siblings_activeIsSet = false;
}
utility::string_t V0_0_39_job_info::getFederationSiblingsViable() const
{
    return m_Federation_siblings_viable;
}

void V0_0_39_job_info::setFederationSiblingsViable(const utility::string_t& value)
{
    m_Federation_siblings_viable = value;
    m_Federation_siblings_viableIsSet = true;
}

bool V0_0_39_job_info::federationSiblingsViableIsSet() const
{
    return m_Federation_siblings_viableIsSet;
}

void V0_0_39_job_info::unsetFederation_siblings_viable()
{
    m_Federation_siblings_viableIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getGresDetail()
{
    return m_Gres_detail;
}

void V0_0_39_job_info::setGresDetail(const std::vector<utility::string_t>& value)
{
    m_Gres_detail = value;
    m_Gres_detailIsSet = true;
}

bool V0_0_39_job_info::gresDetailIsSet() const
{
    return m_Gres_detailIsSet;
}

void V0_0_39_job_info::unsetGres_detail()
{
    m_Gres_detailIsSet = false;
}
int32_t V0_0_39_job_info::getGroupId() const
{
    return m_Group_id;
}

void V0_0_39_job_info::setGroupId(int32_t value)
{
    m_Group_id = value;
    m_Group_idIsSet = true;
}

bool V0_0_39_job_info::groupIdIsSet() const
{
    return m_Group_idIsSet;
}

void V0_0_39_job_info::unsetGroup_id()
{
    m_Group_idIsSet = false;
}
utility::string_t V0_0_39_job_info::getGroupName() const
{
    return m_Group_name;
}

void V0_0_39_job_info::setGroupName(const utility::string_t& value)
{
    m_Group_name = value;
    m_Group_nameIsSet = true;
}

bool V0_0_39_job_info::groupNameIsSet() const
{
    return m_Group_nameIsSet;
}

void V0_0_39_job_info::unsetGroup_name()
{
    m_Group_nameIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getHetJobId() const
{
    return m_Het_job_id;
}

void V0_0_39_job_info::setHetJobId(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Het_job_id = value;
    m_Het_job_idIsSet = true;
}

bool V0_0_39_job_info::hetJobIdIsSet() const
{
    return m_Het_job_idIsSet;
}

void V0_0_39_job_info::unsetHet_job_id()
{
    m_Het_job_idIsSet = false;
}
utility::string_t V0_0_39_job_info::getHetJobIdSet() const
{
    return m_Het_job_id_set;
}

void V0_0_39_job_info::setHetJobIdSet(const utility::string_t& value)
{
    m_Het_job_id_set = value;
    m_Het_job_id_setIsSet = true;
}

bool V0_0_39_job_info::hetJobIdSetIsSet() const
{
    return m_Het_job_id_setIsSet;
}

void V0_0_39_job_info::unsetHet_job_id_set()
{
    m_Het_job_id_setIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getHetJobOffset() const
{
    return m_Het_job_offset;
}

void V0_0_39_job_info::setHetJobOffset(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Het_job_offset = value;
    m_Het_job_offsetIsSet = true;
}

bool V0_0_39_job_info::hetJobOffsetIsSet() const
{
    return m_Het_job_offsetIsSet;
}

void V0_0_39_job_info::unsetHet_job_offset()
{
    m_Het_job_offsetIsSet = false;
}
int32_t V0_0_39_job_info::getJobId() const
{
    return m_Job_id;
}

void V0_0_39_job_info::setJobId(int32_t value)
{
    m_Job_id = value;
    m_Job_idIsSet = true;
}

bool V0_0_39_job_info::jobIdIsSet() const
{
    return m_Job_idIsSet;
}

void V0_0_39_job_info::unsetJob_id()
{
    m_Job_idIsSet = false;
}
std::shared_ptr<V0_0_39_job_res> V0_0_39_job_info::getJobResources() const
{
    return m_Job_resources;
}

void V0_0_39_job_info::setJobResources(const std::shared_ptr<V0_0_39_job_res>& value)
{
    m_Job_resources = value;
    m_Job_resourcesIsSet = true;
}

bool V0_0_39_job_info::jobResourcesIsSet() const
{
    return m_Job_resourcesIsSet;
}

void V0_0_39_job_info::unsetJob_resources()
{
    m_Job_resourcesIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getJobSizeStr()
{
    return m_Job_size_str;
}

void V0_0_39_job_info::setJobSizeStr(const std::vector<utility::string_t>& value)
{
    m_Job_size_str = value;
    m_Job_size_strIsSet = true;
}

bool V0_0_39_job_info::jobSizeStrIsSet() const
{
    return m_Job_size_strIsSet;
}

void V0_0_39_job_info::unsetJob_size_str()
{
    m_Job_size_strIsSet = false;
}
utility::string_t V0_0_39_job_info::getJobState() const
{
    return m_Job_state;
}

void V0_0_39_job_info::setJobState(const utility::string_t& value)
{
    m_Job_state = value;
    m_Job_stateIsSet = true;
}

bool V0_0_39_job_info::jobStateIsSet() const
{
    return m_Job_stateIsSet;
}

void V0_0_39_job_info::unsetJob_state()
{
    m_Job_stateIsSet = false;
}
int64_t V0_0_39_job_info::getLastSchedEvaluation() const
{
    return m_Last_sched_evaluation;
}

void V0_0_39_job_info::setLastSchedEvaluation(int64_t value)
{
    m_Last_sched_evaluation = value;
    m_Last_sched_evaluationIsSet = true;
}

bool V0_0_39_job_info::lastSchedEvaluationIsSet() const
{
    return m_Last_sched_evaluationIsSet;
}

void V0_0_39_job_info::unsetLast_sched_evaluation()
{
    m_Last_sched_evaluationIsSet = false;
}
utility::string_t V0_0_39_job_info::getLicenses() const
{
    return m_Licenses;
}

void V0_0_39_job_info::setLicenses(const utility::string_t& value)
{
    m_Licenses = value;
    m_LicensesIsSet = true;
}

bool V0_0_39_job_info::licensesIsSet() const
{
    return m_LicensesIsSet;
}

void V0_0_39_job_info::unsetLicenses()
{
    m_LicensesIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getMailType()
{
    return m_Mail_type;
}

void V0_0_39_job_info::setMailType(const std::vector<utility::string_t>& value)
{
    m_Mail_type = value;
    m_Mail_typeIsSet = true;
}

bool V0_0_39_job_info::mailTypeIsSet() const
{
    return m_Mail_typeIsSet;
}

void V0_0_39_job_info::unsetMail_type()
{
    m_Mail_typeIsSet = false;
}
utility::string_t V0_0_39_job_info::getMailUser() const
{
    return m_Mail_user;
}

void V0_0_39_job_info::setMailUser(const utility::string_t& value)
{
    m_Mail_user = value;
    m_Mail_userIsSet = true;
}

bool V0_0_39_job_info::mailUserIsSet() const
{
    return m_Mail_userIsSet;
}

void V0_0_39_job_info::unsetMail_user()
{
    m_Mail_userIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getMaxCpus() const
{
    return m_Max_cpus;
}

void V0_0_39_job_info::setMaxCpus(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Max_cpus = value;
    m_Max_cpusIsSet = true;
}

bool V0_0_39_job_info::maxCpusIsSet() const
{
    return m_Max_cpusIsSet;
}

void V0_0_39_job_info::unsetMax_cpus()
{
    m_Max_cpusIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getMaxNodes() const
{
    return m_Max_nodes;
}

void V0_0_39_job_info::setMaxNodes(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Max_nodes = value;
    m_Max_nodesIsSet = true;
}

bool V0_0_39_job_info::maxNodesIsSet() const
{
    return m_Max_nodesIsSet;
}

void V0_0_39_job_info::unsetMax_nodes()
{
    m_Max_nodesIsSet = false;
}
utility::string_t V0_0_39_job_info::getMcsLabel() const
{
    return m_Mcs_label;
}

void V0_0_39_job_info::setMcsLabel(const utility::string_t& value)
{
    m_Mcs_label = value;
    m_Mcs_labelIsSet = true;
}

bool V0_0_39_job_info::mcsLabelIsSet() const
{
    return m_Mcs_labelIsSet;
}

void V0_0_39_job_info::unsetMcs_label()
{
    m_Mcs_labelIsSet = false;
}
utility::string_t V0_0_39_job_info::getMemoryPerTres() const
{
    return m_Memory_per_tres;
}

void V0_0_39_job_info::setMemoryPerTres(const utility::string_t& value)
{
    m_Memory_per_tres = value;
    m_Memory_per_tresIsSet = true;
}

bool V0_0_39_job_info::memoryPerTresIsSet() const
{
    return m_Memory_per_tresIsSet;
}

void V0_0_39_job_info::unsetMemory_per_tres()
{
    m_Memory_per_tresIsSet = false;
}
utility::string_t V0_0_39_job_info::getName() const
{
    return m_Name;
}

void V0_0_39_job_info::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_39_job_info::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_39_job_info::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t V0_0_39_job_info::getNetwork() const
{
    return m_Network;
}

void V0_0_39_job_info::setNetwork(const utility::string_t& value)
{
    m_Network = value;
    m_NetworkIsSet = true;
}

bool V0_0_39_job_info::networkIsSet() const
{
    return m_NetworkIsSet;
}

void V0_0_39_job_info::unsetNetwork()
{
    m_NetworkIsSet = false;
}
utility::string_t V0_0_39_job_info::getNodes() const
{
    return m_Nodes;
}

void V0_0_39_job_info::setNodes(const utility::string_t& value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool V0_0_39_job_info::nodesIsSet() const
{
    return m_NodesIsSet;
}

void V0_0_39_job_info::unsetNodes()
{
    m_NodesIsSet = false;
}
int32_t V0_0_39_job_info::getNice() const
{
    return m_Nice;
}

void V0_0_39_job_info::setNice(int32_t value)
{
    m_Nice = value;
    m_NiceIsSet = true;
}

bool V0_0_39_job_info::niceIsSet() const
{
    return m_NiceIsSet;
}

void V0_0_39_job_info::unsetNice()
{
    m_NiceIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getTasksPerCore() const
{
    return m_Tasks_per_core;
}

void V0_0_39_job_info::setTasksPerCore(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Tasks_per_core = value;
    m_Tasks_per_coreIsSet = true;
}

bool V0_0_39_job_info::tasksPerCoreIsSet() const
{
    return m_Tasks_per_coreIsSet;
}

void V0_0_39_job_info::unsetTasks_per_core()
{
    m_Tasks_per_coreIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getTasksPerTres() const
{
    return m_Tasks_per_tres;
}

void V0_0_39_job_info::setTasksPerTres(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Tasks_per_tres = value;
    m_Tasks_per_tresIsSet = true;
}

bool V0_0_39_job_info::tasksPerTresIsSet() const
{
    return m_Tasks_per_tresIsSet;
}

void V0_0_39_job_info::unsetTasks_per_tres()
{
    m_Tasks_per_tresIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getTasksPerNode() const
{
    return m_Tasks_per_node;
}

void V0_0_39_job_info::setTasksPerNode(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Tasks_per_node = value;
    m_Tasks_per_nodeIsSet = true;
}

bool V0_0_39_job_info::tasksPerNodeIsSet() const
{
    return m_Tasks_per_nodeIsSet;
}

void V0_0_39_job_info::unsetTasks_per_node()
{
    m_Tasks_per_nodeIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getTasksPerSocket() const
{
    return m_Tasks_per_socket;
}

void V0_0_39_job_info::setTasksPerSocket(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Tasks_per_socket = value;
    m_Tasks_per_socketIsSet = true;
}

bool V0_0_39_job_info::tasksPerSocketIsSet() const
{
    return m_Tasks_per_socketIsSet;
}

void V0_0_39_job_info::unsetTasks_per_socket()
{
    m_Tasks_per_socketIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getTasksPerBoard() const
{
    return m_Tasks_per_board;
}

void V0_0_39_job_info::setTasksPerBoard(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Tasks_per_board = value;
    m_Tasks_per_boardIsSet = true;
}

bool V0_0_39_job_info::tasksPerBoardIsSet() const
{
    return m_Tasks_per_boardIsSet;
}

void V0_0_39_job_info::unsetTasks_per_board()
{
    m_Tasks_per_boardIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getCpus() const
{
    return m_Cpus;
}

void V0_0_39_job_info::setCpus(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Cpus = value;
    m_CpusIsSet = true;
}

bool V0_0_39_job_info::cpusIsSet() const
{
    return m_CpusIsSet;
}

void V0_0_39_job_info::unsetCpus()
{
    m_CpusIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getNodeCount() const
{
    return m_Node_count;
}

void V0_0_39_job_info::setNodeCount(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Node_count = value;
    m_Node_countIsSet = true;
}

bool V0_0_39_job_info::nodeCountIsSet() const
{
    return m_Node_countIsSet;
}

void V0_0_39_job_info::unsetNode_count()
{
    m_Node_countIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getTasks() const
{
    return m_Tasks;
}

void V0_0_39_job_info::setTasks(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Tasks = value;
    m_TasksIsSet = true;
}

bool V0_0_39_job_info::tasksIsSet() const
{
    return m_TasksIsSet;
}

void V0_0_39_job_info::unsetTasks()
{
    m_TasksIsSet = false;
}
utility::string_t V0_0_39_job_info::getPartition() const
{
    return m_Partition;
}

void V0_0_39_job_info::setPartition(const utility::string_t& value)
{
    m_Partition = value;
    m_PartitionIsSet = true;
}

bool V0_0_39_job_info::partitionIsSet() const
{
    return m_PartitionIsSet;
}

void V0_0_39_job_info::unsetPartition()
{
    m_PartitionIsSet = false;
}
utility::string_t V0_0_39_job_info::getPrefer() const
{
    return m_Prefer;
}

void V0_0_39_job_info::setPrefer(const utility::string_t& value)
{
    m_Prefer = value;
    m_PreferIsSet = true;
}

bool V0_0_39_job_info::preferIsSet() const
{
    return m_PreferIsSet;
}

void V0_0_39_job_info::unsetPrefer()
{
    m_PreferIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_job_info::getMemoryPerCpu() const
{
    return m_Memory_per_cpu;
}

void V0_0_39_job_info::setMemoryPerCpu(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Memory_per_cpu = value;
    m_Memory_per_cpuIsSet = true;
}

bool V0_0_39_job_info::memoryPerCpuIsSet() const
{
    return m_Memory_per_cpuIsSet;
}

void V0_0_39_job_info::unsetMemory_per_cpu()
{
    m_Memory_per_cpuIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_job_info::getMemoryPerNode() const
{
    return m_Memory_per_node;
}

void V0_0_39_job_info::setMemoryPerNode(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Memory_per_node = value;
    m_Memory_per_nodeIsSet = true;
}

bool V0_0_39_job_info::memoryPerNodeIsSet() const
{
    return m_Memory_per_nodeIsSet;
}

void V0_0_39_job_info::unsetMemory_per_node()
{
    m_Memory_per_nodeIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getMinimumCpusPerNode() const
{
    return m_Minimum_cpus_per_node;
}

void V0_0_39_job_info::setMinimumCpusPerNode(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Minimum_cpus_per_node = value;
    m_Minimum_cpus_per_nodeIsSet = true;
}

bool V0_0_39_job_info::minimumCpusPerNodeIsSet() const
{
    return m_Minimum_cpus_per_nodeIsSet;
}

void V0_0_39_job_info::unsetMinimum_cpus_per_node()
{
    m_Minimum_cpus_per_nodeIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getMinimumTmpDiskPerNode() const
{
    return m_Minimum_tmp_disk_per_node;
}

void V0_0_39_job_info::setMinimumTmpDiskPerNode(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Minimum_tmp_disk_per_node = value;
    m_Minimum_tmp_disk_per_nodeIsSet = true;
}

bool V0_0_39_job_info::minimumTmpDiskPerNodeIsSet() const
{
    return m_Minimum_tmp_disk_per_nodeIsSet;
}

void V0_0_39_job_info::unsetMinimum_tmp_disk_per_node()
{
    m_Minimum_tmp_disk_per_nodeIsSet = false;
}
std::shared_ptr<V0_0_39_job_info_power> V0_0_39_job_info::getPower() const
{
    return m_Power;
}

void V0_0_39_job_info::setPower(const std::shared_ptr<V0_0_39_job_info_power>& value)
{
    m_Power = value;
    m_PowerIsSet = true;
}

bool V0_0_39_job_info::powerIsSet() const
{
    return m_PowerIsSet;
}

void V0_0_39_job_info::unsetPower()
{
    m_PowerIsSet = false;
}
int64_t V0_0_39_job_info::getPreemptTime() const
{
    return m_Preempt_time;
}

void V0_0_39_job_info::setPreemptTime(int64_t value)
{
    m_Preempt_time = value;
    m_Preempt_timeIsSet = true;
}

bool V0_0_39_job_info::preemptTimeIsSet() const
{
    return m_Preempt_timeIsSet;
}

void V0_0_39_job_info::unsetPreempt_time()
{
    m_Preempt_timeIsSet = false;
}
int64_t V0_0_39_job_info::getPreemptableTime() const
{
    return m_Preemptable_time;
}

void V0_0_39_job_info::setPreemptableTime(int64_t value)
{
    m_Preemptable_time = value;
    m_Preemptable_timeIsSet = true;
}

bool V0_0_39_job_info::preemptableTimeIsSet() const
{
    return m_Preemptable_timeIsSet;
}

void V0_0_39_job_info::unsetPreemptable_time()
{
    m_Preemptable_timeIsSet = false;
}
int64_t V0_0_39_job_info::getPreSusTime() const
{
    return m_Pre_sus_time;
}

void V0_0_39_job_info::setPreSusTime(int64_t value)
{
    m_Pre_sus_time = value;
    m_Pre_sus_timeIsSet = true;
}

bool V0_0_39_job_info::preSusTimeIsSet() const
{
    return m_Pre_sus_timeIsSet;
}

void V0_0_39_job_info::unsetPre_sus_time()
{
    m_Pre_sus_timeIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getPriority() const
{
    return m_Priority;
}

void V0_0_39_job_info::setPriority(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool V0_0_39_job_info::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void V0_0_39_job_info::unsetPriority()
{
    m_PriorityIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getProfile()
{
    return m_Profile;
}

void V0_0_39_job_info::setProfile(const std::vector<utility::string_t>& value)
{
    m_Profile = value;
    m_ProfileIsSet = true;
}

bool V0_0_39_job_info::profileIsSet() const
{
    return m_ProfileIsSet;
}

void V0_0_39_job_info::unsetProfile()
{
    m_ProfileIsSet = false;
}
utility::string_t V0_0_39_job_info::getQos() const
{
    return m_Qos;
}

void V0_0_39_job_info::setQos(const utility::string_t& value)
{
    m_Qos = value;
    m_QosIsSet = true;
}

bool V0_0_39_job_info::qosIsSet() const
{
    return m_QosIsSet;
}

void V0_0_39_job_info::unsetQos()
{
    m_QosIsSet = false;
}
bool V0_0_39_job_info::isReboot() const
{
    return m_Reboot;
}

void V0_0_39_job_info::setReboot(bool value)
{
    m_Reboot = value;
    m_RebootIsSet = true;
}

bool V0_0_39_job_info::rebootIsSet() const
{
    return m_RebootIsSet;
}

void V0_0_39_job_info::unsetReboot()
{
    m_RebootIsSet = false;
}
utility::string_t V0_0_39_job_info::getRequiredNodes() const
{
    return m_Required_nodes;
}

void V0_0_39_job_info::setRequiredNodes(const utility::string_t& value)
{
    m_Required_nodes = value;
    m_Required_nodesIsSet = true;
}

bool V0_0_39_job_info::requiredNodesIsSet() const
{
    return m_Required_nodesIsSet;
}

void V0_0_39_job_info::unsetRequired_nodes()
{
    m_Required_nodesIsSet = false;
}
int32_t V0_0_39_job_info::getMinimumSwitches() const
{
    return m_Minimum_switches;
}

void V0_0_39_job_info::setMinimumSwitches(int32_t value)
{
    m_Minimum_switches = value;
    m_Minimum_switchesIsSet = true;
}

bool V0_0_39_job_info::minimumSwitchesIsSet() const
{
    return m_Minimum_switchesIsSet;
}

void V0_0_39_job_info::unsetMinimum_switches()
{
    m_Minimum_switchesIsSet = false;
}
bool V0_0_39_job_info::isRequeue() const
{
    return m_Requeue;
}

void V0_0_39_job_info::setRequeue(bool value)
{
    m_Requeue = value;
    m_RequeueIsSet = true;
}

bool V0_0_39_job_info::requeueIsSet() const
{
    return m_RequeueIsSet;
}

void V0_0_39_job_info::unsetRequeue()
{
    m_RequeueIsSet = false;
}
int64_t V0_0_39_job_info::getResizeTime() const
{
    return m_Resize_time;
}

void V0_0_39_job_info::setResizeTime(int64_t value)
{
    m_Resize_time = value;
    m_Resize_timeIsSet = true;
}

bool V0_0_39_job_info::resizeTimeIsSet() const
{
    return m_Resize_timeIsSet;
}

void V0_0_39_job_info::unsetResize_time()
{
    m_Resize_timeIsSet = false;
}
int32_t V0_0_39_job_info::getRestartCnt() const
{
    return m_Restart_cnt;
}

void V0_0_39_job_info::setRestartCnt(int32_t value)
{
    m_Restart_cnt = value;
    m_Restart_cntIsSet = true;
}

bool V0_0_39_job_info::restartCntIsSet() const
{
    return m_Restart_cntIsSet;
}

void V0_0_39_job_info::unsetRestart_cnt()
{
    m_Restart_cntIsSet = false;
}
utility::string_t V0_0_39_job_info::getResvName() const
{
    return m_Resv_name;
}

void V0_0_39_job_info::setResvName(const utility::string_t& value)
{
    m_Resv_name = value;
    m_Resv_nameIsSet = true;
}

bool V0_0_39_job_info::resvNameIsSet() const
{
    return m_Resv_nameIsSet;
}

void V0_0_39_job_info::unsetResv_name()
{
    m_Resv_nameIsSet = false;
}
utility::string_t V0_0_39_job_info::getScheduledNodes() const
{
    return m_Scheduled_nodes;
}

void V0_0_39_job_info::setScheduledNodes(const utility::string_t& value)
{
    m_Scheduled_nodes = value;
    m_Scheduled_nodesIsSet = true;
}

bool V0_0_39_job_info::scheduledNodesIsSet() const
{
    return m_Scheduled_nodesIsSet;
}

void V0_0_39_job_info::unsetScheduled_nodes()
{
    m_Scheduled_nodesIsSet = false;
}
utility::string_t V0_0_39_job_info::getSelinuxContext() const
{
    return m_Selinux_context;
}

void V0_0_39_job_info::setSelinuxContext(const utility::string_t& value)
{
    m_Selinux_context = value;
    m_Selinux_contextIsSet = true;
}

bool V0_0_39_job_info::selinuxContextIsSet() const
{
    return m_Selinux_contextIsSet;
}

void V0_0_39_job_info::unsetSelinux_context()
{
    m_Selinux_contextIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getShared()
{
    return m_Shared;
}

void V0_0_39_job_info::setShared(const std::vector<utility::string_t>& value)
{
    m_Shared = value;
    m_SharedIsSet = true;
}

bool V0_0_39_job_info::sharedIsSet() const
{
    return m_SharedIsSet;
}

void V0_0_39_job_info::unsetShared()
{
    m_SharedIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getExclusive()
{
    return m_Exclusive;
}

void V0_0_39_job_info::setExclusive(const std::vector<utility::string_t>& value)
{
    m_Exclusive = value;
    m_ExclusiveIsSet = true;
}

bool V0_0_39_job_info::exclusiveIsSet() const
{
    return m_ExclusiveIsSet;
}

void V0_0_39_job_info::unsetExclusive()
{
    m_ExclusiveIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_job_info::getShowFlags()
{
    return m_Show_flags;
}

void V0_0_39_job_info::setShowFlags(const std::vector<utility::string_t>& value)
{
    m_Show_flags = value;
    m_Show_flagsIsSet = true;
}

bool V0_0_39_job_info::showFlagsIsSet() const
{
    return m_Show_flagsIsSet;
}

void V0_0_39_job_info::unsetShow_flags()
{
    m_Show_flagsIsSet = false;
}
int32_t V0_0_39_job_info::getSocketsPerBoard() const
{
    return m_Sockets_per_board;
}

void V0_0_39_job_info::setSocketsPerBoard(int32_t value)
{
    m_Sockets_per_board = value;
    m_Sockets_per_boardIsSet = true;
}

bool V0_0_39_job_info::socketsPerBoardIsSet() const
{
    return m_Sockets_per_boardIsSet;
}

void V0_0_39_job_info::unsetSockets_per_board()
{
    m_Sockets_per_boardIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getSocketsPerNode() const
{
    return m_Sockets_per_node;
}

void V0_0_39_job_info::setSocketsPerNode(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Sockets_per_node = value;
    m_Sockets_per_nodeIsSet = true;
}

bool V0_0_39_job_info::socketsPerNodeIsSet() const
{
    return m_Sockets_per_nodeIsSet;
}

void V0_0_39_job_info::unsetSockets_per_node()
{
    m_Sockets_per_nodeIsSet = false;
}
int64_t V0_0_39_job_info::getStartTime() const
{
    return m_Start_time;
}

void V0_0_39_job_info::setStartTime(int64_t value)
{
    m_Start_time = value;
    m_Start_timeIsSet = true;
}

bool V0_0_39_job_info::startTimeIsSet() const
{
    return m_Start_timeIsSet;
}

void V0_0_39_job_info::unsetStart_time()
{
    m_Start_timeIsSet = false;
}
utility::string_t V0_0_39_job_info::getStateDescription() const
{
    return m_State_description;
}

void V0_0_39_job_info::setStateDescription(const utility::string_t& value)
{
    m_State_description = value;
    m_State_descriptionIsSet = true;
}

bool V0_0_39_job_info::stateDescriptionIsSet() const
{
    return m_State_descriptionIsSet;
}

void V0_0_39_job_info::unsetState_description()
{
    m_State_descriptionIsSet = false;
}
utility::string_t V0_0_39_job_info::getStateReason() const
{
    return m_State_reason;
}

void V0_0_39_job_info::setStateReason(const utility::string_t& value)
{
    m_State_reason = value;
    m_State_reasonIsSet = true;
}

bool V0_0_39_job_info::stateReasonIsSet() const
{
    return m_State_reasonIsSet;
}

void V0_0_39_job_info::unsetState_reason()
{
    m_State_reasonIsSet = false;
}
utility::string_t V0_0_39_job_info::getStandardError() const
{
    return m_Standard_error;
}

void V0_0_39_job_info::setStandardError(const utility::string_t& value)
{
    m_Standard_error = value;
    m_Standard_errorIsSet = true;
}

bool V0_0_39_job_info::standardErrorIsSet() const
{
    return m_Standard_errorIsSet;
}

void V0_0_39_job_info::unsetStandard_error()
{
    m_Standard_errorIsSet = false;
}
utility::string_t V0_0_39_job_info::getStandardInput() const
{
    return m_Standard_input;
}

void V0_0_39_job_info::setStandardInput(const utility::string_t& value)
{
    m_Standard_input = value;
    m_Standard_inputIsSet = true;
}

bool V0_0_39_job_info::standardInputIsSet() const
{
    return m_Standard_inputIsSet;
}

void V0_0_39_job_info::unsetStandard_input()
{
    m_Standard_inputIsSet = false;
}
utility::string_t V0_0_39_job_info::getStandardOutput() const
{
    return m_Standard_output;
}

void V0_0_39_job_info::setStandardOutput(const utility::string_t& value)
{
    m_Standard_output = value;
    m_Standard_outputIsSet = true;
}

bool V0_0_39_job_info::standardOutputIsSet() const
{
    return m_Standard_outputIsSet;
}

void V0_0_39_job_info::unsetStandard_output()
{
    m_Standard_outputIsSet = false;
}
int64_t V0_0_39_job_info::getSubmitTime() const
{
    return m_Submit_time;
}

void V0_0_39_job_info::setSubmitTime(int64_t value)
{
    m_Submit_time = value;
    m_Submit_timeIsSet = true;
}

bool V0_0_39_job_info::submitTimeIsSet() const
{
    return m_Submit_timeIsSet;
}

void V0_0_39_job_info::unsetSubmit_time()
{
    m_Submit_timeIsSet = false;
}
int64_t V0_0_39_job_info::getSuspendTime() const
{
    return m_Suspend_time;
}

void V0_0_39_job_info::setSuspendTime(int64_t value)
{
    m_Suspend_time = value;
    m_Suspend_timeIsSet = true;
}

bool V0_0_39_job_info::suspendTimeIsSet() const
{
    return m_Suspend_timeIsSet;
}

void V0_0_39_job_info::unsetSuspend_time()
{
    m_Suspend_timeIsSet = false;
}
utility::string_t V0_0_39_job_info::getSystemComment() const
{
    return m_System_comment;
}

void V0_0_39_job_info::setSystemComment(const utility::string_t& value)
{
    m_System_comment = value;
    m_System_commentIsSet = true;
}

bool V0_0_39_job_info::systemCommentIsSet() const
{
    return m_System_commentIsSet;
}

void V0_0_39_job_info::unsetSystem_comment()
{
    m_System_commentIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getTimeLimit() const
{
    return m_Time_limit;
}

void V0_0_39_job_info::setTimeLimit(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Time_limit = value;
    m_Time_limitIsSet = true;
}

bool V0_0_39_job_info::timeLimitIsSet() const
{
    return m_Time_limitIsSet;
}

void V0_0_39_job_info::unsetTime_limit()
{
    m_Time_limitIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_job_info::getTimeMinimum() const
{
    return m_Time_minimum;
}

void V0_0_39_job_info::setTimeMinimum(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Time_minimum = value;
    m_Time_minimumIsSet = true;
}

bool V0_0_39_job_info::timeMinimumIsSet() const
{
    return m_Time_minimumIsSet;
}

void V0_0_39_job_info::unsetTime_minimum()
{
    m_Time_minimumIsSet = false;
}
std::shared_ptr<V0_0_39_uint16_no_val> V0_0_39_job_info::getThreadsPerCore() const
{
    return m_Threads_per_core;
}

void V0_0_39_job_info::setThreadsPerCore(const std::shared_ptr<V0_0_39_uint16_no_val>& value)
{
    m_Threads_per_core = value;
    m_Threads_per_coreIsSet = true;
}

bool V0_0_39_job_info::threadsPerCoreIsSet() const
{
    return m_Threads_per_coreIsSet;
}

void V0_0_39_job_info::unsetThreads_per_core()
{
    m_Threads_per_coreIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresBind() const
{
    return m_Tres_bind;
}

void V0_0_39_job_info::setTresBind(const utility::string_t& value)
{
    m_Tres_bind = value;
    m_Tres_bindIsSet = true;
}

bool V0_0_39_job_info::tresBindIsSet() const
{
    return m_Tres_bindIsSet;
}

void V0_0_39_job_info::unsetTres_bind()
{
    m_Tres_bindIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresFreq() const
{
    return m_Tres_freq;
}

void V0_0_39_job_info::setTresFreq(const utility::string_t& value)
{
    m_Tres_freq = value;
    m_Tres_freqIsSet = true;
}

bool V0_0_39_job_info::tresFreqIsSet() const
{
    return m_Tres_freqIsSet;
}

void V0_0_39_job_info::unsetTres_freq()
{
    m_Tres_freqIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresPerJob() const
{
    return m_Tres_per_job;
}

void V0_0_39_job_info::setTresPerJob(const utility::string_t& value)
{
    m_Tres_per_job = value;
    m_Tres_per_jobIsSet = true;
}

bool V0_0_39_job_info::tresPerJobIsSet() const
{
    return m_Tres_per_jobIsSet;
}

void V0_0_39_job_info::unsetTres_per_job()
{
    m_Tres_per_jobIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresPerNode() const
{
    return m_Tres_per_node;
}

void V0_0_39_job_info::setTresPerNode(const utility::string_t& value)
{
    m_Tres_per_node = value;
    m_Tres_per_nodeIsSet = true;
}

bool V0_0_39_job_info::tresPerNodeIsSet() const
{
    return m_Tres_per_nodeIsSet;
}

void V0_0_39_job_info::unsetTres_per_node()
{
    m_Tres_per_nodeIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresPerSocket() const
{
    return m_Tres_per_socket;
}

void V0_0_39_job_info::setTresPerSocket(const utility::string_t& value)
{
    m_Tres_per_socket = value;
    m_Tres_per_socketIsSet = true;
}

bool V0_0_39_job_info::tresPerSocketIsSet() const
{
    return m_Tres_per_socketIsSet;
}

void V0_0_39_job_info::unsetTres_per_socket()
{
    m_Tres_per_socketIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresPerTask() const
{
    return m_Tres_per_task;
}

void V0_0_39_job_info::setTresPerTask(const utility::string_t& value)
{
    m_Tres_per_task = value;
    m_Tres_per_taskIsSet = true;
}

bool V0_0_39_job_info::tresPerTaskIsSet() const
{
    return m_Tres_per_taskIsSet;
}

void V0_0_39_job_info::unsetTres_per_task()
{
    m_Tres_per_taskIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresReqStr() const
{
    return m_Tres_req_str;
}

void V0_0_39_job_info::setTresReqStr(const utility::string_t& value)
{
    m_Tres_req_str = value;
    m_Tres_req_strIsSet = true;
}

bool V0_0_39_job_info::tresReqStrIsSet() const
{
    return m_Tres_req_strIsSet;
}

void V0_0_39_job_info::unsetTres_req_str()
{
    m_Tres_req_strIsSet = false;
}
utility::string_t V0_0_39_job_info::getTresAllocStr() const
{
    return m_Tres_alloc_str;
}

void V0_0_39_job_info::setTresAllocStr(const utility::string_t& value)
{
    m_Tres_alloc_str = value;
    m_Tres_alloc_strIsSet = true;
}

bool V0_0_39_job_info::tresAllocStrIsSet() const
{
    return m_Tres_alloc_strIsSet;
}

void V0_0_39_job_info::unsetTres_alloc_str()
{
    m_Tres_alloc_strIsSet = false;
}
int32_t V0_0_39_job_info::getUserId() const
{
    return m_User_id;
}

void V0_0_39_job_info::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool V0_0_39_job_info::userIdIsSet() const
{
    return m_User_idIsSet;
}

void V0_0_39_job_info::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::string_t V0_0_39_job_info::getUserName() const
{
    return m_User_name;
}

void V0_0_39_job_info::setUserName(const utility::string_t& value)
{
    m_User_name = value;
    m_User_nameIsSet = true;
}

bool V0_0_39_job_info::userNameIsSet() const
{
    return m_User_nameIsSet;
}

void V0_0_39_job_info::unsetUser_name()
{
    m_User_nameIsSet = false;
}
int32_t V0_0_39_job_info::getMaximumSwitchWaitTime() const
{
    return m_Maximum_switch_wait_time;
}

void V0_0_39_job_info::setMaximumSwitchWaitTime(int32_t value)
{
    m_Maximum_switch_wait_time = value;
    m_Maximum_switch_wait_timeIsSet = true;
}

bool V0_0_39_job_info::maximumSwitchWaitTimeIsSet() const
{
    return m_Maximum_switch_wait_timeIsSet;
}

void V0_0_39_job_info::unsetMaximum_switch_wait_time()
{
    m_Maximum_switch_wait_timeIsSet = false;
}
utility::string_t V0_0_39_job_info::getWckey() const
{
    return m_Wckey;
}

void V0_0_39_job_info::setWckey(const utility::string_t& value)
{
    m_Wckey = value;
    m_WckeyIsSet = true;
}

bool V0_0_39_job_info::wckeyIsSet() const
{
    return m_WckeyIsSet;
}

void V0_0_39_job_info::unsetWckey()
{
    m_WckeyIsSet = false;
}
utility::string_t V0_0_39_job_info::getCurrentWorkingDirectory() const
{
    return m_Current_working_directory;
}

void V0_0_39_job_info::setCurrentWorkingDirectory(const utility::string_t& value)
{
    m_Current_working_directory = value;
    m_Current_working_directoryIsSet = true;
}

bool V0_0_39_job_info::currentWorkingDirectoryIsSet() const
{
    return m_Current_working_directoryIsSet;
}

void V0_0_39_job_info::unsetCurrent_working_directory()
{
    m_Current_working_directoryIsSet = false;
}
}
}
}
}


