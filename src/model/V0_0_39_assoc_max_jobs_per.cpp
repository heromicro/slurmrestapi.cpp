/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_assoc_max_jobs_per.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_assoc_max_jobs_per::V0_0_39_assoc_max_jobs_per()
{
    m_CountIsSet = false;
    m_AccruingIsSet = false;
    m_SubmittedIsSet = false;
    m_Wall_clockIsSet = false;
}

V0_0_39_assoc_max_jobs_per::~V0_0_39_assoc_max_jobs_per()
{
}

void V0_0_39_assoc_max_jobs_per::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_assoc_max_jobs_per::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_AccruingIsSet)
    {
        val[utility::conversions::to_string_t(U("accruing"))] = ModelBase::toJson(m_Accruing);
    }
    if(m_SubmittedIsSet)
    {
        val[utility::conversions::to_string_t(U("submitted"))] = ModelBase::toJson(m_Submitted);
    }
    if(m_Wall_clockIsSet)
    {
        val[utility::conversions::to_string_t(U("wall_clock"))] = ModelBase::toJson(m_Wall_clock);
    }

    return val;
}

bool V0_0_39_assoc_max_jobs_per::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accruing"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accruing")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setAccruing;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccruing);
            setAccruing(refVal_setAccruing);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submitted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submitted")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setSubmitted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmitted);
            setSubmitted(refVal_setSubmitted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wall_clock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wall_clock")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setWallClock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWallClock);
            setWallClock(refVal_setWallClock);
        }
    }
    return ok;
}

void V0_0_39_assoc_max_jobs_per::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_AccruingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accruing")), m_Accruing));
    }
    if(m_SubmittedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submitted")), m_Submitted));
    }
    if(m_Wall_clockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wall_clock")), m_Wall_clock));
    }
}

bool V0_0_39_assoc_max_jobs_per::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accruing"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setAccruing;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accruing"))), refVal_setAccruing );
        setAccruing(refVal_setAccruing);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submitted"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setSubmitted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submitted"))), refVal_setSubmitted );
        setSubmitted(refVal_setSubmitted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wall_clock"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setWallClock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wall_clock"))), refVal_setWallClock );
        setWallClock(refVal_setWallClock);
    }
    return ok;
}

std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_assoc_max_jobs_per::getCount() const
{
    return m_Count;
}

void V0_0_39_assoc_max_jobs_per::setCount(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool V0_0_39_assoc_max_jobs_per::countIsSet() const
{
    return m_CountIsSet;
}

void V0_0_39_assoc_max_jobs_per::unsetCount()
{
    m_CountIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_assoc_max_jobs_per::getAccruing() const
{
    return m_Accruing;
}

void V0_0_39_assoc_max_jobs_per::setAccruing(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Accruing = value;
    m_AccruingIsSet = true;
}

bool V0_0_39_assoc_max_jobs_per::accruingIsSet() const
{
    return m_AccruingIsSet;
}

void V0_0_39_assoc_max_jobs_per::unsetAccruing()
{
    m_AccruingIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_assoc_max_jobs_per::getSubmitted() const
{
    return m_Submitted;
}

void V0_0_39_assoc_max_jobs_per::setSubmitted(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Submitted = value;
    m_SubmittedIsSet = true;
}

bool V0_0_39_assoc_max_jobs_per::submittedIsSet() const
{
    return m_SubmittedIsSet;
}

void V0_0_39_assoc_max_jobs_per::unsetSubmitted()
{
    m_SubmittedIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_assoc_max_jobs_per::getWallClock() const
{
    return m_Wall_clock;
}

void V0_0_39_assoc_max_jobs_per::setWallClock(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Wall_clock = value;
    m_Wall_clockIsSet = true;
}

bool V0_0_39_assoc_max_jobs_per::wallClockIsSet() const
{
    return m_Wall_clockIsSet;
}

void V0_0_39_assoc_max_jobs_per::unsetWall_clock()
{
    m_Wall_clockIsSet = false;
}
}
}
}
}


