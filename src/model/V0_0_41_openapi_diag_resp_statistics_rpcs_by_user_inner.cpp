/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner()
{
    m_User_id = 0;
    m_User_idIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_Count = 0;
    m_CountIsSet = false;
    m_Total_time = 0L;
    m_Total_timeIsSet = false;
    m_Average_timeIsSet = false;
}

V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::~V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner()
{
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_Total_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("total_time"))] = ModelBase::toJson(m_Total_time);
    }
    if(m_Average_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("average_time"))] = ModelBase::toJson(m_Average_time);
    }

    return val;
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalTime);
            setTotalTime(refVal_setTotalTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("average_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average_time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time> refVal_setAverageTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverageTime);
            setAverageTime(refVal_setAverageTime);
        }
    }
    return ok;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_Total_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_time")), m_Total_time));
    }
    if(m_Average_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average_time")), m_Average_time));
    }
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        int32_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int32_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_time"))))
    {
        int64_t refVal_setTotalTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_time"))), refVal_setTotalTime );
        setTotalTime(refVal_setTotalTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("average_time"))))
    {
        std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time> refVal_setAverageTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average_time"))), refVal_setAverageTime );
        setAverageTime(refVal_setAverageTime);
    }
    return ok;
}

int32_t V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::getUserId() const
{
    return m_User_id;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::setUserId(int32_t value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::userIdIsSet() const
{
    return m_User_idIsSet;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::unsetUser_id()
{
    m_User_idIsSet = false;
}
utility::string_t V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::getUser() const
{
    return m_User;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::userIsSet() const
{
    return m_UserIsSet;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::unsetUser()
{
    m_UserIsSet = false;
}
int32_t V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::getCount() const
{
    return m_Count;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::countIsSet() const
{
    return m_CountIsSet;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::unsetCount()
{
    m_CountIsSet = false;
}
int64_t V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::getTotalTime() const
{
    return m_Total_time;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::setTotalTime(int64_t value)
{
    m_Total_time = value;
    m_Total_timeIsSet = true;
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::totalTimeIsSet() const
{
    return m_Total_timeIsSet;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::unsetTotal_time()
{
    m_Total_timeIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time> V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::getAverageTime() const
{
    return m_Average_time;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::setAverageTime(const std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time>& value)
{
    m_Average_time = value;
    m_Average_timeIsSet = true;
}

bool V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::averageTimeIsSet() const
{
    return m_Average_timeIsSet;
}

void V0_0_41_openapi_diag_resp_statistics_rpcs_by_user_inner::unsetAverage_time()
{
    m_Average_timeIsSet = false;
}
}
}
}
}


