/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_37_error.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_37_error::Dbv0_0_37_error()
{
    m_Errno = 0;
    m_ErrnoIsSet = false;
    m_Error = utility::conversions::to_string_t("");
    m_ErrorIsSet = false;
}

Dbv0_0_37_error::~Dbv0_0_37_error()
{
}

void Dbv0_0_37_error::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_37_error::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ErrnoIsSet)
    {
        val[utility::conversions::to_string_t(U("errno"))] = ModelBase::toJson(m_Errno);
    }
    if(m_ErrorIsSet)
    {
        val[utility::conversions::to_string_t(U("error"))] = ModelBase::toJson(m_Error);
    }

    return val;
}

bool Dbv0_0_37_error::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("errno"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("errno")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setErrno;
            ok &= ModelBase::fromJson(fieldValue, refVal_setErrno);
            setErrno(refVal_setErrno);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setError);
            setError(refVal_setError);
        }
    }
    return ok;
}

void Dbv0_0_37_error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ErrnoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("errno")), m_Errno));
    }
    if(m_ErrorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("error")), m_Error));
    }
}

bool Dbv0_0_37_error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("errno"))))
    {
        int32_t refVal_setErrno;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("errno"))), refVal_setErrno );
        setErrno(refVal_setErrno);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("error"))))
    {
        utility::string_t refVal_setError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("error"))), refVal_setError );
        setError(refVal_setError);
    }
    return ok;
}

int32_t Dbv0_0_37_error::getErrno() const
{
    return m_Errno;
}

void Dbv0_0_37_error::setErrno(int32_t value)
{
    m_Errno = value;
    m_ErrnoIsSet = true;
}

bool Dbv0_0_37_error::errnoIsSet() const
{
    return m_ErrnoIsSet;
}

void Dbv0_0_37_error::unsetErrno()
{
    m_ErrnoIsSet = false;
}
utility::string_t Dbv0_0_37_error::getError() const
{
    return m_Error;
}

void Dbv0_0_37_error::setError(const utility::string_t& value)
{
    m_Error = value;
    m_ErrorIsSet = true;
}

bool Dbv0_0_37_error::errorIsSet() const
{
    return m_ErrorIsSet;
}

void Dbv0_0_37_error::unsetError()
{
    m_ErrorIsSet = false;
}
}
}
}
}


