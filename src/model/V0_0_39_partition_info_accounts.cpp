/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_partition_info_accounts.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_39_partition_info_accounts::V0_0_39_partition_info_accounts()
{
    m_Allowed = utility::conversions::to_string_t("");
    m_AllowedIsSet = false;
    m_Deny = utility::conversions::to_string_t("");
    m_DenyIsSet = false;
}

V0_0_39_partition_info_accounts::~V0_0_39_partition_info_accounts()
{
}

void V0_0_39_partition_info_accounts::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_partition_info_accounts::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AllowedIsSet)
    {
        val[utility::conversions::to_string_t(U("allowed"))] = ModelBase::toJson(m_Allowed);
    }
    if(m_DenyIsSet)
    {
        val[utility::conversions::to_string_t(U("deny"))] = ModelBase::toJson(m_Deny);
    }

    return val;
}

bool V0_0_39_partition_info_accounts::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("allowed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allowed")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAllowed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllowed);
            setAllowed(refVal_setAllowed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deny"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deny")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeny;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeny);
            setDeny(refVal_setDeny);
        }
    }
    return ok;
}

void V0_0_39_partition_info_accounts::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AllowedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allowed")), m_Allowed));
    }
    if(m_DenyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deny")), m_Deny));
    }
}

bool V0_0_39_partition_info_accounts::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("allowed"))))
    {
        utility::string_t refVal_setAllowed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allowed"))), refVal_setAllowed );
        setAllowed(refVal_setAllowed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deny"))))
    {
        utility::string_t refVal_setDeny;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deny"))), refVal_setDeny );
        setDeny(refVal_setDeny);
    }
    return ok;
}

utility::string_t V0_0_39_partition_info_accounts::getAllowed() const
{
    return m_Allowed;
}

void V0_0_39_partition_info_accounts::setAllowed(const utility::string_t& value)
{
    m_Allowed = value;
    m_AllowedIsSet = true;
}

bool V0_0_39_partition_info_accounts::allowedIsSet() const
{
    return m_AllowedIsSet;
}

void V0_0_39_partition_info_accounts::unsetAllowed()
{
    m_AllowedIsSet = false;
}
utility::string_t V0_0_39_partition_info_accounts::getDeny() const
{
    return m_Deny;
}

void V0_0_39_partition_info_accounts::setDeny(const utility::string_t& value)
{
    m_Deny = value;
    m_DenyIsSet = true;
}

bool V0_0_39_partition_info_accounts::denyIsSet() const
{
    return m_DenyIsSet;
}

void V0_0_39_partition_info_accounts::unsetDeny()
{
    m_DenyIsSet = false;
}
}
}
}
}


