/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_shares_resp_shares.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_shares_resp_shares::V0_0_41_openapi_shares_resp_shares()
{
    m_SharesIsSet = false;
    m_Total_shares = 0L;
    m_Total_sharesIsSet = false;
}

V0_0_41_openapi_shares_resp_shares::~V0_0_41_openapi_shares_resp_shares()
{
}

void V0_0_41_openapi_shares_resp_shares::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_shares_resp_shares::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SharesIsSet)
    {
        val[utility::conversions::to_string_t(U("shares"))] = ModelBase::toJson(m_Shares);
    }
    if(m_Total_sharesIsSet)
    {
        val[utility::conversions::to_string_t(U("total_shares"))] = ModelBase::toJson(m_Total_shares);
    }

    return val;
}

bool V0_0_41_openapi_shares_resp_shares::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shares")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>> refVal_setShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShares);
            setShares(refVal_setShares);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_shares")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalShares);
            setTotalShares(refVal_setTotalShares);
        }
    }
    return ok;
}

void V0_0_41_openapi_shares_resp_shares::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shares")), m_Shares));
    }
    if(m_Total_sharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_shares")), m_Total_shares));
    }
}

bool V0_0_41_openapi_shares_resp_shares::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("shares"))))
    {
        std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>> refVal_setShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shares"))), refVal_setShares );
        setShares(refVal_setShares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_shares"))))
    {
        int64_t refVal_setTotalShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_shares"))), refVal_setTotalShares );
        setTotalShares(refVal_setTotalShares);
    }
    return ok;
}

std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>>& V0_0_41_openapi_shares_resp_shares::getShares()
{
    return m_Shares;
}

void V0_0_41_openapi_shares_resp_shares::setShares(const std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>>& value)
{
    m_Shares = value;
    m_SharesIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares::sharesIsSet() const
{
    return m_SharesIsSet;
}

void V0_0_41_openapi_shares_resp_shares::unsetShares()
{
    m_SharesIsSet = false;
}
int64_t V0_0_41_openapi_shares_resp_shares::getTotalShares() const
{
    return m_Total_shares;
}

void V0_0_41_openapi_shares_resp_shares::setTotalShares(int64_t value)
{
    m_Total_shares = value;
    m_Total_sharesIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares::totalSharesIsSet() const
{
    return m_Total_sharesIsSet;
}

void V0_0_41_openapi_shares_resp_shares::unsetTotal_shares()
{
    m_Total_sharesIsSet = false;
}
}
}
}
}


