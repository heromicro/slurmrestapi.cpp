/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal()
{
    m_IdIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
}

V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::~V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal()
{
}

void V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }

    return val;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal_id> refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    return ok;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal_id> refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    return ok;
}

std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal_id> V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::getId() const
{
    return m_Id;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::setId(const std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal_id>& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::idIsSet() const
{
    return m_IdIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::getName() const
{
    return m_Name;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_derived_exit_code_signal::unsetName()
{
    m_NameIsSet = false;
}
}
}
}
}


