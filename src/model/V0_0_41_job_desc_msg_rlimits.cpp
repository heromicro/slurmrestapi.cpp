/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_job_desc_msg_rlimits.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_job_desc_msg_rlimits::V0_0_41_job_desc_msg_rlimits()
{
    m_CpuIsSet = false;
    m_FsizeIsSet = false;
    m_DataIsSet = false;
    m_StackIsSet = false;
    m_CoreIsSet = false;
    m_RssIsSet = false;
    m_NprocIsSet = false;
    m_NofileIsSet = false;
    m_MemlockIsSet = false;
    m_AsIsSet = false;
}

V0_0_41_job_desc_msg_rlimits::~V0_0_41_job_desc_msg_rlimits()
{
}

void V0_0_41_job_desc_msg_rlimits::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_job_desc_msg_rlimits::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CpuIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu"))] = ModelBase::toJson(m_Cpu);
    }
    if(m_FsizeIsSet)
    {
        val[utility::conversions::to_string_t(U("fsize"))] = ModelBase::toJson(m_Fsize);
    }
    if(m_DataIsSet)
    {
        val[utility::conversions::to_string_t(U("data"))] = ModelBase::toJson(m_Data);
    }
    if(m_StackIsSet)
    {
        val[utility::conversions::to_string_t(U("stack"))] = ModelBase::toJson(m_Stack);
    }
    if(m_CoreIsSet)
    {
        val[utility::conversions::to_string_t(U("core"))] = ModelBase::toJson(m_Core);
    }
    if(m_RssIsSet)
    {
        val[utility::conversions::to_string_t(U("rss"))] = ModelBase::toJson(m_Rss);
    }
    if(m_NprocIsSet)
    {
        val[utility::conversions::to_string_t(U("nproc"))] = ModelBase::toJson(m_Nproc);
    }
    if(m_NofileIsSet)
    {
        val[utility::conversions::to_string_t(U("nofile"))] = ModelBase::toJson(m_Nofile);
    }
    if(m_MemlockIsSet)
    {
        val[utility::conversions::to_string_t(U("memlock"))] = ModelBase::toJson(m_Memlock);
    }
    if(m_AsIsSet)
    {
        val[utility::conversions::to_string_t(U("as"))] = ModelBase::toJson(m_As);
    }

    return val;
}

bool V0_0_41_job_desc_msg_rlimits::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_cpu> refVal_setCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpu);
            setCpu(refVal_setCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fsize"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fsize")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_fsize> refVal_setFsize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFsize);
            setFsize(refVal_setFsize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("data"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("data")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_data> refVal_setData;
            ok &= ModelBase::fromJson(fieldValue, refVal_setData);
            setData(refVal_setData);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stack"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stack")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_stack> refVal_setStack;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStack);
            setStack(refVal_setStack);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("core")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_core> refVal_setCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCore);
            setCore(refVal_setCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rss"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rss")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_rss> refVal_setRss;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRss);
            setRss(refVal_setRss);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nproc"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nproc")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nproc> refVal_setNproc;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNproc);
            setNproc(refVal_setNproc);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nofile"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nofile")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nofile> refVal_setNofile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNofile);
            setNofile(refVal_setNofile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memlock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memlock")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_memlock> refVal_setMemlock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemlock);
            setMemlock(refVal_setMemlock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("as"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("as")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_job_desc_msg_rlimits_as> refVal_setAs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAs);
            setAs(refVal_setAs);
        }
    }
    return ok;
}

void V0_0_41_job_desc_msg_rlimits::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu")), m_Cpu));
    }
    if(m_FsizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fsize")), m_Fsize));
    }
    if(m_DataIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("data")), m_Data));
    }
    if(m_StackIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stack")), m_Stack));
    }
    if(m_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("core")), m_Core));
    }
    if(m_RssIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rss")), m_Rss));
    }
    if(m_NprocIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nproc")), m_Nproc));
    }
    if(m_NofileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nofile")), m_Nofile));
    }
    if(m_MemlockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memlock")), m_Memlock));
    }
    if(m_AsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("as")), m_As));
    }
}

bool V0_0_41_job_desc_msg_rlimits::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_cpu> refVal_setCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu"))), refVal_setCpu );
        setCpu(refVal_setCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fsize"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_fsize> refVal_setFsize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fsize"))), refVal_setFsize );
        setFsize(refVal_setFsize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("data"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_data> refVal_setData;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("data"))), refVal_setData );
        setData(refVal_setData);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stack"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_stack> refVal_setStack;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stack"))), refVal_setStack );
        setStack(refVal_setStack);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("core"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_core> refVal_setCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("core"))), refVal_setCore );
        setCore(refVal_setCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rss"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_rss> refVal_setRss;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rss"))), refVal_setRss );
        setRss(refVal_setRss);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nproc"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nproc> refVal_setNproc;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nproc"))), refVal_setNproc );
        setNproc(refVal_setNproc);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nofile"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nofile> refVal_setNofile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nofile"))), refVal_setNofile );
        setNofile(refVal_setNofile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memlock"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_memlock> refVal_setMemlock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memlock"))), refVal_setMemlock );
        setMemlock(refVal_setMemlock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("as"))))
    {
        std::shared_ptr<V0_0_41_job_desc_msg_rlimits_as> refVal_setAs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("as"))), refVal_setAs );
        setAs(refVal_setAs);
    }
    return ok;
}

std::shared_ptr<V0_0_41_job_desc_msg_rlimits_cpu> V0_0_41_job_desc_msg_rlimits::getCpu() const
{
    return m_Cpu;
}

void V0_0_41_job_desc_msg_rlimits::setCpu(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_cpu>& value)
{
    m_Cpu = value;
    m_CpuIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::cpuIsSet() const
{
    return m_CpuIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetCpu()
{
    m_CpuIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_fsize> V0_0_41_job_desc_msg_rlimits::getFsize() const
{
    return m_Fsize;
}

void V0_0_41_job_desc_msg_rlimits::setFsize(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_fsize>& value)
{
    m_Fsize = value;
    m_FsizeIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::fsizeIsSet() const
{
    return m_FsizeIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetFsize()
{
    m_FsizeIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_data> V0_0_41_job_desc_msg_rlimits::getData() const
{
    return m_Data;
}

void V0_0_41_job_desc_msg_rlimits::setData(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_data>& value)
{
    m_Data = value;
    m_DataIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::dataIsSet() const
{
    return m_DataIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetData()
{
    m_DataIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_stack> V0_0_41_job_desc_msg_rlimits::getStack() const
{
    return m_Stack;
}

void V0_0_41_job_desc_msg_rlimits::setStack(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_stack>& value)
{
    m_Stack = value;
    m_StackIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::stackIsSet() const
{
    return m_StackIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetStack()
{
    m_StackIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_core> V0_0_41_job_desc_msg_rlimits::getCore() const
{
    return m_Core;
}

void V0_0_41_job_desc_msg_rlimits::setCore(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_core>& value)
{
    m_Core = value;
    m_CoreIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::coreIsSet() const
{
    return m_CoreIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetCore()
{
    m_CoreIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_rss> V0_0_41_job_desc_msg_rlimits::getRss() const
{
    return m_Rss;
}

void V0_0_41_job_desc_msg_rlimits::setRss(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_rss>& value)
{
    m_Rss = value;
    m_RssIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::rssIsSet() const
{
    return m_RssIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetRss()
{
    m_RssIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nproc> V0_0_41_job_desc_msg_rlimits::getNproc() const
{
    return m_Nproc;
}

void V0_0_41_job_desc_msg_rlimits::setNproc(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nproc>& value)
{
    m_Nproc = value;
    m_NprocIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::nprocIsSet() const
{
    return m_NprocIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetNproc()
{
    m_NprocIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nofile> V0_0_41_job_desc_msg_rlimits::getNofile() const
{
    return m_Nofile;
}

void V0_0_41_job_desc_msg_rlimits::setNofile(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_nofile>& value)
{
    m_Nofile = value;
    m_NofileIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::nofileIsSet() const
{
    return m_NofileIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetNofile()
{
    m_NofileIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_memlock> V0_0_41_job_desc_msg_rlimits::getMemlock() const
{
    return m_Memlock;
}

void V0_0_41_job_desc_msg_rlimits::setMemlock(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_memlock>& value)
{
    m_Memlock = value;
    m_MemlockIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::memlockIsSet() const
{
    return m_MemlockIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetMemlock()
{
    m_MemlockIsSet = false;
}
std::shared_ptr<V0_0_41_job_desc_msg_rlimits_as> V0_0_41_job_desc_msg_rlimits::getAs() const
{
    return m_As;
}

void V0_0_41_job_desc_msg_rlimits::setAs(const std::shared_ptr<V0_0_41_job_desc_msg_rlimits_as>& value)
{
    m_As = value;
    m_AsIsSet = true;
}

bool V0_0_41_job_desc_msg_rlimits::asIsSet() const
{
    return m_AsIsSet;
}

void V0_0_41_job_desc_msg_rlimits::unsetAs()
{
    m_AsIsSet = false;
}
}
}
}
}


