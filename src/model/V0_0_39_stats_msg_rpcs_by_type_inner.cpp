/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_stats_msg_rpcs_by_type_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_stats_msg_rpcs_by_type_inner::V0_0_39_stats_msg_rpcs_by_type_inner()
{
    m_Message_type = utility::conversions::to_string_t("");
    m_Message_typeIsSet = false;
    m_Type_id = 0;
    m_Type_idIsSet = false;
    m_Count = 0L;
    m_CountIsSet = false;
    m_Average_time = 0L;
    m_Average_timeIsSet = false;
    m_Total_time = 0L;
    m_Total_timeIsSet = false;
}

V0_0_39_stats_msg_rpcs_by_type_inner::~V0_0_39_stats_msg_rpcs_by_type_inner()
{
}

void V0_0_39_stats_msg_rpcs_by_type_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_stats_msg_rpcs_by_type_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Message_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("message_type"))] = ModelBase::toJson(m_Message_type);
    }
    if(m_Type_idIsSet)
    {
        val[utility::conversions::to_string_t(U("type_id"))] = ModelBase::toJson(m_Type_id);
    }
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_Average_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("average_time"))] = ModelBase::toJson(m_Average_time);
    }
    if(m_Total_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("total_time"))] = ModelBase::toJson(m_Total_time);
    }

    return val;
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("message_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessageType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessageType);
            setMessageType(refVal_setMessageType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTypeId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTypeId);
            setTypeId(refVal_setTypeId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("average_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setAverageTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverageTime);
            setAverageTime(refVal_setAverageTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setTotalTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalTime);
            setTotalTime(refVal_setTotalTime);
        }
    }
    return ok;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Message_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message_type")), m_Message_type));
    }
    if(m_Type_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type_id")), m_Type_id));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_Average_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average_time")), m_Average_time));
    }
    if(m_Total_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total_time")), m_Total_time));
    }
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("message_type"))))
    {
        utility::string_t refVal_setMessageType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message_type"))), refVal_setMessageType );
        setMessageType(refVal_setMessageType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type_id"))))
    {
        int32_t refVal_setTypeId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type_id"))), refVal_setTypeId );
        setTypeId(refVal_setTypeId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int64_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("average_time"))))
    {
        int64_t refVal_setAverageTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average_time"))), refVal_setAverageTime );
        setAverageTime(refVal_setAverageTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total_time"))))
    {
        int64_t refVal_setTotalTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total_time"))), refVal_setTotalTime );
        setTotalTime(refVal_setTotalTime);
    }
    return ok;
}

utility::string_t V0_0_39_stats_msg_rpcs_by_type_inner::getMessageType() const
{
    return m_Message_type;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::setMessageType(const utility::string_t& value)
{
    m_Message_type = value;
    m_Message_typeIsSet = true;
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::messageTypeIsSet() const
{
    return m_Message_typeIsSet;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::unsetMessage_type()
{
    m_Message_typeIsSet = false;
}
int32_t V0_0_39_stats_msg_rpcs_by_type_inner::getTypeId() const
{
    return m_Type_id;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::setTypeId(int32_t value)
{
    m_Type_id = value;
    m_Type_idIsSet = true;
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::r_typeIdIsSet() const
{
    return m_Type_idIsSet;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::unsetType_id()
{
    m_Type_idIsSet = false;
}
int64_t V0_0_39_stats_msg_rpcs_by_type_inner::getCount() const
{
    return m_Count;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::setCount(int64_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::countIsSet() const
{
    return m_CountIsSet;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::unsetCount()
{
    m_CountIsSet = false;
}
int64_t V0_0_39_stats_msg_rpcs_by_type_inner::getAverageTime() const
{
    return m_Average_time;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::setAverageTime(int64_t value)
{
    m_Average_time = value;
    m_Average_timeIsSet = true;
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::averageTimeIsSet() const
{
    return m_Average_timeIsSet;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::unsetAverage_time()
{
    m_Average_timeIsSet = false;
}
int64_t V0_0_39_stats_msg_rpcs_by_type_inner::getTotalTime() const
{
    return m_Total_time;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::setTotalTime(int64_t value)
{
    m_Total_time = value;
    m_Total_timeIsSet = true;
}

bool V0_0_39_stats_msg_rpcs_by_type_inner::totalTimeIsSet() const
{
    return m_Total_timeIsSet;
}

void V0_0_39_stats_msg_rpcs_by_type_inner::unsetTotal_time()
{
    m_Total_timeIsSet = false;
}
}
}
}
}


