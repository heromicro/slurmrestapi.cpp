/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_assoc_shares_obj_wrap_fairshare.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_assoc_shares_obj_wrap_fairshare::V0_0_40_assoc_shares_obj_wrap_fairshare()
{
    m_Factor = 0.0;
    m_FactorIsSet = false;
    m_Level = 0.0;
    m_LevelIsSet = false;
}

V0_0_40_assoc_shares_obj_wrap_fairshare::~V0_0_40_assoc_shares_obj_wrap_fairshare()
{
}

void V0_0_40_assoc_shares_obj_wrap_fairshare::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_assoc_shares_obj_wrap_fairshare::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_FactorIsSet)
    {
        val[utility::conversions::to_string_t(U("factor"))] = ModelBase::toJson(m_Factor);
    }
    if(m_LevelIsSet)
    {
        val[utility::conversions::to_string_t(U("level"))] = ModelBase::toJson(m_Level);
    }

    return val;
}

bool V0_0_40_assoc_shares_obj_wrap_fairshare::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("factor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("factor")));
        if(!fieldValue.is_null())
        {
            double refVal_setFactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFactor);
            setFactor(refVal_setFactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("level")));
        if(!fieldValue.is_null())
        {
            double refVal_setLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLevel);
            setLevel(refVal_setLevel);
        }
    }
    return ok;
}

void V0_0_40_assoc_shares_obj_wrap_fairshare::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_FactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("factor")), m_Factor));
    }
    if(m_LevelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("level")), m_Level));
    }
}

bool V0_0_40_assoc_shares_obj_wrap_fairshare::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("factor"))))
    {
        double refVal_setFactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("factor"))), refVal_setFactor );
        setFactor(refVal_setFactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("level"))))
    {
        double refVal_setLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("level"))), refVal_setLevel );
        setLevel(refVal_setLevel);
    }
    return ok;
}

double V0_0_40_assoc_shares_obj_wrap_fairshare::getFactor() const
{
    return m_Factor;
}

void V0_0_40_assoc_shares_obj_wrap_fairshare::setFactor(double value)
{
    m_Factor = value;
    m_FactorIsSet = true;
}

bool V0_0_40_assoc_shares_obj_wrap_fairshare::factorIsSet() const
{
    return m_FactorIsSet;
}

void V0_0_40_assoc_shares_obj_wrap_fairshare::unsetFactor()
{
    m_FactorIsSet = false;
}
double V0_0_40_assoc_shares_obj_wrap_fairshare::getLevel() const
{
    return m_Level;
}

void V0_0_40_assoc_shares_obj_wrap_fairshare::setLevel(double value)
{
    m_Level = value;
    m_LevelIsSet = true;
}

bool V0_0_40_assoc_shares_obj_wrap_fairshare::levelIsSet() const
{
    return m_LevelIsSet;
}

void V0_0_40_assoc_shares_obj_wrap_fairshare::unsetLevel()
{
    m_LevelIsSet = false;
}
}
}
}
}


