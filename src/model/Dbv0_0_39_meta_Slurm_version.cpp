/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_39_meta_Slurm_version.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



Dbv0_0_39_meta_Slurm_version::Dbv0_0_39_meta_Slurm_version()
{
    m_Major = 0;
    m_MajorIsSet = false;
    m_Micro = 0;
    m_MicroIsSet = false;
    m_Minor = 0;
    m_MinorIsSet = false;
}

Dbv0_0_39_meta_Slurm_version::~Dbv0_0_39_meta_Slurm_version()
{
}

void Dbv0_0_39_meta_Slurm_version::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_39_meta_Slurm_version::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MajorIsSet)
    {
        val[utility::conversions::to_string_t(U("major"))] = ModelBase::toJson(m_Major);
    }
    if(m_MicroIsSet)
    {
        val[utility::conversions::to_string_t(U("micro"))] = ModelBase::toJson(m_Micro);
    }
    if(m_MinorIsSet)
    {
        val[utility::conversions::to_string_t(U("minor"))] = ModelBase::toJson(m_Minor);
    }

    return val;
}

bool Dbv0_0_39_meta_Slurm_version::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("major"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("major")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMajor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMajor);
            setMajor(refVal_setMajor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("micro"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("micro")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMicro;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMicro);
            setMicro(refVal_setMicro);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minor")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinor);
            setMinor(refVal_setMinor);
        }
    }
    return ok;
}

void Dbv0_0_39_meta_Slurm_version::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MajorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("major")), m_Major));
    }
    if(m_MicroIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("micro")), m_Micro));
    }
    if(m_MinorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minor")), m_Minor));
    }
}

bool Dbv0_0_39_meta_Slurm_version::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("major"))))
    {
        int32_t refVal_setMajor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("major"))), refVal_setMajor );
        setMajor(refVal_setMajor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("micro"))))
    {
        int32_t refVal_setMicro;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("micro"))), refVal_setMicro );
        setMicro(refVal_setMicro);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minor"))))
    {
        int32_t refVal_setMinor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minor"))), refVal_setMinor );
        setMinor(refVal_setMinor);
    }
    return ok;
}

int32_t Dbv0_0_39_meta_Slurm_version::getMajor() const
{
    return m_Major;
}

void Dbv0_0_39_meta_Slurm_version::setMajor(int32_t value)
{
    m_Major = value;
    m_MajorIsSet = true;
}

bool Dbv0_0_39_meta_Slurm_version::majorIsSet() const
{
    return m_MajorIsSet;
}

void Dbv0_0_39_meta_Slurm_version::unsetMajor()
{
    m_MajorIsSet = false;
}
int32_t Dbv0_0_39_meta_Slurm_version::getMicro() const
{
    return m_Micro;
}

void Dbv0_0_39_meta_Slurm_version::setMicro(int32_t value)
{
    m_Micro = value;
    m_MicroIsSet = true;
}

bool Dbv0_0_39_meta_Slurm_version::microIsSet() const
{
    return m_MicroIsSet;
}

void Dbv0_0_39_meta_Slurm_version::unsetMicro()
{
    m_MicroIsSet = false;
}
int32_t Dbv0_0_39_meta_Slurm_version::getMinor() const
{
    return m_Minor;
}

void Dbv0_0_39_meta_Slurm_version::setMinor(int32_t value)
{
    m_Minor = value;
    m_MinorIsSet = true;
}

bool Dbv0_0_39_meta_Slurm_version::minorIsSet() const
{
    return m_MinorIsSet;
}

void Dbv0_0_39_meta_Slurm_version::unsetMinor()
{
    m_MinorIsSet = false;
}
}
}
}
}


