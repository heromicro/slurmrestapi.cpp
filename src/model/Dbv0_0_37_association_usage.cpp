/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_37_association_usage.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_37_association_usage::Dbv0_0_37_association_usage()
{
    m_Accrue_job_count = 0;
    m_Accrue_job_countIsSet = false;
    m_Group_used_wallclock = 0.0;
    m_Group_used_wallclockIsSet = false;
    m_Fairshare_factor = 0.0;
    m_Fairshare_factorIsSet = false;
    m_Fairshare_shares = 0;
    m_Fairshare_sharesIsSet = false;
    m_Normalized_priority = 0;
    m_Normalized_priorityIsSet = false;
    m_Normalized_shares = 0.0;
    m_Normalized_sharesIsSet = false;
    m_Effective_normalized_usage = 0.0;
    m_Effective_normalized_usageIsSet = false;
    m_Raw_usage = 0;
    m_Raw_usageIsSet = false;
    m_Job_count = 0;
    m_Job_countIsSet = false;
    m_Fairshare_level = 0.0;
    m_Fairshare_levelIsSet = false;
}

Dbv0_0_37_association_usage::~Dbv0_0_37_association_usage()
{
}

void Dbv0_0_37_association_usage::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_37_association_usage::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Accrue_job_countIsSet)
    {
        val[utility::conversions::to_string_t(U("accrue_job_count"))] = ModelBase::toJson(m_Accrue_job_count);
    }
    if(m_Group_used_wallclockIsSet)
    {
        val[utility::conversions::to_string_t(U("group_used_wallclock"))] = ModelBase::toJson(m_Group_used_wallclock);
    }
    if(m_Fairshare_factorIsSet)
    {
        val[utility::conversions::to_string_t(U("fairshare_factor"))] = ModelBase::toJson(m_Fairshare_factor);
    }
    if(m_Fairshare_sharesIsSet)
    {
        val[utility::conversions::to_string_t(U("fairshare_shares"))] = ModelBase::toJson(m_Fairshare_shares);
    }
    if(m_Normalized_priorityIsSet)
    {
        val[utility::conversions::to_string_t(U("normalized_priority"))] = ModelBase::toJson(m_Normalized_priority);
    }
    if(m_Normalized_sharesIsSet)
    {
        val[utility::conversions::to_string_t(U("normalized_shares"))] = ModelBase::toJson(m_Normalized_shares);
    }
    if(m_Effective_normalized_usageIsSet)
    {
        val[utility::conversions::to_string_t(U("effective_normalized_usage"))] = ModelBase::toJson(m_Effective_normalized_usage);
    }
    if(m_Raw_usageIsSet)
    {
        val[utility::conversions::to_string_t(U("raw_usage"))] = ModelBase::toJson(m_Raw_usage);
    }
    if(m_Job_countIsSet)
    {
        val[utility::conversions::to_string_t(U("job_count"))] = ModelBase::toJson(m_Job_count);
    }
    if(m_Fairshare_levelIsSet)
    {
        val[utility::conversions::to_string_t(U("fairshare_level"))] = ModelBase::toJson(m_Fairshare_level);
    }

    return val;
}

bool Dbv0_0_37_association_usage::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("accrue_job_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accrue_job_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAccrueJobCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccrueJobCount);
            setAccrueJobCount(refVal_setAccrueJobCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group_used_wallclock"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group_used_wallclock")));
        if(!fieldValue.is_null())
        {
            double refVal_setGroupUsedWallclock;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroupUsedWallclock);
            setGroupUsedWallclock(refVal_setGroupUsedWallclock);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fairshare_factor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fairshare_factor")));
        if(!fieldValue.is_null())
        {
            double refVal_setFairshareFactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFairshareFactor);
            setFairshareFactor(refVal_setFairshareFactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fairshare_shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fairshare_shares")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFairshareShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFairshareShares);
            setFairshareShares(refVal_setFairshareShares);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("normalized_priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("normalized_priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNormalizedPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNormalizedPriority);
            setNormalizedPriority(refVal_setNormalizedPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("normalized_shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("normalized_shares")));
        if(!fieldValue.is_null())
        {
            double refVal_setNormalizedShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNormalizedShares);
            setNormalizedShares(refVal_setNormalizedShares);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("effective_normalized_usage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("effective_normalized_usage")));
        if(!fieldValue.is_null())
        {
            double refVal_setEffectiveNormalizedUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEffectiveNormalizedUsage);
            setEffectiveNormalizedUsage(refVal_setEffectiveNormalizedUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("raw_usage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("raw_usage")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRawUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRawUsage);
            setRawUsage(refVal_setRawUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobCount);
            setJobCount(refVal_setJobCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fairshare_level"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fairshare_level")));
        if(!fieldValue.is_null())
        {
            double refVal_setFairshareLevel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFairshareLevel);
            setFairshareLevel(refVal_setFairshareLevel);
        }
    }
    return ok;
}

void Dbv0_0_37_association_usage::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Accrue_job_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accrue_job_count")), m_Accrue_job_count));
    }
    if(m_Group_used_wallclockIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group_used_wallclock")), m_Group_used_wallclock));
    }
    if(m_Fairshare_factorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fairshare_factor")), m_Fairshare_factor));
    }
    if(m_Fairshare_sharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fairshare_shares")), m_Fairshare_shares));
    }
    if(m_Normalized_priorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("normalized_priority")), m_Normalized_priority));
    }
    if(m_Normalized_sharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("normalized_shares")), m_Normalized_shares));
    }
    if(m_Effective_normalized_usageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("effective_normalized_usage")), m_Effective_normalized_usage));
    }
    if(m_Raw_usageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("raw_usage")), m_Raw_usage));
    }
    if(m_Job_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_count")), m_Job_count));
    }
    if(m_Fairshare_levelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fairshare_level")), m_Fairshare_level));
    }
}

bool Dbv0_0_37_association_usage::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("accrue_job_count"))))
    {
        int32_t refVal_setAccrueJobCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accrue_job_count"))), refVal_setAccrueJobCount );
        setAccrueJobCount(refVal_setAccrueJobCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group_used_wallclock"))))
    {
        double refVal_setGroupUsedWallclock;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group_used_wallclock"))), refVal_setGroupUsedWallclock );
        setGroupUsedWallclock(refVal_setGroupUsedWallclock);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fairshare_factor"))))
    {
        double refVal_setFairshareFactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fairshare_factor"))), refVal_setFairshareFactor );
        setFairshareFactor(refVal_setFairshareFactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fairshare_shares"))))
    {
        int32_t refVal_setFairshareShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fairshare_shares"))), refVal_setFairshareShares );
        setFairshareShares(refVal_setFairshareShares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("normalized_priority"))))
    {
        int32_t refVal_setNormalizedPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("normalized_priority"))), refVal_setNormalizedPriority );
        setNormalizedPriority(refVal_setNormalizedPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("normalized_shares"))))
    {
        double refVal_setNormalizedShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("normalized_shares"))), refVal_setNormalizedShares );
        setNormalizedShares(refVal_setNormalizedShares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("effective_normalized_usage"))))
    {
        double refVal_setEffectiveNormalizedUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("effective_normalized_usage"))), refVal_setEffectiveNormalizedUsage );
        setEffectiveNormalizedUsage(refVal_setEffectiveNormalizedUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("raw_usage"))))
    {
        int32_t refVal_setRawUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("raw_usage"))), refVal_setRawUsage );
        setRawUsage(refVal_setRawUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_count"))))
    {
        int32_t refVal_setJobCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_count"))), refVal_setJobCount );
        setJobCount(refVal_setJobCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fairshare_level"))))
    {
        double refVal_setFairshareLevel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fairshare_level"))), refVal_setFairshareLevel );
        setFairshareLevel(refVal_setFairshareLevel);
    }
    return ok;
}

int32_t Dbv0_0_37_association_usage::getAccrueJobCount() const
{
    return m_Accrue_job_count;
}

void Dbv0_0_37_association_usage::setAccrueJobCount(int32_t value)
{
    m_Accrue_job_count = value;
    m_Accrue_job_countIsSet = true;
}

bool Dbv0_0_37_association_usage::accrueJobCountIsSet() const
{
    return m_Accrue_job_countIsSet;
}

void Dbv0_0_37_association_usage::unsetAccrue_job_count()
{
    m_Accrue_job_countIsSet = false;
}
double Dbv0_0_37_association_usage::getGroupUsedWallclock() const
{
    return m_Group_used_wallclock;
}

void Dbv0_0_37_association_usage::setGroupUsedWallclock(double value)
{
    m_Group_used_wallclock = value;
    m_Group_used_wallclockIsSet = true;
}

bool Dbv0_0_37_association_usage::groupUsedWallclockIsSet() const
{
    return m_Group_used_wallclockIsSet;
}

void Dbv0_0_37_association_usage::unsetGroup_used_wallclock()
{
    m_Group_used_wallclockIsSet = false;
}
double Dbv0_0_37_association_usage::getFairshareFactor() const
{
    return m_Fairshare_factor;
}

void Dbv0_0_37_association_usage::setFairshareFactor(double value)
{
    m_Fairshare_factor = value;
    m_Fairshare_factorIsSet = true;
}

bool Dbv0_0_37_association_usage::fairshareFactorIsSet() const
{
    return m_Fairshare_factorIsSet;
}

void Dbv0_0_37_association_usage::unsetFairshare_factor()
{
    m_Fairshare_factorIsSet = false;
}
int32_t Dbv0_0_37_association_usage::getFairshareShares() const
{
    return m_Fairshare_shares;
}

void Dbv0_0_37_association_usage::setFairshareShares(int32_t value)
{
    m_Fairshare_shares = value;
    m_Fairshare_sharesIsSet = true;
}

bool Dbv0_0_37_association_usage::fairshareSharesIsSet() const
{
    return m_Fairshare_sharesIsSet;
}

void Dbv0_0_37_association_usage::unsetFairshare_shares()
{
    m_Fairshare_sharesIsSet = false;
}
int32_t Dbv0_0_37_association_usage::getNormalizedPriority() const
{
    return m_Normalized_priority;
}

void Dbv0_0_37_association_usage::setNormalizedPriority(int32_t value)
{
    m_Normalized_priority = value;
    m_Normalized_priorityIsSet = true;
}

bool Dbv0_0_37_association_usage::normalizedPriorityIsSet() const
{
    return m_Normalized_priorityIsSet;
}

void Dbv0_0_37_association_usage::unsetNormalized_priority()
{
    m_Normalized_priorityIsSet = false;
}
double Dbv0_0_37_association_usage::getNormalizedShares() const
{
    return m_Normalized_shares;
}

void Dbv0_0_37_association_usage::setNormalizedShares(double value)
{
    m_Normalized_shares = value;
    m_Normalized_sharesIsSet = true;
}

bool Dbv0_0_37_association_usage::normalizedSharesIsSet() const
{
    return m_Normalized_sharesIsSet;
}

void Dbv0_0_37_association_usage::unsetNormalized_shares()
{
    m_Normalized_sharesIsSet = false;
}
double Dbv0_0_37_association_usage::getEffectiveNormalizedUsage() const
{
    return m_Effective_normalized_usage;
}

void Dbv0_0_37_association_usage::setEffectiveNormalizedUsage(double value)
{
    m_Effective_normalized_usage = value;
    m_Effective_normalized_usageIsSet = true;
}

bool Dbv0_0_37_association_usage::effectiveNormalizedUsageIsSet() const
{
    return m_Effective_normalized_usageIsSet;
}

void Dbv0_0_37_association_usage::unsetEffective_normalized_usage()
{
    m_Effective_normalized_usageIsSet = false;
}
int32_t Dbv0_0_37_association_usage::getRawUsage() const
{
    return m_Raw_usage;
}

void Dbv0_0_37_association_usage::setRawUsage(int32_t value)
{
    m_Raw_usage = value;
    m_Raw_usageIsSet = true;
}

bool Dbv0_0_37_association_usage::rawUsageIsSet() const
{
    return m_Raw_usageIsSet;
}

void Dbv0_0_37_association_usage::unsetRaw_usage()
{
    m_Raw_usageIsSet = false;
}
int32_t Dbv0_0_37_association_usage::getJobCount() const
{
    return m_Job_count;
}

void Dbv0_0_37_association_usage::setJobCount(int32_t value)
{
    m_Job_count = value;
    m_Job_countIsSet = true;
}

bool Dbv0_0_37_association_usage::jobCountIsSet() const
{
    return m_Job_countIsSet;
}

void Dbv0_0_37_association_usage::unsetJob_count()
{
    m_Job_countIsSet = false;
}
double Dbv0_0_37_association_usage::getFairshareLevel() const
{
    return m_Fairshare_level;
}

void Dbv0_0_37_association_usage::setFairshareLevel(double value)
{
    m_Fairshare_level = value;
    m_Fairshare_levelIsSet = true;
}

bool Dbv0_0_37_association_usage::fairshareLevelIsSet() const
{
    return m_Fairshare_levelIsSet;
}

void Dbv0_0_37_association_usage::unsetFairshare_level()
{
    m_Fairshare_levelIsSet = false;
}
}
}
}
}


