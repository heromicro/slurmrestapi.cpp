/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_schedule_exit_fields.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_40_schedule_exit_fields::V0_0_40_schedule_exit_fields()
{
    m_End_job_queue = 0;
    m_End_job_queueIsSet = false;
    m_Default_queue_depth = 0;
    m_Default_queue_depthIsSet = false;
    m_Max_job_start = 0;
    m_Max_job_startIsSet = false;
    m_Max_rpc_cnt = 0;
    m_Max_rpc_cntIsSet = false;
    m_Max_sched_time = 0;
    m_Max_sched_timeIsSet = false;
    m_Licenses = 0;
    m_LicensesIsSet = false;
}

V0_0_40_schedule_exit_fields::~V0_0_40_schedule_exit_fields()
{
}

void V0_0_40_schedule_exit_fields::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_schedule_exit_fields::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_End_job_queueIsSet)
    {
        val[utility::conversions::to_string_t(U("end_job_queue"))] = ModelBase::toJson(m_End_job_queue);
    }
    if(m_Default_queue_depthIsSet)
    {
        val[utility::conversions::to_string_t(U("default_queue_depth"))] = ModelBase::toJson(m_Default_queue_depth);
    }
    if(m_Max_job_startIsSet)
    {
        val[utility::conversions::to_string_t(U("max_job_start"))] = ModelBase::toJson(m_Max_job_start);
    }
    if(m_Max_rpc_cntIsSet)
    {
        val[utility::conversions::to_string_t(U("max_rpc_cnt"))] = ModelBase::toJson(m_Max_rpc_cnt);
    }
    if(m_Max_sched_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("max_sched_time"))] = ModelBase::toJson(m_Max_sched_time);
    }
    if(m_LicensesIsSet)
    {
        val[utility::conversions::to_string_t(U("licenses"))] = ModelBase::toJson(m_Licenses);
    }

    return val;
}

bool V0_0_40_schedule_exit_fields::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("end_job_queue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("end_job_queue")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEndJobQueue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEndJobQueue);
            setEndJobQueue(refVal_setEndJobQueue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("default_queue_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("default_queue_depth")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDefaultQueueDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDefaultQueueDepth);
            setDefaultQueueDepth(refVal_setDefaultQueueDepth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_job_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_job_start")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxJobStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxJobStart);
            setMaxJobStart(refVal_setMaxJobStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_rpc_cnt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_rpc_cnt")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxRpcCnt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxRpcCnt);
            setMaxRpcCnt(refVal_setMaxRpcCnt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("max_sched_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max_sched_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMaxSchedTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaxSchedTime);
            setMaxSchedTime(refVal_setMaxSchedTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenses")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setLicenses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenses);
            setLicenses(refVal_setLicenses);
        }
    }
    return ok;
}

void V0_0_40_schedule_exit_fields::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_End_job_queueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("end_job_queue")), m_End_job_queue));
    }
    if(m_Default_queue_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("default_queue_depth")), m_Default_queue_depth));
    }
    if(m_Max_job_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_job_start")), m_Max_job_start));
    }
    if(m_Max_rpc_cntIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_rpc_cnt")), m_Max_rpc_cnt));
    }
    if(m_Max_sched_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max_sched_time")), m_Max_sched_time));
    }
    if(m_LicensesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenses")), m_Licenses));
    }
}

bool V0_0_40_schedule_exit_fields::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("end_job_queue"))))
    {
        int32_t refVal_setEndJobQueue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("end_job_queue"))), refVal_setEndJobQueue );
        setEndJobQueue(refVal_setEndJobQueue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("default_queue_depth"))))
    {
        int32_t refVal_setDefaultQueueDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("default_queue_depth"))), refVal_setDefaultQueueDepth );
        setDefaultQueueDepth(refVal_setDefaultQueueDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_job_start"))))
    {
        int32_t refVal_setMaxJobStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_job_start"))), refVal_setMaxJobStart );
        setMaxJobStart(refVal_setMaxJobStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_rpc_cnt"))))
    {
        int32_t refVal_setMaxRpcCnt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_rpc_cnt"))), refVal_setMaxRpcCnt );
        setMaxRpcCnt(refVal_setMaxRpcCnt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("max_sched_time"))))
    {
        int32_t refVal_setMaxSchedTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max_sched_time"))), refVal_setMaxSchedTime );
        setMaxSchedTime(refVal_setMaxSchedTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenses"))))
    {
        int32_t refVal_setLicenses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenses"))), refVal_setLicenses );
        setLicenses(refVal_setLicenses);
    }
    return ok;
}

int32_t V0_0_40_schedule_exit_fields::getEndJobQueue() const
{
    return m_End_job_queue;
}

void V0_0_40_schedule_exit_fields::setEndJobQueue(int32_t value)
{
    m_End_job_queue = value;
    m_End_job_queueIsSet = true;
}

bool V0_0_40_schedule_exit_fields::endJobQueueIsSet() const
{
    return m_End_job_queueIsSet;
}

void V0_0_40_schedule_exit_fields::unsetEnd_job_queue()
{
    m_End_job_queueIsSet = false;
}
int32_t V0_0_40_schedule_exit_fields::getDefaultQueueDepth() const
{
    return m_Default_queue_depth;
}

void V0_0_40_schedule_exit_fields::setDefaultQueueDepth(int32_t value)
{
    m_Default_queue_depth = value;
    m_Default_queue_depthIsSet = true;
}

bool V0_0_40_schedule_exit_fields::defaultQueueDepthIsSet() const
{
    return m_Default_queue_depthIsSet;
}

void V0_0_40_schedule_exit_fields::unsetDefault_queue_depth()
{
    m_Default_queue_depthIsSet = false;
}
int32_t V0_0_40_schedule_exit_fields::getMaxJobStart() const
{
    return m_Max_job_start;
}

void V0_0_40_schedule_exit_fields::setMaxJobStart(int32_t value)
{
    m_Max_job_start = value;
    m_Max_job_startIsSet = true;
}

bool V0_0_40_schedule_exit_fields::maxJobStartIsSet() const
{
    return m_Max_job_startIsSet;
}

void V0_0_40_schedule_exit_fields::unsetMax_job_start()
{
    m_Max_job_startIsSet = false;
}
int32_t V0_0_40_schedule_exit_fields::getMaxRpcCnt() const
{
    return m_Max_rpc_cnt;
}

void V0_0_40_schedule_exit_fields::setMaxRpcCnt(int32_t value)
{
    m_Max_rpc_cnt = value;
    m_Max_rpc_cntIsSet = true;
}

bool V0_0_40_schedule_exit_fields::maxRpcCntIsSet() const
{
    return m_Max_rpc_cntIsSet;
}

void V0_0_40_schedule_exit_fields::unsetMax_rpc_cnt()
{
    m_Max_rpc_cntIsSet = false;
}
int32_t V0_0_40_schedule_exit_fields::getMaxSchedTime() const
{
    return m_Max_sched_time;
}

void V0_0_40_schedule_exit_fields::setMaxSchedTime(int32_t value)
{
    m_Max_sched_time = value;
    m_Max_sched_timeIsSet = true;
}

bool V0_0_40_schedule_exit_fields::maxSchedTimeIsSet() const
{
    return m_Max_sched_timeIsSet;
}

void V0_0_40_schedule_exit_fields::unsetMax_sched_time()
{
    m_Max_sched_timeIsSet = false;
}
int32_t V0_0_40_schedule_exit_fields::getLicenses() const
{
    return m_Licenses;
}

void V0_0_40_schedule_exit_fields::setLicenses(int32_t value)
{
    m_Licenses = value;
    m_LicensesIsSet = true;
}

bool V0_0_40_schedule_exit_fields::licensesIsSet() const
{
    return m_LicensesIsSet;
}

void V0_0_40_schedule_exit_fields::unsetLicenses()
{
    m_LicensesIsSet = false;
}
}
}
}
}


