/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_partition_info_priority.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_partition_info_priority::V0_0_40_partition_info_priority()
{
    m_Job_factor = 0;
    m_Job_factorIsSet = false;
    m_Tier = 0;
    m_TierIsSet = false;
}

V0_0_40_partition_info_priority::~V0_0_40_partition_info_priority()
{
}

void V0_0_40_partition_info_priority::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_partition_info_priority::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Job_factorIsSet)
    {
        val[utility::conversions::to_string_t(U("job_factor"))] = ModelBase::toJson(m_Job_factor);
    }
    if(m_TierIsSet)
    {
        val[utility::conversions::to_string_t(U("tier"))] = ModelBase::toJson(m_Tier);
    }

    return val;
}

bool V0_0_40_partition_info_priority::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("job_factor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_factor")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobFactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobFactor);
            setJobFactor(refVal_setJobFactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tier"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tier")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTier;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTier);
            setTier(refVal_setTier);
        }
    }
    return ok;
}

void V0_0_40_partition_info_priority::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Job_factorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_factor")), m_Job_factor));
    }
    if(m_TierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tier")), m_Tier));
    }
}

bool V0_0_40_partition_info_priority::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("job_factor"))))
    {
        int32_t refVal_setJobFactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_factor"))), refVal_setJobFactor );
        setJobFactor(refVal_setJobFactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tier"))))
    {
        int32_t refVal_setTier;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tier"))), refVal_setTier );
        setTier(refVal_setTier);
    }
    return ok;
}

int32_t V0_0_40_partition_info_priority::getJobFactor() const
{
    return m_Job_factor;
}

void V0_0_40_partition_info_priority::setJobFactor(int32_t value)
{
    m_Job_factor = value;
    m_Job_factorIsSet = true;
}

bool V0_0_40_partition_info_priority::jobFactorIsSet() const
{
    return m_Job_factorIsSet;
}

void V0_0_40_partition_info_priority::unsetJob_factor()
{
    m_Job_factorIsSet = false;
}
int32_t V0_0_40_partition_info_priority::getTier() const
{
    return m_Tier;
}

void V0_0_40_partition_info_priority::setTier(int32_t value)
{
    m_Tier = value;
    m_TierIsSet = true;
}

bool V0_0_40_partition_info_priority::tierIsSet() const
{
    return m_TierIsSet;
}

void V0_0_40_partition_info_priority::unsetTier()
{
    m_TierIsSet = false;
}
}
}
}
}


