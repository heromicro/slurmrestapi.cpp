/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner()
{
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Direct = false;
    m_DirectIsSet = false;
}

V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::~V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner()
{
}

void V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DirectIsSet)
    {
        val[utility::conversions::to_string_t(U("direct"))] = ModelBase::toJson(m_Direct);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("direct"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("direct")));
        if(!fieldValue.is_null())
        {
            bool refVal_setDirect;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDirect);
            setDirect(refVal_setDirect);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DirectIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("direct")), m_Direct));
    }
}

bool V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("direct"))))
    {
        bool refVal_setDirect;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("direct"))), refVal_setDirect );
        setDirect(refVal_setDirect);
    }
    return ok;
}

utility::string_t V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::getName() const
{
    return m_Name;
}

void V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::unsetName()
{
    m_NameIsSet = false;
}
bool V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::isDirect() const
{
    return m_Direct;
}

void V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::setDirect(bool value)
{
    m_Direct = value;
    m_DirectIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::directIsSet() const
{
    return m_DirectIsSet;
}

void V0_0_41_openapi_slurmdbd_config_resp_accounts_inner_coordinators_inner::unsetDirect()
{
    m_DirectIsSet = false;
}
}
}
}
}


