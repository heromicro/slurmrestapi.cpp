/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_38_job_properties.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_38_job_properties::V0_0_38_job_properties()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_Account_gather_frequency = utility::conversions::to_string_t("");
    m_Account_gather_frequencyIsSet = false;
    m_ArgvIsSet = false;
    m_array = utility::conversions::to_string_t("");
    m_arrayIsSet = false;
    m_Batch_features = utility::conversions::to_string_t("");
    m_Batch_featuresIsSet = false;
    m_Begin_time = 0L;
    m_Begin_timeIsSet = false;
    m_Burst_buffer = utility::conversions::to_string_t("");
    m_Burst_bufferIsSet = false;
    m_Cluster_constraint = utility::conversions::to_string_t("");
    m_Cluster_constraintIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_Constraints = utility::conversions::to_string_t("");
    m_ConstraintsIsSet = false;
    m_Container = utility::conversions::to_string_t("");
    m_ContainerIsSet = false;
    m_Core_specification = 0;
    m_Core_specificationIsSet = false;
    m_Cores_per_socket = 0;
    m_Cores_per_socketIsSet = false;
    m_Cpu_binding = utility::conversions::to_string_t("");
    m_Cpu_bindingIsSet = false;
    m_Cpu_binding_hint = utility::conversions::to_string_t("");
    m_Cpu_binding_hintIsSet = false;
    m_Cpu_frequency = utility::conversions::to_string_t("");
    m_Cpu_frequencyIsSet = false;
    m_Cpus_per_gpu = utility::conversions::to_string_t("");
    m_Cpus_per_gpuIsSet = false;
    m_Cpus_per_task = 0;
    m_Cpus_per_taskIsSet = false;
    m_Current_working_directory = utility::conversions::to_string_t("");
    m_Current_working_directoryIsSet = false;
    m_Deadline = utility::conversions::to_string_t("");
    m_DeadlineIsSet = false;
    m_Delay_boot = 0;
    m_Delay_bootIsSet = false;
    m_Dependency = utility::conversions::to_string_t("");
    m_DependencyIsSet = false;
    m_Distribution = utility::conversions::to_string_t("");
    m_DistributionIsSet = false;
    m_EnvironmentIsSet = false;
    m_Exclusive = utility::conversions::to_string_t("");
    m_ExclusiveIsSet = false;
    m_Get_user_environment = false;
    m_Get_user_environmentIsSet = false;
    m_Gres = utility::conversions::to_string_t("");
    m_GresIsSet = false;
    m_Gres_flags = utility::conversions::to_string_t("");
    m_Gres_flagsIsSet = false;
    m_Gpu_binding = utility::conversions::to_string_t("");
    m_Gpu_bindingIsSet = false;
    m_Gpu_frequency = utility::conversions::to_string_t("");
    m_Gpu_frequencyIsSet = false;
    m_Gpus = utility::conversions::to_string_t("");
    m_GpusIsSet = false;
    m_Gpus_per_node = utility::conversions::to_string_t("");
    m_Gpus_per_nodeIsSet = false;
    m_Gpus_per_socket = utility::conversions::to_string_t("");
    m_Gpus_per_socketIsSet = false;
    m_Gpus_per_task = utility::conversions::to_string_t("");
    m_Gpus_per_taskIsSet = false;
    m_Hold = false;
    m_HoldIsSet = false;
    m_Kill_on_invalid_dependency = false;
    m_Kill_on_invalid_dependencyIsSet = false;
    m_Licenses = utility::conversions::to_string_t("");
    m_LicensesIsSet = false;
    m_Mail_type = utility::conversions::to_string_t("");
    m_Mail_typeIsSet = false;
    m_Mail_user = utility::conversions::to_string_t("");
    m_Mail_userIsSet = false;
    m_Mcs_label = utility::conversions::to_string_t("");
    m_Mcs_labelIsSet = false;
    m_Memory_binding = utility::conversions::to_string_t("");
    m_Memory_bindingIsSet = false;
    m_Memory_per_cpu = 0;
    m_Memory_per_cpuIsSet = false;
    m_Memory_per_gpu = 0;
    m_Memory_per_gpuIsSet = false;
    m_Memory_per_node = 0;
    m_Memory_per_nodeIsSet = false;
    m_Minimum_cpus_per_node = 0;
    m_Minimum_cpus_per_nodeIsSet = false;
    m_Minimum_nodes = false;
    m_Minimum_nodesIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Nice = 0;
    m_NiceIsSet = false;
    m_No_kill = false;
    m_No_killIsSet = false;
    m_NodesIsSet = false;
    m_Open_mode = utility::conversions::to_string_t("");
    m_Open_modeIsSet = false;
    m_Oversubscribe = false;
    m_OversubscribeIsSet = false;
    m_Partition = utility::conversions::to_string_t("");
    m_PartitionIsSet = false;
    m_Prefer = utility::conversions::to_string_t("");
    m_PreferIsSet = false;
    m_Priority = utility::conversions::to_string_t("");
    m_PriorityIsSet = false;
    m_Qos = utility::conversions::to_string_t("");
    m_QosIsSet = false;
    m_Requeue = false;
    m_RequeueIsSet = false;
    m_Reservation = utility::conversions::to_string_t("");
    m_ReservationIsSet = false;
    m_Signal = utility::conversions::to_string_t("");
    m_SignalIsSet = false;
    m_Sockets_per_node = 0;
    m_Sockets_per_nodeIsSet = false;
    m_Spread_job = false;
    m_Spread_jobIsSet = false;
    m_Standard_error = utility::conversions::to_string_t("");
    m_Standard_errorIsSet = false;
    m_Standard_input = utility::conversions::to_string_t("");
    m_Standard_inputIsSet = false;
    m_Standard_output = utility::conversions::to_string_t("");
    m_Standard_outputIsSet = false;
    m_Tasks = 0;
    m_TasksIsSet = false;
    m_Tasks_per_core = 0;
    m_Tasks_per_coreIsSet = false;
    m_Tasks_per_node = 0;
    m_Tasks_per_nodeIsSet = false;
    m_Tasks_per_socket = 0;
    m_Tasks_per_socketIsSet = false;
    m_Thread_specification = 0;
    m_Thread_specificationIsSet = false;
    m_Threads_per_core = 0;
    m_Threads_per_coreIsSet = false;
    m_Time_limit = 0;
    m_Time_limitIsSet = false;
    m_Time_minimum = 0;
    m_Time_minimumIsSet = false;
    m_Wait_all_nodes = false;
    m_Wait_all_nodesIsSet = false;
    m_Wckey = utility::conversions::to_string_t("");
    m_WckeyIsSet = false;
}

V0_0_38_job_properties::~V0_0_38_job_properties()
{
}

void V0_0_38_job_properties::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_38_job_properties::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_Account_gather_frequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("account_gather_frequency"))] = ModelBase::toJson(m_Account_gather_frequency);
    }
    if(m_ArgvIsSet)
    {
        val[utility::conversions::to_string_t(U("argv"))] = ModelBase::toJson(m_Argv);
    }
    if(m_arrayIsSet)
    {
        val[utility::conversions::to_string_t(U("array"))] = ModelBase::toJson(m_array);
    }
    if(m_Batch_featuresIsSet)
    {
        val[utility::conversions::to_string_t(U("batch_features"))] = ModelBase::toJson(m_Batch_features);
    }
    if(m_Begin_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("begin_time"))] = ModelBase::toJson(m_Begin_time);
    }
    if(m_Burst_bufferIsSet)
    {
        val[utility::conversions::to_string_t(U("burst_buffer"))] = ModelBase::toJson(m_Burst_buffer);
    }
    if(m_Cluster_constraintIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster_constraint"))] = ModelBase::toJson(m_Cluster_constraint);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_ConstraintsIsSet)
    {
        val[utility::conversions::to_string_t(U("constraints"))] = ModelBase::toJson(m_Constraints);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t(U("container"))] = ModelBase::toJson(m_Container);
    }
    if(m_Core_specificationIsSet)
    {
        val[utility::conversions::to_string_t(U("core_specification"))] = ModelBase::toJson(m_Core_specification);
    }
    if(m_Cores_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("cores_per_socket"))] = ModelBase::toJson(m_Cores_per_socket);
    }
    if(m_Cpu_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_binding"))] = ModelBase::toJson(m_Cpu_binding);
    }
    if(m_Cpu_binding_hintIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_binding_hint"))] = ModelBase::toJson(m_Cpu_binding_hint);
    }
    if(m_Cpu_frequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_frequency"))] = ModelBase::toJson(m_Cpu_frequency);
    }
    if(m_Cpus_per_gpuIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus_per_gpu"))] = ModelBase::toJson(m_Cpus_per_gpu);
    }
    if(m_Cpus_per_taskIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus_per_task"))] = ModelBase::toJson(m_Cpus_per_task);
    }
    if(m_Current_working_directoryIsSet)
    {
        val[utility::conversions::to_string_t(U("current_working_directory"))] = ModelBase::toJson(m_Current_working_directory);
    }
    if(m_DeadlineIsSet)
    {
        val[utility::conversions::to_string_t(U("deadline"))] = ModelBase::toJson(m_Deadline);
    }
    if(m_Delay_bootIsSet)
    {
        val[utility::conversions::to_string_t(U("delay_boot"))] = ModelBase::toJson(m_Delay_boot);
    }
    if(m_DependencyIsSet)
    {
        val[utility::conversions::to_string_t(U("dependency"))] = ModelBase::toJson(m_Dependency);
    }
    if(m_DistributionIsSet)
    {
        val[utility::conversions::to_string_t(U("distribution"))] = ModelBase::toJson(m_Distribution);
    }
    if(m_EnvironmentIsSet)
    {
        val[utility::conversions::to_string_t(U("environment"))] = ModelBase::toJson(m_Environment);
    }
    if(m_ExclusiveIsSet)
    {
        val[utility::conversions::to_string_t(U("exclusive"))] = ModelBase::toJson(m_Exclusive);
    }
    if(m_Get_user_environmentIsSet)
    {
        val[utility::conversions::to_string_t(U("get_user_environment"))] = ModelBase::toJson(m_Get_user_environment);
    }
    if(m_GresIsSet)
    {
        val[utility::conversions::to_string_t(U("gres"))] = ModelBase::toJson(m_Gres);
    }
    if(m_Gres_flagsIsSet)
    {
        val[utility::conversions::to_string_t(U("gres_flags"))] = ModelBase::toJson(m_Gres_flags);
    }
    if(m_Gpu_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("gpu_binding"))] = ModelBase::toJson(m_Gpu_binding);
    }
    if(m_Gpu_frequencyIsSet)
    {
        val[utility::conversions::to_string_t(U("gpu_frequency"))] = ModelBase::toJson(m_Gpu_frequency);
    }
    if(m_GpusIsSet)
    {
        val[utility::conversions::to_string_t(U("gpus"))] = ModelBase::toJson(m_Gpus);
    }
    if(m_Gpus_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("gpus_per_node"))] = ModelBase::toJson(m_Gpus_per_node);
    }
    if(m_Gpus_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("gpus_per_socket"))] = ModelBase::toJson(m_Gpus_per_socket);
    }
    if(m_Gpus_per_taskIsSet)
    {
        val[utility::conversions::to_string_t(U("gpus_per_task"))] = ModelBase::toJson(m_Gpus_per_task);
    }
    if(m_HoldIsSet)
    {
        val[utility::conversions::to_string_t(U("hold"))] = ModelBase::toJson(m_Hold);
    }
    if(m_Kill_on_invalid_dependencyIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_on_invalid_dependency"))] = ModelBase::toJson(m_Kill_on_invalid_dependency);
    }
    if(m_LicensesIsSet)
    {
        val[utility::conversions::to_string_t(U("licenses"))] = ModelBase::toJson(m_Licenses);
    }
    if(m_Mail_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_type"))] = ModelBase::toJson(m_Mail_type);
    }
    if(m_Mail_userIsSet)
    {
        val[utility::conversions::to_string_t(U("mail_user"))] = ModelBase::toJson(m_Mail_user);
    }
    if(m_Mcs_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("mcs_label"))] = ModelBase::toJson(m_Mcs_label);
    }
    if(m_Memory_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_binding"))] = ModelBase::toJson(m_Memory_binding);
    }
    if(m_Memory_per_cpuIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_cpu"))] = ModelBase::toJson(m_Memory_per_cpu);
    }
    if(m_Memory_per_gpuIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_gpu"))] = ModelBase::toJson(m_Memory_per_gpu);
    }
    if(m_Memory_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_node"))] = ModelBase::toJson(m_Memory_per_node);
    }
    if(m_Minimum_cpus_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_cpus_per_node"))] = ModelBase::toJson(m_Minimum_cpus_per_node);
    }
    if(m_Minimum_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("minimum_nodes"))] = ModelBase::toJson(m_Minimum_nodes);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_NiceIsSet)
    {
        val[utility::conversions::to_string_t(U("nice"))] = ModelBase::toJson(m_Nice);
    }
    if(m_No_killIsSet)
    {
        val[utility::conversions::to_string_t(U("no_kill"))] = ModelBase::toJson(m_No_kill);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_Open_modeIsSet)
    {
        val[utility::conversions::to_string_t(U("open_mode"))] = ModelBase::toJson(m_Open_mode);
    }
    if(m_OversubscribeIsSet)
    {
        val[utility::conversions::to_string_t(U("oversubscribe"))] = ModelBase::toJson(m_Oversubscribe);
    }
    if(m_PartitionIsSet)
    {
        val[utility::conversions::to_string_t(U("partition"))] = ModelBase::toJson(m_Partition);
    }
    if(m_PreferIsSet)
    {
        val[utility::conversions::to_string_t(U("prefer"))] = ModelBase::toJson(m_Prefer);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_QosIsSet)
    {
        val[utility::conversions::to_string_t(U("qos"))] = ModelBase::toJson(m_Qos);
    }
    if(m_RequeueIsSet)
    {
        val[utility::conversions::to_string_t(U("requeue"))] = ModelBase::toJson(m_Requeue);
    }
    if(m_ReservationIsSet)
    {
        val[utility::conversions::to_string_t(U("reservation"))] = ModelBase::toJson(m_Reservation);
    }
    if(m_SignalIsSet)
    {
        val[utility::conversions::to_string_t(U("signal"))] = ModelBase::toJson(m_Signal);
    }
    if(m_Sockets_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets_per_node"))] = ModelBase::toJson(m_Sockets_per_node);
    }
    if(m_Spread_jobIsSet)
    {
        val[utility::conversions::to_string_t(U("spread_job"))] = ModelBase::toJson(m_Spread_job);
    }
    if(m_Standard_errorIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_error"))] = ModelBase::toJson(m_Standard_error);
    }
    if(m_Standard_inputIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_input"))] = ModelBase::toJson(m_Standard_input);
    }
    if(m_Standard_outputIsSet)
    {
        val[utility::conversions::to_string_t(U("standard_output"))] = ModelBase::toJson(m_Standard_output);
    }
    if(m_TasksIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks"))] = ModelBase::toJson(m_Tasks);
    }
    if(m_Tasks_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_core"))] = ModelBase::toJson(m_Tasks_per_core);
    }
    if(m_Tasks_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_node"))] = ModelBase::toJson(m_Tasks_per_node);
    }
    if(m_Tasks_per_socketIsSet)
    {
        val[utility::conversions::to_string_t(U("tasks_per_socket"))] = ModelBase::toJson(m_Tasks_per_socket);
    }
    if(m_Thread_specificationIsSet)
    {
        val[utility::conversions::to_string_t(U("thread_specification"))] = ModelBase::toJson(m_Thread_specification);
    }
    if(m_Threads_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("threads_per_core"))] = ModelBase::toJson(m_Threads_per_core);
    }
    if(m_Time_limitIsSet)
    {
        val[utility::conversions::to_string_t(U("time_limit"))] = ModelBase::toJson(m_Time_limit);
    }
    if(m_Time_minimumIsSet)
    {
        val[utility::conversions::to_string_t(U("time_minimum"))] = ModelBase::toJson(m_Time_minimum);
    }
    if(m_Wait_all_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("wait_all_nodes"))] = ModelBase::toJson(m_Wait_all_nodes);
    }
    if(m_WckeyIsSet)
    {
        val[utility::conversions::to_string_t(U("wckey"))] = ModelBase::toJson(m_Wckey);
    }

    return val;
}

bool V0_0_38_job_properties::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("account_gather_frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account_gather_frequency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountGatherFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountGatherFrequency);
            setAccountGatherFrequency(refVal_setAccountGatherFrequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("argv"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("argv")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setArgv;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArgv);
            setArgv(refVal_setArgv);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setArray;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArray);
            setArray(refVal_setArray);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("batch_features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("batch_features")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBatchFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBatchFeatures);
            setBatchFeatures(refVal_setBatchFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("begin_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("begin_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBeginTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBeginTime);
            setBeginTime(refVal_setBeginTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("burst_buffer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("burst_buffer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBurstBuffer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBurstBuffer);
            setBurstBuffer(refVal_setBurstBuffer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster_constraint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster_constraint")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClusterConstraint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusterConstraint);
            setClusterConstraint(refVal_setClusterConstraint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constraints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constraints")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConstraints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstraints);
            setConstraints(refVal_setConstraints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainer);
            setContainer(refVal_setContainer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("core_specification"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("core_specification")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCoreSpecification;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoreSpecification);
            setCoreSpecification(refVal_setCoreSpecification);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cores_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cores_per_socket")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCoresPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCoresPerSocket);
            setCoresPerSocket(refVal_setCoresPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_binding")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpuBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuBinding);
            setCpuBinding(refVal_setCpuBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_binding_hint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_binding_hint")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpuBindingHint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuBindingHint);
            setCpuBindingHint(refVal_setCpuBindingHint);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_frequency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpuFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuFrequency);
            setCpuFrequency(refVal_setCpuFrequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus_per_gpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus_per_gpu")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCpusPerGpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpusPerGpu);
            setCpusPerGpu(refVal_setCpusPerGpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus_per_task"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus_per_task")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCpusPerTask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpusPerTask);
            setCpusPerTask(refVal_setCpusPerTask);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("current_working_directory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current_working_directory")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCurrentWorkingDirectory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrentWorkingDirectory);
            setCurrentWorkingDirectory(refVal_setCurrentWorkingDirectory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deadline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deadline")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDeadline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeadline);
            setDeadline(refVal_setDeadline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("delay_boot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("delay_boot")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDelayBoot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDelayBoot);
            setDelayBoot(refVal_setDelayBoot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dependency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dependency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDependency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDependency);
            setDependency(refVal_setDependency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("distribution"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("distribution")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDistribution;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDistribution);
            setDistribution(refVal_setDistribution);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("environment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("environment")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setEnvironment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnvironment);
            setEnvironment(refVal_setEnvironment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exclusive"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exclusive")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExclusive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExclusive);
            setExclusive(refVal_setExclusive);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("get_user_environment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("get_user_environment")));
        if(!fieldValue.is_null())
        {
            bool refVal_setGetUserEnvironment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGetUserEnvironment);
            setGetUserEnvironment(refVal_setGetUserEnvironment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGres);
            setGres(refVal_setGres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gres_flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gres_flags")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGresFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGresFlags);
            setGresFlags(refVal_setGresFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpu_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpu_binding")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpuBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpuBinding);
            setGpuBinding(refVal_setGpuBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpu_frequency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpu_frequency")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpuFrequency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpuFrequency);
            setGpuFrequency(refVal_setGpuFrequency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpus);
            setGpus(refVal_setGpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpus_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpus_per_node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpusPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpusPerNode);
            setGpusPerNode(refVal_setGpusPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpus_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpus_per_socket")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpusPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpusPerSocket);
            setGpusPerSocket(refVal_setGpusPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gpus_per_task"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gpus_per_task")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGpusPerTask;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGpusPerTask);
            setGpusPerTask(refVal_setGpusPerTask);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hold"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hold")));
        if(!fieldValue.is_null())
        {
            bool refVal_setHold;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHold);
            setHold(refVal_setHold);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_on_invalid_dependency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_on_invalid_dependency")));
        if(!fieldValue.is_null())
        {
            bool refVal_setKillOnInvalidDependency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillOnInvalidDependency);
            setKillOnInvalidDependency(refVal_setKillOnInvalidDependency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("licenses"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("licenses")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenses;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenses);
            setLicenses(refVal_setLicenses);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailType);
            setMailType(refVal_setMailType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mail_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mail_user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMailUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMailUser);
            setMailUser(refVal_setMailUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcs_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcs_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMcsLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcsLabel);
            setMcsLabel(refVal_setMcsLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_binding")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMemoryBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryBinding);
            setMemoryBinding(refVal_setMemoryBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_cpu")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryPerCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerCpu);
            setMemoryPerCpu(refVal_setMemoryPerCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_gpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_gpu")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryPerGpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerGpu);
            setMemoryPerGpu(refVal_setMemoryPerGpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMemoryPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerNode);
            setMemoryPerNode(refVal_setMemoryPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_cpus_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_cpus_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMinimumCpusPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumCpusPerNode);
            setMinimumCpusPerNode(refVal_setMinimumCpusPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("minimum_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minimum_nodes")));
        if(!fieldValue.is_null())
        {
            bool refVal_setMinimumNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinimumNodes);
            setMinimumNodes(refVal_setMinimumNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nice")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setNice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNice);
            setNice(refVal_setNice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("no_kill"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("no_kill")));
        if(!fieldValue.is_null())
        {
            bool refVal_setNoKill;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNoKill);
            setNoKill(refVal_setNoKill);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            std::vector<int32_t> refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("open_mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("open_mode")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOpenMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOpenMode);
            setOpenMode(refVal_setOpenMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("oversubscribe"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("oversubscribe")));
        if(!fieldValue.is_null())
        {
            bool refVal_setOversubscribe;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOversubscribe);
            setOversubscribe(refVal_setOversubscribe);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartition);
            setPartition(refVal_setPartition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("prefer"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("prefer")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPrefer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrefer);
            setPrefer(refVal_setPrefer);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qos")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQos);
            setQos(refVal_setQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requeue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requeue")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRequeue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequeue);
            setRequeue(refVal_setRequeue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reservation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reservation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReservation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReservation);
            setReservation(refVal_setReservation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("signal"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("signal")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSignal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSignal);
            setSignal(refVal_setSignal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSocketsPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSocketsPerNode);
            setSocketsPerNode(refVal_setSocketsPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("spread_job"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("spread_job")));
        if(!fieldValue.is_null())
        {
            bool refVal_setSpreadJob;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpreadJob);
            setSpreadJob(refVal_setSpreadJob);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_error"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_error")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardError;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardError);
            setStandardError(refVal_setStandardError);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_input"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_input")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardInput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardInput);
            setStandardInput(refVal_setStandardInput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("standard_output"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("standard_output")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStandardOutput;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStandardOutput);
            setStandardOutput(refVal_setStandardOutput);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasks);
            setTasks(refVal_setTasks);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_core")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerCore);
            setTasksPerCore(refVal_setTasksPerCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_node")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerNode);
            setTasksPerNode(refVal_setTasksPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tasks_per_socket"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tasks_per_socket")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTasksPerSocket;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTasksPerSocket);
            setTasksPerSocket(refVal_setTasksPerSocket);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thread_specification"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thread_specification")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setThreadSpecification;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadSpecification);
            setThreadSpecification(refVal_setThreadSpecification);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threads_per_core")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setThreadsPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadsPerCore);
            setThreadsPerCore(refVal_setThreadsPerCore);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_limit"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_limit")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimeLimit;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeLimit);
            setTimeLimit(refVal_setTimeLimit);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time_minimum"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time_minimum")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTimeMinimum;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimeMinimum);
            setTimeMinimum(refVal_setTimeMinimum);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wait_all_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wait_all_nodes")));
        if(!fieldValue.is_null())
        {
            bool refVal_setWaitAllNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaitAllNodes);
            setWaitAllNodes(refVal_setWaitAllNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckey")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWckey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckey);
            setWckey(refVal_setWckey);
        }
    }
    return ok;
}

void V0_0_38_job_properties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_Account_gather_frequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account_gather_frequency")), m_Account_gather_frequency));
    }
    if(m_ArgvIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("argv")), m_Argv));
    }
    if(m_arrayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array")), m_array));
    }
    if(m_Batch_featuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("batch_features")), m_Batch_features));
    }
    if(m_Begin_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("begin_time")), m_Begin_time));
    }
    if(m_Burst_bufferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("burst_buffer")), m_Burst_buffer));
    }
    if(m_Cluster_constraintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster_constraint")), m_Cluster_constraint));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_ConstraintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constraints")), m_Constraints));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container")), m_Container));
    }
    if(m_Core_specificationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("core_specification")), m_Core_specification));
    }
    if(m_Cores_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cores_per_socket")), m_Cores_per_socket));
    }
    if(m_Cpu_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_binding")), m_Cpu_binding));
    }
    if(m_Cpu_binding_hintIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_binding_hint")), m_Cpu_binding_hint));
    }
    if(m_Cpu_frequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_frequency")), m_Cpu_frequency));
    }
    if(m_Cpus_per_gpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus_per_gpu")), m_Cpus_per_gpu));
    }
    if(m_Cpus_per_taskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus_per_task")), m_Cpus_per_task));
    }
    if(m_Current_working_directoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current_working_directory")), m_Current_working_directory));
    }
    if(m_DeadlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deadline")), m_Deadline));
    }
    if(m_Delay_bootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("delay_boot")), m_Delay_boot));
    }
    if(m_DependencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dependency")), m_Dependency));
    }
    if(m_DistributionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("distribution")), m_Distribution));
    }
    if(m_EnvironmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("environment")), m_Environment));
    }
    if(m_ExclusiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exclusive")), m_Exclusive));
    }
    if(m_Get_user_environmentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("get_user_environment")), m_Get_user_environment));
    }
    if(m_GresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gres")), m_Gres));
    }
    if(m_Gres_flagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gres_flags")), m_Gres_flags));
    }
    if(m_Gpu_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpu_binding")), m_Gpu_binding));
    }
    if(m_Gpu_frequencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpu_frequency")), m_Gpu_frequency));
    }
    if(m_GpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpus")), m_Gpus));
    }
    if(m_Gpus_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpus_per_node")), m_Gpus_per_node));
    }
    if(m_Gpus_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpus_per_socket")), m_Gpus_per_socket));
    }
    if(m_Gpus_per_taskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gpus_per_task")), m_Gpus_per_task));
    }
    if(m_HoldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hold")), m_Hold));
    }
    if(m_Kill_on_invalid_dependencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_on_invalid_dependency")), m_Kill_on_invalid_dependency));
    }
    if(m_LicensesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("licenses")), m_Licenses));
    }
    if(m_Mail_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_type")), m_Mail_type));
    }
    if(m_Mail_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mail_user")), m_Mail_user));
    }
    if(m_Mcs_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcs_label")), m_Mcs_label));
    }
    if(m_Memory_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_binding")), m_Memory_binding));
    }
    if(m_Memory_per_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_cpu")), m_Memory_per_cpu));
    }
    if(m_Memory_per_gpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_gpu")), m_Memory_per_gpu));
    }
    if(m_Memory_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_node")), m_Memory_per_node));
    }
    if(m_Minimum_cpus_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_cpus_per_node")), m_Minimum_cpus_per_node));
    }
    if(m_Minimum_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minimum_nodes")), m_Minimum_nodes));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_NiceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nice")), m_Nice));
    }
    if(m_No_killIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("no_kill")), m_No_kill));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_Open_modeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("open_mode")), m_Open_mode));
    }
    if(m_OversubscribeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("oversubscribe")), m_Oversubscribe));
    }
    if(m_PartitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition")), m_Partition));
    }
    if(m_PreferIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("prefer")), m_Prefer));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_QosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qos")), m_Qos));
    }
    if(m_RequeueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requeue")), m_Requeue));
    }
    if(m_ReservationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reservation")), m_Reservation));
    }
    if(m_SignalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("signal")), m_Signal));
    }
    if(m_Sockets_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets_per_node")), m_Sockets_per_node));
    }
    if(m_Spread_jobIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("spread_job")), m_Spread_job));
    }
    if(m_Standard_errorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_error")), m_Standard_error));
    }
    if(m_Standard_inputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_input")), m_Standard_input));
    }
    if(m_Standard_outputIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("standard_output")), m_Standard_output));
    }
    if(m_TasksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks")), m_Tasks));
    }
    if(m_Tasks_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_core")), m_Tasks_per_core));
    }
    if(m_Tasks_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_node")), m_Tasks_per_node));
    }
    if(m_Tasks_per_socketIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tasks_per_socket")), m_Tasks_per_socket));
    }
    if(m_Thread_specificationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thread_specification")), m_Thread_specification));
    }
    if(m_Threads_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threads_per_core")), m_Threads_per_core));
    }
    if(m_Time_limitIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_limit")), m_Time_limit));
    }
    if(m_Time_minimumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time_minimum")), m_Time_minimum));
    }
    if(m_Wait_all_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wait_all_nodes")), m_Wait_all_nodes));
    }
    if(m_WckeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckey")), m_Wckey));
    }
}

bool V0_0_38_job_properties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("account_gather_frequency"))))
    {
        utility::string_t refVal_setAccountGatherFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account_gather_frequency"))), refVal_setAccountGatherFrequency );
        setAccountGatherFrequency(refVal_setAccountGatherFrequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("argv"))))
    {
        std::vector<utility::string_t> refVal_setArgv;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("argv"))), refVal_setArgv );
        setArgv(refVal_setArgv);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array"))))
    {
        utility::string_t refVal_setArray;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array"))), refVal_setArray );
        setArray(refVal_setArray);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("batch_features"))))
    {
        utility::string_t refVal_setBatchFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("batch_features"))), refVal_setBatchFeatures );
        setBatchFeatures(refVal_setBatchFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("begin_time"))))
    {
        int64_t refVal_setBeginTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("begin_time"))), refVal_setBeginTime );
        setBeginTime(refVal_setBeginTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("burst_buffer"))))
    {
        utility::string_t refVal_setBurstBuffer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("burst_buffer"))), refVal_setBurstBuffer );
        setBurstBuffer(refVal_setBurstBuffer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster_constraint"))))
    {
        utility::string_t refVal_setClusterConstraint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster_constraint"))), refVal_setClusterConstraint );
        setClusterConstraint(refVal_setClusterConstraint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constraints"))))
    {
        utility::string_t refVal_setConstraints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constraints"))), refVal_setConstraints );
        setConstraints(refVal_setConstraints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container"))))
    {
        utility::string_t refVal_setContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container"))), refVal_setContainer );
        setContainer(refVal_setContainer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("core_specification"))))
    {
        int32_t refVal_setCoreSpecification;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("core_specification"))), refVal_setCoreSpecification );
        setCoreSpecification(refVal_setCoreSpecification);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cores_per_socket"))))
    {
        int32_t refVal_setCoresPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cores_per_socket"))), refVal_setCoresPerSocket );
        setCoresPerSocket(refVal_setCoresPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_binding"))))
    {
        utility::string_t refVal_setCpuBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_binding"))), refVal_setCpuBinding );
        setCpuBinding(refVal_setCpuBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_binding_hint"))))
    {
        utility::string_t refVal_setCpuBindingHint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_binding_hint"))), refVal_setCpuBindingHint );
        setCpuBindingHint(refVal_setCpuBindingHint);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_frequency"))))
    {
        utility::string_t refVal_setCpuFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_frequency"))), refVal_setCpuFrequency );
        setCpuFrequency(refVal_setCpuFrequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus_per_gpu"))))
    {
        utility::string_t refVal_setCpusPerGpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus_per_gpu"))), refVal_setCpusPerGpu );
        setCpusPerGpu(refVal_setCpusPerGpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus_per_task"))))
    {
        int32_t refVal_setCpusPerTask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus_per_task"))), refVal_setCpusPerTask );
        setCpusPerTask(refVal_setCpusPerTask);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("current_working_directory"))))
    {
        utility::string_t refVal_setCurrentWorkingDirectory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current_working_directory"))), refVal_setCurrentWorkingDirectory );
        setCurrentWorkingDirectory(refVal_setCurrentWorkingDirectory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deadline"))))
    {
        utility::string_t refVal_setDeadline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deadline"))), refVal_setDeadline );
        setDeadline(refVal_setDeadline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("delay_boot"))))
    {
        int32_t refVal_setDelayBoot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("delay_boot"))), refVal_setDelayBoot );
        setDelayBoot(refVal_setDelayBoot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dependency"))))
    {
        utility::string_t refVal_setDependency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dependency"))), refVal_setDependency );
        setDependency(refVal_setDependency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("distribution"))))
    {
        utility::string_t refVal_setDistribution;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("distribution"))), refVal_setDistribution );
        setDistribution(refVal_setDistribution);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("environment"))))
    {
        std::shared_ptr<Object> refVal_setEnvironment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("environment"))), refVal_setEnvironment );
        setEnvironment(refVal_setEnvironment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exclusive"))))
    {
        utility::string_t refVal_setExclusive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exclusive"))), refVal_setExclusive );
        setExclusive(refVal_setExclusive);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("get_user_environment"))))
    {
        bool refVal_setGetUserEnvironment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("get_user_environment"))), refVal_setGetUserEnvironment );
        setGetUserEnvironment(refVal_setGetUserEnvironment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gres"))))
    {
        utility::string_t refVal_setGres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gres"))), refVal_setGres );
        setGres(refVal_setGres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gres_flags"))))
    {
        utility::string_t refVal_setGresFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gres_flags"))), refVal_setGresFlags );
        setGresFlags(refVal_setGresFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpu_binding"))))
    {
        utility::string_t refVal_setGpuBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpu_binding"))), refVal_setGpuBinding );
        setGpuBinding(refVal_setGpuBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpu_frequency"))))
    {
        utility::string_t refVal_setGpuFrequency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpu_frequency"))), refVal_setGpuFrequency );
        setGpuFrequency(refVal_setGpuFrequency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpus"))))
    {
        utility::string_t refVal_setGpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpus"))), refVal_setGpus );
        setGpus(refVal_setGpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpus_per_node"))))
    {
        utility::string_t refVal_setGpusPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpus_per_node"))), refVal_setGpusPerNode );
        setGpusPerNode(refVal_setGpusPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpus_per_socket"))))
    {
        utility::string_t refVal_setGpusPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpus_per_socket"))), refVal_setGpusPerSocket );
        setGpusPerSocket(refVal_setGpusPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gpus_per_task"))))
    {
        utility::string_t refVal_setGpusPerTask;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gpus_per_task"))), refVal_setGpusPerTask );
        setGpusPerTask(refVal_setGpusPerTask);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hold"))))
    {
        bool refVal_setHold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hold"))), refVal_setHold );
        setHold(refVal_setHold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_on_invalid_dependency"))))
    {
        bool refVal_setKillOnInvalidDependency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_on_invalid_dependency"))), refVal_setKillOnInvalidDependency );
        setKillOnInvalidDependency(refVal_setKillOnInvalidDependency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("licenses"))))
    {
        utility::string_t refVal_setLicenses;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("licenses"))), refVal_setLicenses );
        setLicenses(refVal_setLicenses);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_type"))))
    {
        utility::string_t refVal_setMailType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_type"))), refVal_setMailType );
        setMailType(refVal_setMailType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mail_user"))))
    {
        utility::string_t refVal_setMailUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mail_user"))), refVal_setMailUser );
        setMailUser(refVal_setMailUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcs_label"))))
    {
        utility::string_t refVal_setMcsLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcs_label"))), refVal_setMcsLabel );
        setMcsLabel(refVal_setMcsLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_binding"))))
    {
        utility::string_t refVal_setMemoryBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_binding"))), refVal_setMemoryBinding );
        setMemoryBinding(refVal_setMemoryBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        int32_t refVal_setMemoryPerCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_cpu"))), refVal_setMemoryPerCpu );
        setMemoryPerCpu(refVal_setMemoryPerCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_gpu"))))
    {
        int32_t refVal_setMemoryPerGpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_gpu"))), refVal_setMemoryPerGpu );
        setMemoryPerGpu(refVal_setMemoryPerGpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        int32_t refVal_setMemoryPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_node"))), refVal_setMemoryPerNode );
        setMemoryPerNode(refVal_setMemoryPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_cpus_per_node"))))
    {
        int32_t refVal_setMinimumCpusPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_cpus_per_node"))), refVal_setMinimumCpusPerNode );
        setMinimumCpusPerNode(refVal_setMinimumCpusPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("minimum_nodes"))))
    {
        bool refVal_setMinimumNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minimum_nodes"))), refVal_setMinimumNodes );
        setMinimumNodes(refVal_setMinimumNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nice"))))
    {
        int32_t refVal_setNice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nice"))), refVal_setNice );
        setNice(refVal_setNice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("no_kill"))))
    {
        bool refVal_setNoKill;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("no_kill"))), refVal_setNoKill );
        setNoKill(refVal_setNoKill);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        std::vector<int32_t> refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("open_mode"))))
    {
        utility::string_t refVal_setOpenMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("open_mode"))), refVal_setOpenMode );
        setOpenMode(refVal_setOpenMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("oversubscribe"))))
    {
        bool refVal_setOversubscribe;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("oversubscribe"))), refVal_setOversubscribe );
        setOversubscribe(refVal_setOversubscribe);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition"))))
    {
        utility::string_t refVal_setPartition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition"))), refVal_setPartition );
        setPartition(refVal_setPartition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("prefer"))))
    {
        utility::string_t refVal_setPrefer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("prefer"))), refVal_setPrefer );
        setPrefer(refVal_setPrefer);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        utility::string_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qos"))))
    {
        utility::string_t refVal_setQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qos"))), refVal_setQos );
        setQos(refVal_setQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requeue"))))
    {
        bool refVal_setRequeue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requeue"))), refVal_setRequeue );
        setRequeue(refVal_setRequeue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reservation"))))
    {
        utility::string_t refVal_setReservation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reservation"))), refVal_setReservation );
        setReservation(refVal_setReservation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("signal"))))
    {
        utility::string_t refVal_setSignal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("signal"))), refVal_setSignal );
        setSignal(refVal_setSignal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets_per_node"))))
    {
        int32_t refVal_setSocketsPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets_per_node"))), refVal_setSocketsPerNode );
        setSocketsPerNode(refVal_setSocketsPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("spread_job"))))
    {
        bool refVal_setSpreadJob;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("spread_job"))), refVal_setSpreadJob );
        setSpreadJob(refVal_setSpreadJob);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_error"))))
    {
        utility::string_t refVal_setStandardError;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_error"))), refVal_setStandardError );
        setStandardError(refVal_setStandardError);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_input"))))
    {
        utility::string_t refVal_setStandardInput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_input"))), refVal_setStandardInput );
        setStandardInput(refVal_setStandardInput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("standard_output"))))
    {
        utility::string_t refVal_setStandardOutput;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("standard_output"))), refVal_setStandardOutput );
        setStandardOutput(refVal_setStandardOutput);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks"))))
    {
        int32_t refVal_setTasks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks"))), refVal_setTasks );
        setTasks(refVal_setTasks);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_core"))))
    {
        int32_t refVal_setTasksPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_core"))), refVal_setTasksPerCore );
        setTasksPerCore(refVal_setTasksPerCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_node"))))
    {
        int32_t refVal_setTasksPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_node"))), refVal_setTasksPerNode );
        setTasksPerNode(refVal_setTasksPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tasks_per_socket"))))
    {
        int32_t refVal_setTasksPerSocket;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tasks_per_socket"))), refVal_setTasksPerSocket );
        setTasksPerSocket(refVal_setTasksPerSocket);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thread_specification"))))
    {
        int32_t refVal_setThreadSpecification;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thread_specification"))), refVal_setThreadSpecification );
        setThreadSpecification(refVal_setThreadSpecification);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        int32_t refVal_setThreadsPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threads_per_core"))), refVal_setThreadsPerCore );
        setThreadsPerCore(refVal_setThreadsPerCore);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_limit"))))
    {
        int32_t refVal_setTimeLimit;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_limit"))), refVal_setTimeLimit );
        setTimeLimit(refVal_setTimeLimit);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time_minimum"))))
    {
        int32_t refVal_setTimeMinimum;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time_minimum"))), refVal_setTimeMinimum );
        setTimeMinimum(refVal_setTimeMinimum);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wait_all_nodes"))))
    {
        bool refVal_setWaitAllNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wait_all_nodes"))), refVal_setWaitAllNodes );
        setWaitAllNodes(refVal_setWaitAllNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckey"))))
    {
        utility::string_t refVal_setWckey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckey"))), refVal_setWckey );
        setWckey(refVal_setWckey);
    }
    return ok;
}

utility::string_t V0_0_38_job_properties::getAccount() const
{
    return m_Account;
}

void V0_0_38_job_properties::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool V0_0_38_job_properties::accountIsSet() const
{
    return m_AccountIsSet;
}

void V0_0_38_job_properties::unsetAccount()
{
    m_AccountIsSet = false;
}
utility::string_t V0_0_38_job_properties::getAccountGatherFrequency() const
{
    return m_Account_gather_frequency;
}

void V0_0_38_job_properties::setAccountGatherFrequency(const utility::string_t& value)
{
    m_Account_gather_frequency = value;
    m_Account_gather_frequencyIsSet = true;
}

bool V0_0_38_job_properties::accountGatherFrequencyIsSet() const
{
    return m_Account_gather_frequencyIsSet;
}

void V0_0_38_job_properties::unsetAccount_gather_frequency()
{
    m_Account_gather_frequencyIsSet = false;
}
std::vector<utility::string_t>& V0_0_38_job_properties::getArgv()
{
    return m_Argv;
}

void V0_0_38_job_properties::setArgv(const std::vector<utility::string_t>& value)
{
    m_Argv = value;
    m_ArgvIsSet = true;
}

bool V0_0_38_job_properties::argvIsSet() const
{
    return m_ArgvIsSet;
}

void V0_0_38_job_properties::unsetArgv()
{
    m_ArgvIsSet = false;
}
utility::string_t V0_0_38_job_properties::getArray() const
{
    return m_array;
}

void V0_0_38_job_properties::setArray(const utility::string_t& value)
{
    m_array = value;
    m_arrayIsSet = true;
}

bool V0_0_38_job_properties::arrayIsSet() const
{
    return m_arrayIsSet;
}

void V0_0_38_job_properties::unsetarray()
{
    m_arrayIsSet = false;
}
utility::string_t V0_0_38_job_properties::getBatchFeatures() const
{
    return m_Batch_features;
}

void V0_0_38_job_properties::setBatchFeatures(const utility::string_t& value)
{
    m_Batch_features = value;
    m_Batch_featuresIsSet = true;
}

bool V0_0_38_job_properties::batchFeaturesIsSet() const
{
    return m_Batch_featuresIsSet;
}

void V0_0_38_job_properties::unsetBatch_features()
{
    m_Batch_featuresIsSet = false;
}
int64_t V0_0_38_job_properties::getBeginTime() const
{
    return m_Begin_time;
}

void V0_0_38_job_properties::setBeginTime(int64_t value)
{
    m_Begin_time = value;
    m_Begin_timeIsSet = true;
}

bool V0_0_38_job_properties::beginTimeIsSet() const
{
    return m_Begin_timeIsSet;
}

void V0_0_38_job_properties::unsetBegin_time()
{
    m_Begin_timeIsSet = false;
}
utility::string_t V0_0_38_job_properties::getBurstBuffer() const
{
    return m_Burst_buffer;
}

void V0_0_38_job_properties::setBurstBuffer(const utility::string_t& value)
{
    m_Burst_buffer = value;
    m_Burst_bufferIsSet = true;
}

bool V0_0_38_job_properties::burstBufferIsSet() const
{
    return m_Burst_bufferIsSet;
}

void V0_0_38_job_properties::unsetBurst_buffer()
{
    m_Burst_bufferIsSet = false;
}
utility::string_t V0_0_38_job_properties::getClusterConstraint() const
{
    return m_Cluster_constraint;
}

void V0_0_38_job_properties::setClusterConstraint(const utility::string_t& value)
{
    m_Cluster_constraint = value;
    m_Cluster_constraintIsSet = true;
}

bool V0_0_38_job_properties::clusterConstraintIsSet() const
{
    return m_Cluster_constraintIsSet;
}

void V0_0_38_job_properties::unsetCluster_constraint()
{
    m_Cluster_constraintIsSet = false;
}
utility::string_t V0_0_38_job_properties::getComment() const
{
    return m_Comment;
}

void V0_0_38_job_properties::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool V0_0_38_job_properties::commentIsSet() const
{
    return m_CommentIsSet;
}

void V0_0_38_job_properties::unsetComment()
{
    m_CommentIsSet = false;
}
utility::string_t V0_0_38_job_properties::getConstraints() const
{
    return m_Constraints;
}

void V0_0_38_job_properties::setConstraints(const utility::string_t& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}

bool V0_0_38_job_properties::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}

void V0_0_38_job_properties::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
utility::string_t V0_0_38_job_properties::getContainer() const
{
    return m_Container;
}

void V0_0_38_job_properties::setContainer(const utility::string_t& value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool V0_0_38_job_properties::containerIsSet() const
{
    return m_ContainerIsSet;
}

void V0_0_38_job_properties::unsetContainer()
{
    m_ContainerIsSet = false;
}
int32_t V0_0_38_job_properties::getCoreSpecification() const
{
    return m_Core_specification;
}

void V0_0_38_job_properties::setCoreSpecification(int32_t value)
{
    m_Core_specification = value;
    m_Core_specificationIsSet = true;
}

bool V0_0_38_job_properties::coreSpecificationIsSet() const
{
    return m_Core_specificationIsSet;
}

void V0_0_38_job_properties::unsetCore_specification()
{
    m_Core_specificationIsSet = false;
}
int32_t V0_0_38_job_properties::getCoresPerSocket() const
{
    return m_Cores_per_socket;
}

void V0_0_38_job_properties::setCoresPerSocket(int32_t value)
{
    m_Cores_per_socket = value;
    m_Cores_per_socketIsSet = true;
}

bool V0_0_38_job_properties::coresPerSocketIsSet() const
{
    return m_Cores_per_socketIsSet;
}

void V0_0_38_job_properties::unsetCores_per_socket()
{
    m_Cores_per_socketIsSet = false;
}
utility::string_t V0_0_38_job_properties::getCpuBinding() const
{
    return m_Cpu_binding;
}

void V0_0_38_job_properties::setCpuBinding(const utility::string_t& value)
{
    m_Cpu_binding = value;
    m_Cpu_bindingIsSet = true;
}

bool V0_0_38_job_properties::cpuBindingIsSet() const
{
    return m_Cpu_bindingIsSet;
}

void V0_0_38_job_properties::unsetCpu_binding()
{
    m_Cpu_bindingIsSet = false;
}
utility::string_t V0_0_38_job_properties::getCpuBindingHint() const
{
    return m_Cpu_binding_hint;
}

void V0_0_38_job_properties::setCpuBindingHint(const utility::string_t& value)
{
    m_Cpu_binding_hint = value;
    m_Cpu_binding_hintIsSet = true;
}

bool V0_0_38_job_properties::cpuBindingHintIsSet() const
{
    return m_Cpu_binding_hintIsSet;
}

void V0_0_38_job_properties::unsetCpu_binding_hint()
{
    m_Cpu_binding_hintIsSet = false;
}
utility::string_t V0_0_38_job_properties::getCpuFrequency() const
{
    return m_Cpu_frequency;
}

void V0_0_38_job_properties::setCpuFrequency(const utility::string_t& value)
{
    m_Cpu_frequency = value;
    m_Cpu_frequencyIsSet = true;
}

bool V0_0_38_job_properties::cpuFrequencyIsSet() const
{
    return m_Cpu_frequencyIsSet;
}

void V0_0_38_job_properties::unsetCpu_frequency()
{
    m_Cpu_frequencyIsSet = false;
}
utility::string_t V0_0_38_job_properties::getCpusPerGpu() const
{
    return m_Cpus_per_gpu;
}

void V0_0_38_job_properties::setCpusPerGpu(const utility::string_t& value)
{
    m_Cpus_per_gpu = value;
    m_Cpus_per_gpuIsSet = true;
}

bool V0_0_38_job_properties::cpusPerGpuIsSet() const
{
    return m_Cpus_per_gpuIsSet;
}

void V0_0_38_job_properties::unsetCpus_per_gpu()
{
    m_Cpus_per_gpuIsSet = false;
}
int32_t V0_0_38_job_properties::getCpusPerTask() const
{
    return m_Cpus_per_task;
}

void V0_0_38_job_properties::setCpusPerTask(int32_t value)
{
    m_Cpus_per_task = value;
    m_Cpus_per_taskIsSet = true;
}

bool V0_0_38_job_properties::cpusPerTaskIsSet() const
{
    return m_Cpus_per_taskIsSet;
}

void V0_0_38_job_properties::unsetCpus_per_task()
{
    m_Cpus_per_taskIsSet = false;
}
utility::string_t V0_0_38_job_properties::getCurrentWorkingDirectory() const
{
    return m_Current_working_directory;
}

void V0_0_38_job_properties::setCurrentWorkingDirectory(const utility::string_t& value)
{
    m_Current_working_directory = value;
    m_Current_working_directoryIsSet = true;
}

bool V0_0_38_job_properties::currentWorkingDirectoryIsSet() const
{
    return m_Current_working_directoryIsSet;
}

void V0_0_38_job_properties::unsetCurrent_working_directory()
{
    m_Current_working_directoryIsSet = false;
}
utility::string_t V0_0_38_job_properties::getDeadline() const
{
    return m_Deadline;
}

void V0_0_38_job_properties::setDeadline(const utility::string_t& value)
{
    m_Deadline = value;
    m_DeadlineIsSet = true;
}

bool V0_0_38_job_properties::deadlineIsSet() const
{
    return m_DeadlineIsSet;
}

void V0_0_38_job_properties::unsetDeadline()
{
    m_DeadlineIsSet = false;
}
int32_t V0_0_38_job_properties::getDelayBoot() const
{
    return m_Delay_boot;
}

void V0_0_38_job_properties::setDelayBoot(int32_t value)
{
    m_Delay_boot = value;
    m_Delay_bootIsSet = true;
}

bool V0_0_38_job_properties::delayBootIsSet() const
{
    return m_Delay_bootIsSet;
}

void V0_0_38_job_properties::unsetDelay_boot()
{
    m_Delay_bootIsSet = false;
}
utility::string_t V0_0_38_job_properties::getDependency() const
{
    return m_Dependency;
}

void V0_0_38_job_properties::setDependency(const utility::string_t& value)
{
    m_Dependency = value;
    m_DependencyIsSet = true;
}

bool V0_0_38_job_properties::dependencyIsSet() const
{
    return m_DependencyIsSet;
}

void V0_0_38_job_properties::unsetDependency()
{
    m_DependencyIsSet = false;
}
utility::string_t V0_0_38_job_properties::getDistribution() const
{
    return m_Distribution;
}

void V0_0_38_job_properties::setDistribution(const utility::string_t& value)
{
    m_Distribution = value;
    m_DistributionIsSet = true;
}

bool V0_0_38_job_properties::distributionIsSet() const
{
    return m_DistributionIsSet;
}

void V0_0_38_job_properties::unsetDistribution()
{
    m_DistributionIsSet = false;
}
std::shared_ptr<Object> V0_0_38_job_properties::getEnvironment() const
{
    return m_Environment;
}

void V0_0_38_job_properties::setEnvironment(const std::shared_ptr<Object>& value)
{
    m_Environment = value;
    m_EnvironmentIsSet = true;
}

bool V0_0_38_job_properties::environmentIsSet() const
{
    return m_EnvironmentIsSet;
}

void V0_0_38_job_properties::unsetEnvironment()
{
    m_EnvironmentIsSet = false;
}
utility::string_t V0_0_38_job_properties::getExclusive() const
{
    return m_Exclusive;
}

void V0_0_38_job_properties::setExclusive(const utility::string_t& value)
{
    m_Exclusive = value;
    m_ExclusiveIsSet = true;
}

bool V0_0_38_job_properties::exclusiveIsSet() const
{
    return m_ExclusiveIsSet;
}

void V0_0_38_job_properties::unsetExclusive()
{
    m_ExclusiveIsSet = false;
}
bool V0_0_38_job_properties::isGetUserEnvironment() const
{
    return m_Get_user_environment;
}

void V0_0_38_job_properties::setGetUserEnvironment(bool value)
{
    m_Get_user_environment = value;
    m_Get_user_environmentIsSet = true;
}

bool V0_0_38_job_properties::getUserEnvironmentIsSet() const
{
    return m_Get_user_environmentIsSet;
}

void V0_0_38_job_properties::unsetGet_user_environment()
{
    m_Get_user_environmentIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGres() const
{
    return m_Gres;
}

void V0_0_38_job_properties::setGres(const utility::string_t& value)
{
    m_Gres = value;
    m_GresIsSet = true;
}

bool V0_0_38_job_properties::gresIsSet() const
{
    return m_GresIsSet;
}

void V0_0_38_job_properties::unsetGres()
{
    m_GresIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGresFlags() const
{
    return m_Gres_flags;
}

void V0_0_38_job_properties::setGresFlags(const utility::string_t& value)
{
    m_Gres_flags = value;
    m_Gres_flagsIsSet = true;
}

bool V0_0_38_job_properties::gresFlagsIsSet() const
{
    return m_Gres_flagsIsSet;
}

void V0_0_38_job_properties::unsetGres_flags()
{
    m_Gres_flagsIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGpuBinding() const
{
    return m_Gpu_binding;
}

void V0_0_38_job_properties::setGpuBinding(const utility::string_t& value)
{
    m_Gpu_binding = value;
    m_Gpu_bindingIsSet = true;
}

bool V0_0_38_job_properties::gpuBindingIsSet() const
{
    return m_Gpu_bindingIsSet;
}

void V0_0_38_job_properties::unsetGpu_binding()
{
    m_Gpu_bindingIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGpuFrequency() const
{
    return m_Gpu_frequency;
}

void V0_0_38_job_properties::setGpuFrequency(const utility::string_t& value)
{
    m_Gpu_frequency = value;
    m_Gpu_frequencyIsSet = true;
}

bool V0_0_38_job_properties::gpuFrequencyIsSet() const
{
    return m_Gpu_frequencyIsSet;
}

void V0_0_38_job_properties::unsetGpu_frequency()
{
    m_Gpu_frequencyIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGpus() const
{
    return m_Gpus;
}

void V0_0_38_job_properties::setGpus(const utility::string_t& value)
{
    m_Gpus = value;
    m_GpusIsSet = true;
}

bool V0_0_38_job_properties::gpusIsSet() const
{
    return m_GpusIsSet;
}

void V0_0_38_job_properties::unsetGpus()
{
    m_GpusIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGpusPerNode() const
{
    return m_Gpus_per_node;
}

void V0_0_38_job_properties::setGpusPerNode(const utility::string_t& value)
{
    m_Gpus_per_node = value;
    m_Gpus_per_nodeIsSet = true;
}

bool V0_0_38_job_properties::gpusPerNodeIsSet() const
{
    return m_Gpus_per_nodeIsSet;
}

void V0_0_38_job_properties::unsetGpus_per_node()
{
    m_Gpus_per_nodeIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGpusPerSocket() const
{
    return m_Gpus_per_socket;
}

void V0_0_38_job_properties::setGpusPerSocket(const utility::string_t& value)
{
    m_Gpus_per_socket = value;
    m_Gpus_per_socketIsSet = true;
}

bool V0_0_38_job_properties::gpusPerSocketIsSet() const
{
    return m_Gpus_per_socketIsSet;
}

void V0_0_38_job_properties::unsetGpus_per_socket()
{
    m_Gpus_per_socketIsSet = false;
}
utility::string_t V0_0_38_job_properties::getGpusPerTask() const
{
    return m_Gpus_per_task;
}

void V0_0_38_job_properties::setGpusPerTask(const utility::string_t& value)
{
    m_Gpus_per_task = value;
    m_Gpus_per_taskIsSet = true;
}

bool V0_0_38_job_properties::gpusPerTaskIsSet() const
{
    return m_Gpus_per_taskIsSet;
}

void V0_0_38_job_properties::unsetGpus_per_task()
{
    m_Gpus_per_taskIsSet = false;
}
bool V0_0_38_job_properties::isHold() const
{
    return m_Hold;
}

void V0_0_38_job_properties::setHold(bool value)
{
    m_Hold = value;
    m_HoldIsSet = true;
}

bool V0_0_38_job_properties::holdIsSet() const
{
    return m_HoldIsSet;
}

void V0_0_38_job_properties::unsetHold()
{
    m_HoldIsSet = false;
}
bool V0_0_38_job_properties::isKillOnInvalidDependency() const
{
    return m_Kill_on_invalid_dependency;
}

void V0_0_38_job_properties::setKillOnInvalidDependency(bool value)
{
    m_Kill_on_invalid_dependency = value;
    m_Kill_on_invalid_dependencyIsSet = true;
}

bool V0_0_38_job_properties::killOnInvalidDependencyIsSet() const
{
    return m_Kill_on_invalid_dependencyIsSet;
}

void V0_0_38_job_properties::unsetKill_on_invalid_dependency()
{
    m_Kill_on_invalid_dependencyIsSet = false;
}
utility::string_t V0_0_38_job_properties::getLicenses() const
{
    return m_Licenses;
}

void V0_0_38_job_properties::setLicenses(const utility::string_t& value)
{
    m_Licenses = value;
    m_LicensesIsSet = true;
}

bool V0_0_38_job_properties::licensesIsSet() const
{
    return m_LicensesIsSet;
}

void V0_0_38_job_properties::unsetLicenses()
{
    m_LicensesIsSet = false;
}
utility::string_t V0_0_38_job_properties::getMailType() const
{
    return m_Mail_type;
}

void V0_0_38_job_properties::setMailType(const utility::string_t& value)
{
    m_Mail_type = value;
    m_Mail_typeIsSet = true;
}

bool V0_0_38_job_properties::mailTypeIsSet() const
{
    return m_Mail_typeIsSet;
}

void V0_0_38_job_properties::unsetMail_type()
{
    m_Mail_typeIsSet = false;
}
utility::string_t V0_0_38_job_properties::getMailUser() const
{
    return m_Mail_user;
}

void V0_0_38_job_properties::setMailUser(const utility::string_t& value)
{
    m_Mail_user = value;
    m_Mail_userIsSet = true;
}

bool V0_0_38_job_properties::mailUserIsSet() const
{
    return m_Mail_userIsSet;
}

void V0_0_38_job_properties::unsetMail_user()
{
    m_Mail_userIsSet = false;
}
utility::string_t V0_0_38_job_properties::getMcsLabel() const
{
    return m_Mcs_label;
}

void V0_0_38_job_properties::setMcsLabel(const utility::string_t& value)
{
    m_Mcs_label = value;
    m_Mcs_labelIsSet = true;
}

bool V0_0_38_job_properties::mcsLabelIsSet() const
{
    return m_Mcs_labelIsSet;
}

void V0_0_38_job_properties::unsetMcs_label()
{
    m_Mcs_labelIsSet = false;
}
utility::string_t V0_0_38_job_properties::getMemoryBinding() const
{
    return m_Memory_binding;
}

void V0_0_38_job_properties::setMemoryBinding(const utility::string_t& value)
{
    m_Memory_binding = value;
    m_Memory_bindingIsSet = true;
}

bool V0_0_38_job_properties::memoryBindingIsSet() const
{
    return m_Memory_bindingIsSet;
}

void V0_0_38_job_properties::unsetMemory_binding()
{
    m_Memory_bindingIsSet = false;
}
int32_t V0_0_38_job_properties::getMemoryPerCpu() const
{
    return m_Memory_per_cpu;
}

void V0_0_38_job_properties::setMemoryPerCpu(int32_t value)
{
    m_Memory_per_cpu = value;
    m_Memory_per_cpuIsSet = true;
}

bool V0_0_38_job_properties::memoryPerCpuIsSet() const
{
    return m_Memory_per_cpuIsSet;
}

void V0_0_38_job_properties::unsetMemory_per_cpu()
{
    m_Memory_per_cpuIsSet = false;
}
int32_t V0_0_38_job_properties::getMemoryPerGpu() const
{
    return m_Memory_per_gpu;
}

void V0_0_38_job_properties::setMemoryPerGpu(int32_t value)
{
    m_Memory_per_gpu = value;
    m_Memory_per_gpuIsSet = true;
}

bool V0_0_38_job_properties::memoryPerGpuIsSet() const
{
    return m_Memory_per_gpuIsSet;
}

void V0_0_38_job_properties::unsetMemory_per_gpu()
{
    m_Memory_per_gpuIsSet = false;
}
int32_t V0_0_38_job_properties::getMemoryPerNode() const
{
    return m_Memory_per_node;
}

void V0_0_38_job_properties::setMemoryPerNode(int32_t value)
{
    m_Memory_per_node = value;
    m_Memory_per_nodeIsSet = true;
}

bool V0_0_38_job_properties::memoryPerNodeIsSet() const
{
    return m_Memory_per_nodeIsSet;
}

void V0_0_38_job_properties::unsetMemory_per_node()
{
    m_Memory_per_nodeIsSet = false;
}
int32_t V0_0_38_job_properties::getMinimumCpusPerNode() const
{
    return m_Minimum_cpus_per_node;
}

void V0_0_38_job_properties::setMinimumCpusPerNode(int32_t value)
{
    m_Minimum_cpus_per_node = value;
    m_Minimum_cpus_per_nodeIsSet = true;
}

bool V0_0_38_job_properties::minimumCpusPerNodeIsSet() const
{
    return m_Minimum_cpus_per_nodeIsSet;
}

void V0_0_38_job_properties::unsetMinimum_cpus_per_node()
{
    m_Minimum_cpus_per_nodeIsSet = false;
}
bool V0_0_38_job_properties::isMinimumNodes() const
{
    return m_Minimum_nodes;
}

void V0_0_38_job_properties::setMinimumNodes(bool value)
{
    m_Minimum_nodes = value;
    m_Minimum_nodesIsSet = true;
}

bool V0_0_38_job_properties::minimumNodesIsSet() const
{
    return m_Minimum_nodesIsSet;
}

void V0_0_38_job_properties::unsetMinimum_nodes()
{
    m_Minimum_nodesIsSet = false;
}
utility::string_t V0_0_38_job_properties::getName() const
{
    return m_Name;
}

void V0_0_38_job_properties::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_38_job_properties::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_38_job_properties::unsetName()
{
    m_NameIsSet = false;
}
int32_t V0_0_38_job_properties::getNice() const
{
    return m_Nice;
}

void V0_0_38_job_properties::setNice(int32_t value)
{
    m_Nice = value;
    m_NiceIsSet = true;
}

bool V0_0_38_job_properties::niceIsSet() const
{
    return m_NiceIsSet;
}

void V0_0_38_job_properties::unsetNice()
{
    m_NiceIsSet = false;
}
bool V0_0_38_job_properties::isNoKill() const
{
    return m_No_kill;
}

void V0_0_38_job_properties::setNoKill(bool value)
{
    m_No_kill = value;
    m_No_killIsSet = true;
}

bool V0_0_38_job_properties::noKillIsSet() const
{
    return m_No_killIsSet;
}

void V0_0_38_job_properties::unsetNo_kill()
{
    m_No_killIsSet = false;
}
std::vector<int32_t>& V0_0_38_job_properties::getNodes()
{
    return m_Nodes;
}

void V0_0_38_job_properties::setNodes(std::vector<int32_t> value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool V0_0_38_job_properties::nodesIsSet() const
{
    return m_NodesIsSet;
}

void V0_0_38_job_properties::unsetNodes()
{
    m_NodesIsSet = false;
}
utility::string_t V0_0_38_job_properties::getOpenMode() const
{
    return m_Open_mode;
}

void V0_0_38_job_properties::setOpenMode(const utility::string_t& value)
{
    m_Open_mode = value;
    m_Open_modeIsSet = true;
}

bool V0_0_38_job_properties::openModeIsSet() const
{
    return m_Open_modeIsSet;
}

void V0_0_38_job_properties::unsetOpen_mode()
{
    m_Open_modeIsSet = false;
}
bool V0_0_38_job_properties::isOversubscribe() const
{
    return m_Oversubscribe;
}

void V0_0_38_job_properties::setOversubscribe(bool value)
{
    m_Oversubscribe = value;
    m_OversubscribeIsSet = true;
}

bool V0_0_38_job_properties::oversubscribeIsSet() const
{
    return m_OversubscribeIsSet;
}

void V0_0_38_job_properties::unsetOversubscribe()
{
    m_OversubscribeIsSet = false;
}
utility::string_t V0_0_38_job_properties::getPartition() const
{
    return m_Partition;
}

void V0_0_38_job_properties::setPartition(const utility::string_t& value)
{
    m_Partition = value;
    m_PartitionIsSet = true;
}

bool V0_0_38_job_properties::partitionIsSet() const
{
    return m_PartitionIsSet;
}

void V0_0_38_job_properties::unsetPartition()
{
    m_PartitionIsSet = false;
}
utility::string_t V0_0_38_job_properties::getPrefer() const
{
    return m_Prefer;
}

void V0_0_38_job_properties::setPrefer(const utility::string_t& value)
{
    m_Prefer = value;
    m_PreferIsSet = true;
}

bool V0_0_38_job_properties::preferIsSet() const
{
    return m_PreferIsSet;
}

void V0_0_38_job_properties::unsetPrefer()
{
    m_PreferIsSet = false;
}
utility::string_t V0_0_38_job_properties::getPriority() const
{
    return m_Priority;
}

void V0_0_38_job_properties::setPriority(const utility::string_t& value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool V0_0_38_job_properties::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void V0_0_38_job_properties::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t V0_0_38_job_properties::getQos() const
{
    return m_Qos;
}

void V0_0_38_job_properties::setQos(const utility::string_t& value)
{
    m_Qos = value;
    m_QosIsSet = true;
}

bool V0_0_38_job_properties::qosIsSet() const
{
    return m_QosIsSet;
}

void V0_0_38_job_properties::unsetQos()
{
    m_QosIsSet = false;
}
bool V0_0_38_job_properties::isRequeue() const
{
    return m_Requeue;
}

void V0_0_38_job_properties::setRequeue(bool value)
{
    m_Requeue = value;
    m_RequeueIsSet = true;
}

bool V0_0_38_job_properties::requeueIsSet() const
{
    return m_RequeueIsSet;
}

void V0_0_38_job_properties::unsetRequeue()
{
    m_RequeueIsSet = false;
}
utility::string_t V0_0_38_job_properties::getReservation() const
{
    return m_Reservation;
}

void V0_0_38_job_properties::setReservation(const utility::string_t& value)
{
    m_Reservation = value;
    m_ReservationIsSet = true;
}

bool V0_0_38_job_properties::reservationIsSet() const
{
    return m_ReservationIsSet;
}

void V0_0_38_job_properties::unsetReservation()
{
    m_ReservationIsSet = false;
}
utility::string_t V0_0_38_job_properties::getSignal() const
{
    return m_Signal;
}

void V0_0_38_job_properties::setSignal(const utility::string_t& value)
{
    m_Signal = value;
    m_SignalIsSet = true;
}

bool V0_0_38_job_properties::signalIsSet() const
{
    return m_SignalIsSet;
}

void V0_0_38_job_properties::unsetSignal()
{
    m_SignalIsSet = false;
}
int32_t V0_0_38_job_properties::getSocketsPerNode() const
{
    return m_Sockets_per_node;
}

void V0_0_38_job_properties::setSocketsPerNode(int32_t value)
{
    m_Sockets_per_node = value;
    m_Sockets_per_nodeIsSet = true;
}

bool V0_0_38_job_properties::socketsPerNodeIsSet() const
{
    return m_Sockets_per_nodeIsSet;
}

void V0_0_38_job_properties::unsetSockets_per_node()
{
    m_Sockets_per_nodeIsSet = false;
}
bool V0_0_38_job_properties::isSpreadJob() const
{
    return m_Spread_job;
}

void V0_0_38_job_properties::setSpreadJob(bool value)
{
    m_Spread_job = value;
    m_Spread_jobIsSet = true;
}

bool V0_0_38_job_properties::spreadJobIsSet() const
{
    return m_Spread_jobIsSet;
}

void V0_0_38_job_properties::unsetSpread_job()
{
    m_Spread_jobIsSet = false;
}
utility::string_t V0_0_38_job_properties::getStandardError() const
{
    return m_Standard_error;
}

void V0_0_38_job_properties::setStandardError(const utility::string_t& value)
{
    m_Standard_error = value;
    m_Standard_errorIsSet = true;
}

bool V0_0_38_job_properties::standardErrorIsSet() const
{
    return m_Standard_errorIsSet;
}

void V0_0_38_job_properties::unsetStandard_error()
{
    m_Standard_errorIsSet = false;
}
utility::string_t V0_0_38_job_properties::getStandardInput() const
{
    return m_Standard_input;
}

void V0_0_38_job_properties::setStandardInput(const utility::string_t& value)
{
    m_Standard_input = value;
    m_Standard_inputIsSet = true;
}

bool V0_0_38_job_properties::standardInputIsSet() const
{
    return m_Standard_inputIsSet;
}

void V0_0_38_job_properties::unsetStandard_input()
{
    m_Standard_inputIsSet = false;
}
utility::string_t V0_0_38_job_properties::getStandardOutput() const
{
    return m_Standard_output;
}

void V0_0_38_job_properties::setStandardOutput(const utility::string_t& value)
{
    m_Standard_output = value;
    m_Standard_outputIsSet = true;
}

bool V0_0_38_job_properties::standardOutputIsSet() const
{
    return m_Standard_outputIsSet;
}

void V0_0_38_job_properties::unsetStandard_output()
{
    m_Standard_outputIsSet = false;
}
int32_t V0_0_38_job_properties::getTasks() const
{
    return m_Tasks;
}

void V0_0_38_job_properties::setTasks(int32_t value)
{
    m_Tasks = value;
    m_TasksIsSet = true;
}

bool V0_0_38_job_properties::tasksIsSet() const
{
    return m_TasksIsSet;
}

void V0_0_38_job_properties::unsetTasks()
{
    m_TasksIsSet = false;
}
int32_t V0_0_38_job_properties::getTasksPerCore() const
{
    return m_Tasks_per_core;
}

void V0_0_38_job_properties::setTasksPerCore(int32_t value)
{
    m_Tasks_per_core = value;
    m_Tasks_per_coreIsSet = true;
}

bool V0_0_38_job_properties::tasksPerCoreIsSet() const
{
    return m_Tasks_per_coreIsSet;
}

void V0_0_38_job_properties::unsetTasks_per_core()
{
    m_Tasks_per_coreIsSet = false;
}
int32_t V0_0_38_job_properties::getTasksPerNode() const
{
    return m_Tasks_per_node;
}

void V0_0_38_job_properties::setTasksPerNode(int32_t value)
{
    m_Tasks_per_node = value;
    m_Tasks_per_nodeIsSet = true;
}

bool V0_0_38_job_properties::tasksPerNodeIsSet() const
{
    return m_Tasks_per_nodeIsSet;
}

void V0_0_38_job_properties::unsetTasks_per_node()
{
    m_Tasks_per_nodeIsSet = false;
}
int32_t V0_0_38_job_properties::getTasksPerSocket() const
{
    return m_Tasks_per_socket;
}

void V0_0_38_job_properties::setTasksPerSocket(int32_t value)
{
    m_Tasks_per_socket = value;
    m_Tasks_per_socketIsSet = true;
}

bool V0_0_38_job_properties::tasksPerSocketIsSet() const
{
    return m_Tasks_per_socketIsSet;
}

void V0_0_38_job_properties::unsetTasks_per_socket()
{
    m_Tasks_per_socketIsSet = false;
}
int32_t V0_0_38_job_properties::getThreadSpecification() const
{
    return m_Thread_specification;
}

void V0_0_38_job_properties::setThreadSpecification(int32_t value)
{
    m_Thread_specification = value;
    m_Thread_specificationIsSet = true;
}

bool V0_0_38_job_properties::threadSpecificationIsSet() const
{
    return m_Thread_specificationIsSet;
}

void V0_0_38_job_properties::unsetThread_specification()
{
    m_Thread_specificationIsSet = false;
}
int32_t V0_0_38_job_properties::getThreadsPerCore() const
{
    return m_Threads_per_core;
}

void V0_0_38_job_properties::setThreadsPerCore(int32_t value)
{
    m_Threads_per_core = value;
    m_Threads_per_coreIsSet = true;
}

bool V0_0_38_job_properties::threadsPerCoreIsSet() const
{
    return m_Threads_per_coreIsSet;
}

void V0_0_38_job_properties::unsetThreads_per_core()
{
    m_Threads_per_coreIsSet = false;
}
int32_t V0_0_38_job_properties::getTimeLimit() const
{
    return m_Time_limit;
}

void V0_0_38_job_properties::setTimeLimit(int32_t value)
{
    m_Time_limit = value;
    m_Time_limitIsSet = true;
}

bool V0_0_38_job_properties::timeLimitIsSet() const
{
    return m_Time_limitIsSet;
}

void V0_0_38_job_properties::unsetTime_limit()
{
    m_Time_limitIsSet = false;
}
int32_t V0_0_38_job_properties::getTimeMinimum() const
{
    return m_Time_minimum;
}

void V0_0_38_job_properties::setTimeMinimum(int32_t value)
{
    m_Time_minimum = value;
    m_Time_minimumIsSet = true;
}

bool V0_0_38_job_properties::timeMinimumIsSet() const
{
    return m_Time_minimumIsSet;
}

void V0_0_38_job_properties::unsetTime_minimum()
{
    m_Time_minimumIsSet = false;
}
bool V0_0_38_job_properties::isWaitAllNodes() const
{
    return m_Wait_all_nodes;
}

void V0_0_38_job_properties::setWaitAllNodes(bool value)
{
    m_Wait_all_nodes = value;
    m_Wait_all_nodesIsSet = true;
}

bool V0_0_38_job_properties::waitAllNodesIsSet() const
{
    return m_Wait_all_nodesIsSet;
}

void V0_0_38_job_properties::unsetWait_all_nodes()
{
    m_Wait_all_nodesIsSet = false;
}
utility::string_t V0_0_38_job_properties::getWckey() const
{
    return m_Wckey;
}

void V0_0_38_job_properties::setWckey(const utility::string_t& value)
{
    m_Wckey = value;
    m_WckeyIsSet = true;
}

bool V0_0_38_job_properties::wckeyIsSet() const
{
    return m_WckeyIsSet;
}

void V0_0_38_job_properties::unsetWckey()
{
    m_WckeyIsSet = false;
}
}
}
}
}


