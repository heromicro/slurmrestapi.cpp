/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_37_diag_statistics.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_37_diag_statistics::V0_0_37_diag_statistics()
{
    m_Parts_packed = 0;
    m_Parts_packedIsSet = false;
    m_Req_time = 0;
    m_Req_timeIsSet = false;
    m_Req_time_start = 0;
    m_Req_time_startIsSet = false;
    m_Server_thread_count = 0;
    m_Server_thread_countIsSet = false;
    m_Agent_queue_size = 0;
    m_Agent_queue_sizeIsSet = false;
    m_Agent_count = 0;
    m_Agent_countIsSet = false;
    m_Agent_thread_count = 0;
    m_Agent_thread_countIsSet = false;
    m_Dbd_agent_queue_size = 0;
    m_Dbd_agent_queue_sizeIsSet = false;
    m_Gettimeofday_latency = 0;
    m_Gettimeofday_latencyIsSet = false;
    m_Schedule_cycle_max = 0;
    m_Schedule_cycle_maxIsSet = false;
    m_Schedule_cycle_last = 0;
    m_Schedule_cycle_lastIsSet = false;
    m_Schedule_cycle_total = 0;
    m_Schedule_cycle_totalIsSet = false;
    m_Schedule_cycle_mean = 0;
    m_Schedule_cycle_meanIsSet = false;
    m_Schedule_cycle_mean_depth = 0;
    m_Schedule_cycle_mean_depthIsSet = false;
    m_Schedule_cycle_per_minute = 0;
    m_Schedule_cycle_per_minuteIsSet = false;
    m_Schedule_queue_length = 0;
    m_Schedule_queue_lengthIsSet = false;
    m_Jobs_submitted = 0;
    m_Jobs_submittedIsSet = false;
    m_Jobs_started = 0;
    m_Jobs_startedIsSet = false;
    m_Jobs_completed = 0;
    m_Jobs_completedIsSet = false;
    m_Jobs_canceled = 0;
    m_Jobs_canceledIsSet = false;
    m_Jobs_failed = 0;
    m_Jobs_failedIsSet = false;
    m_Jobs_pending = 0;
    m_Jobs_pendingIsSet = false;
    m_Jobs_running = 0;
    m_Jobs_runningIsSet = false;
    m_Job_states_ts = 0;
    m_Job_states_tsIsSet = false;
    m_Bf_backfilled_jobs = 0;
    m_Bf_backfilled_jobsIsSet = false;
    m_Bf_last_backfilled_jobs = 0;
    m_Bf_last_backfilled_jobsIsSet = false;
    m_Bf_backfilled_het_jobs = 0;
    m_Bf_backfilled_het_jobsIsSet = false;
    m_Bf_cycle_counter = 0;
    m_Bf_cycle_counterIsSet = false;
    m_Bf_cycle_mean = 0;
    m_Bf_cycle_meanIsSet = false;
    m_Bf_cycle_max = 0;
    m_Bf_cycle_maxIsSet = false;
    m_Bf_last_depth = 0;
    m_Bf_last_depthIsSet = false;
    m_Bf_last_depth_try = 0;
    m_Bf_last_depth_tryIsSet = false;
    m_Bf_depth_mean = 0;
    m_Bf_depth_meanIsSet = false;
    m_Bf_depth_mean_try = 0;
    m_Bf_depth_mean_tryIsSet = false;
    m_Bf_cycle_last = 0;
    m_Bf_cycle_lastIsSet = false;
    m_Bf_queue_len = 0;
    m_Bf_queue_lenIsSet = false;
    m_Bf_queue_len_mean = 0;
    m_Bf_queue_len_meanIsSet = false;
    m_Bf_when_last_cycle = 0;
    m_Bf_when_last_cycleIsSet = false;
    m_Bf_active = false;
    m_Bf_activeIsSet = false;
}

V0_0_37_diag_statistics::~V0_0_37_diag_statistics()
{
}

void V0_0_37_diag_statistics::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_37_diag_statistics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Parts_packedIsSet)
    {
        val[utility::conversions::to_string_t(U("parts_packed"))] = ModelBase::toJson(m_Parts_packed);
    }
    if(m_Req_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("req_time"))] = ModelBase::toJson(m_Req_time);
    }
    if(m_Req_time_startIsSet)
    {
        val[utility::conversions::to_string_t(U("req_time_start"))] = ModelBase::toJson(m_Req_time_start);
    }
    if(m_Server_thread_countIsSet)
    {
        val[utility::conversions::to_string_t(U("server_thread_count"))] = ModelBase::toJson(m_Server_thread_count);
    }
    if(m_Agent_queue_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("agent_queue_size"))] = ModelBase::toJson(m_Agent_queue_size);
    }
    if(m_Agent_countIsSet)
    {
        val[utility::conversions::to_string_t(U("agent_count"))] = ModelBase::toJson(m_Agent_count);
    }
    if(m_Agent_thread_countIsSet)
    {
        val[utility::conversions::to_string_t(U("agent_thread_count"))] = ModelBase::toJson(m_Agent_thread_count);
    }
    if(m_Dbd_agent_queue_sizeIsSet)
    {
        val[utility::conversions::to_string_t(U("dbd_agent_queue_size"))] = ModelBase::toJson(m_Dbd_agent_queue_size);
    }
    if(m_Gettimeofday_latencyIsSet)
    {
        val[utility::conversions::to_string_t(U("gettimeofday_latency"))] = ModelBase::toJson(m_Gettimeofday_latency);
    }
    if(m_Schedule_cycle_maxIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_max"))] = ModelBase::toJson(m_Schedule_cycle_max);
    }
    if(m_Schedule_cycle_lastIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_last"))] = ModelBase::toJson(m_Schedule_cycle_last);
    }
    if(m_Schedule_cycle_totalIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_total"))] = ModelBase::toJson(m_Schedule_cycle_total);
    }
    if(m_Schedule_cycle_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_mean"))] = ModelBase::toJson(m_Schedule_cycle_mean);
    }
    if(m_Schedule_cycle_mean_depthIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))] = ModelBase::toJson(m_Schedule_cycle_mean_depth);
    }
    if(m_Schedule_cycle_per_minuteIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_cycle_per_minute"))] = ModelBase::toJson(m_Schedule_cycle_per_minute);
    }
    if(m_Schedule_queue_lengthIsSet)
    {
        val[utility::conversions::to_string_t(U("schedule_queue_length"))] = ModelBase::toJson(m_Schedule_queue_length);
    }
    if(m_Jobs_submittedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_submitted"))] = ModelBase::toJson(m_Jobs_submitted);
    }
    if(m_Jobs_startedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_started"))] = ModelBase::toJson(m_Jobs_started);
    }
    if(m_Jobs_completedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_completed"))] = ModelBase::toJson(m_Jobs_completed);
    }
    if(m_Jobs_canceledIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_canceled"))] = ModelBase::toJson(m_Jobs_canceled);
    }
    if(m_Jobs_failedIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_failed"))] = ModelBase::toJson(m_Jobs_failed);
    }
    if(m_Jobs_pendingIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_pending"))] = ModelBase::toJson(m_Jobs_pending);
    }
    if(m_Jobs_runningIsSet)
    {
        val[utility::conversions::to_string_t(U("jobs_running"))] = ModelBase::toJson(m_Jobs_running);
    }
    if(m_Job_states_tsIsSet)
    {
        val[utility::conversions::to_string_t(U("job_states_ts"))] = ModelBase::toJson(m_Job_states_ts);
    }
    if(m_Bf_backfilled_jobsIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_backfilled_jobs"))] = ModelBase::toJson(m_Bf_backfilled_jobs);
    }
    if(m_Bf_last_backfilled_jobsIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))] = ModelBase::toJson(m_Bf_last_backfilled_jobs);
    }
    if(m_Bf_backfilled_het_jobsIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))] = ModelBase::toJson(m_Bf_backfilled_het_jobs);
    }
    if(m_Bf_cycle_counterIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_counter"))] = ModelBase::toJson(m_Bf_cycle_counter);
    }
    if(m_Bf_cycle_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_mean"))] = ModelBase::toJson(m_Bf_cycle_mean);
    }
    if(m_Bf_cycle_maxIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_max"))] = ModelBase::toJson(m_Bf_cycle_max);
    }
    if(m_Bf_last_depthIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_last_depth"))] = ModelBase::toJson(m_Bf_last_depth);
    }
    if(m_Bf_last_depth_tryIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_last_depth_try"))] = ModelBase::toJson(m_Bf_last_depth_try);
    }
    if(m_Bf_depth_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_depth_mean"))] = ModelBase::toJson(m_Bf_depth_mean);
    }
    if(m_Bf_depth_mean_tryIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_depth_mean_try"))] = ModelBase::toJson(m_Bf_depth_mean_try);
    }
    if(m_Bf_cycle_lastIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_cycle_last"))] = ModelBase::toJson(m_Bf_cycle_last);
    }
    if(m_Bf_queue_lenIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_queue_len"))] = ModelBase::toJson(m_Bf_queue_len);
    }
    if(m_Bf_queue_len_meanIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_queue_len_mean"))] = ModelBase::toJson(m_Bf_queue_len_mean);
    }
    if(m_Bf_when_last_cycleIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_when_last_cycle"))] = ModelBase::toJson(m_Bf_when_last_cycle);
    }
    if(m_Bf_activeIsSet)
    {
        val[utility::conversions::to_string_t(U("bf_active"))] = ModelBase::toJson(m_Bf_active);
    }

    return val;
}

bool V0_0_37_diag_statistics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("parts_packed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parts_packed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPartsPacked;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartsPacked);
            setPartsPacked(refVal_setPartsPacked);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("req_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("req_time")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setReqTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReqTime);
            setReqTime(refVal_setReqTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("req_time_start"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("req_time_start")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setReqTimeStart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReqTimeStart);
            setReqTimeStart(refVal_setReqTimeStart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("server_thread_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("server_thread_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setServerThreadCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerThreadCount);
            setServerThreadCount(refVal_setServerThreadCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agent_queue_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent_queue_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgentQueueSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentQueueSize);
            setAgentQueueSize(refVal_setAgentQueueSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agent_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgentCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentCount);
            setAgentCount(refVal_setAgentCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agent_thread_count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent_thread_count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgentThreadCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentThreadCount);
            setAgentThreadCount(refVal_setAgentThreadCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("dbd_agent_queue_size"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("dbd_agent_queue_size")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setDbdAgentQueueSize;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDbdAgentQueueSize);
            setDbdAgentQueueSize(refVal_setDbdAgentQueueSize);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gettimeofday_latency"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gettimeofday_latency")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setGettimeofdayLatency;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGettimeofdayLatency);
            setGettimeofdayLatency(refVal_setGettimeofdayLatency);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_max"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_max")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleMax);
            setScheduleCycleMax(refVal_setScheduleCycleMax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_last"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_last")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleLast;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleLast);
            setScheduleCycleLast(refVal_setScheduleCycleLast);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleTotal);
            setScheduleCycleTotal(refVal_setScheduleCycleTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_mean")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleMean);
            setScheduleCycleMean(refVal_setScheduleCycleMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_mean_depth")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCycleMeanDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCycleMeanDepth);
            setScheduleCycleMeanDepth(refVal_setScheduleCycleMeanDepth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_cycle_per_minute"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_cycle_per_minute")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleCyclePerMinute;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleCyclePerMinute);
            setScheduleCyclePerMinute(refVal_setScheduleCyclePerMinute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("schedule_queue_length"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("schedule_queue_length")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setScheduleQueueLength;
            ok &= ModelBase::fromJson(fieldValue, refVal_setScheduleQueueLength);
            setScheduleQueueLength(refVal_setScheduleQueueLength);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_submitted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_submitted")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsSubmitted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsSubmitted);
            setJobsSubmitted(refVal_setJobsSubmitted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_started"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_started")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsStarted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsStarted);
            setJobsStarted(refVal_setJobsStarted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_completed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_completed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsCompleted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsCompleted);
            setJobsCompleted(refVal_setJobsCompleted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_canceled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_canceled")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsCanceled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsCanceled);
            setJobsCanceled(refVal_setJobsCanceled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_failed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_failed")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsFailed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsFailed);
            setJobsFailed(refVal_setJobsFailed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_pending"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_pending")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsPending;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsPending);
            setJobsPending(refVal_setJobsPending);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("jobs_running"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("jobs_running")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobsRunning;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobsRunning);
            setJobsRunning(refVal_setJobsRunning);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_states_ts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_states_ts")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobStatesTs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobStatesTs);
            setJobStatesTs(refVal_setJobStatesTs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_backfilled_jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_backfilled_jobs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfBackfilledJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfBackfilledJobs);
            setBfBackfilledJobs(refVal_setBfBackfilledJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_last_backfilled_jobs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfLastBackfilledJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfLastBackfilledJobs);
            setBfLastBackfilledJobs(refVal_setBfLastBackfilledJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_backfilled_het_jobs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfBackfilledHetJobs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfBackfilledHetJobs);
            setBfBackfilledHetJobs(refVal_setBfBackfilledHetJobs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_counter"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_counter")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfCycleCounter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleCounter);
            setBfCycleCounter(refVal_setBfCycleCounter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_mean")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfCycleMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleMean);
            setBfCycleMean(refVal_setBfCycleMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_max"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_max")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfCycleMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleMax);
            setBfCycleMax(refVal_setBfCycleMax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_last_depth"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_last_depth")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfLastDepth;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfLastDepth);
            setBfLastDepth(refVal_setBfLastDepth);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_last_depth_try"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_last_depth_try")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfLastDepthTry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfLastDepthTry);
            setBfLastDepthTry(refVal_setBfLastDepthTry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_depth_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_depth_mean")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfDepthMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfDepthMean);
            setBfDepthMean(refVal_setBfDepthMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_depth_mean_try"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_depth_mean_try")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfDepthMeanTry;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfDepthMeanTry);
            setBfDepthMeanTry(refVal_setBfDepthMeanTry);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_cycle_last"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_cycle_last")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfCycleLast;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfCycleLast);
            setBfCycleLast(refVal_setBfCycleLast);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_queue_len"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_queue_len")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfQueueLen;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfQueueLen);
            setBfQueueLen(refVal_setBfQueueLen);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_queue_len_mean"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_queue_len_mean")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfQueueLenMean;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfQueueLenMean);
            setBfQueueLenMean(refVal_setBfQueueLenMean);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_when_last_cycle"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_when_last_cycle")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBfWhenLastCycle;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfWhenLastCycle);
            setBfWhenLastCycle(refVal_setBfWhenLastCycle);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("bf_active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("bf_active")));
        if(!fieldValue.is_null())
        {
            bool refVal_setBfActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBfActive);
            setBfActive(refVal_setBfActive);
        }
    }
    return ok;
}

void V0_0_37_diag_statistics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Parts_packedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parts_packed")), m_Parts_packed));
    }
    if(m_Req_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("req_time")), m_Req_time));
    }
    if(m_Req_time_startIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("req_time_start")), m_Req_time_start));
    }
    if(m_Server_thread_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("server_thread_count")), m_Server_thread_count));
    }
    if(m_Agent_queue_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent_queue_size")), m_Agent_queue_size));
    }
    if(m_Agent_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent_count")), m_Agent_count));
    }
    if(m_Agent_thread_countIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent_thread_count")), m_Agent_thread_count));
    }
    if(m_Dbd_agent_queue_sizeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("dbd_agent_queue_size")), m_Dbd_agent_queue_size));
    }
    if(m_Gettimeofday_latencyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gettimeofday_latency")), m_Gettimeofday_latency));
    }
    if(m_Schedule_cycle_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_max")), m_Schedule_cycle_max));
    }
    if(m_Schedule_cycle_lastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_last")), m_Schedule_cycle_last));
    }
    if(m_Schedule_cycle_totalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_total")), m_Schedule_cycle_total));
    }
    if(m_Schedule_cycle_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_mean")), m_Schedule_cycle_mean));
    }
    if(m_Schedule_cycle_mean_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_mean_depth")), m_Schedule_cycle_mean_depth));
    }
    if(m_Schedule_cycle_per_minuteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_cycle_per_minute")), m_Schedule_cycle_per_minute));
    }
    if(m_Schedule_queue_lengthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("schedule_queue_length")), m_Schedule_queue_length));
    }
    if(m_Jobs_submittedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_submitted")), m_Jobs_submitted));
    }
    if(m_Jobs_startedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_started")), m_Jobs_started));
    }
    if(m_Jobs_completedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_completed")), m_Jobs_completed));
    }
    if(m_Jobs_canceledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_canceled")), m_Jobs_canceled));
    }
    if(m_Jobs_failedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_failed")), m_Jobs_failed));
    }
    if(m_Jobs_pendingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_pending")), m_Jobs_pending));
    }
    if(m_Jobs_runningIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("jobs_running")), m_Jobs_running));
    }
    if(m_Job_states_tsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_states_ts")), m_Job_states_ts));
    }
    if(m_Bf_backfilled_jobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_backfilled_jobs")), m_Bf_backfilled_jobs));
    }
    if(m_Bf_last_backfilled_jobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_last_backfilled_jobs")), m_Bf_last_backfilled_jobs));
    }
    if(m_Bf_backfilled_het_jobsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_backfilled_het_jobs")), m_Bf_backfilled_het_jobs));
    }
    if(m_Bf_cycle_counterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_counter")), m_Bf_cycle_counter));
    }
    if(m_Bf_cycle_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_mean")), m_Bf_cycle_mean));
    }
    if(m_Bf_cycle_maxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_max")), m_Bf_cycle_max));
    }
    if(m_Bf_last_depthIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_last_depth")), m_Bf_last_depth));
    }
    if(m_Bf_last_depth_tryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_last_depth_try")), m_Bf_last_depth_try));
    }
    if(m_Bf_depth_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_depth_mean")), m_Bf_depth_mean));
    }
    if(m_Bf_depth_mean_tryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_depth_mean_try")), m_Bf_depth_mean_try));
    }
    if(m_Bf_cycle_lastIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_cycle_last")), m_Bf_cycle_last));
    }
    if(m_Bf_queue_lenIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_queue_len")), m_Bf_queue_len));
    }
    if(m_Bf_queue_len_meanIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_queue_len_mean")), m_Bf_queue_len_mean));
    }
    if(m_Bf_when_last_cycleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_when_last_cycle")), m_Bf_when_last_cycle));
    }
    if(m_Bf_activeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("bf_active")), m_Bf_active));
    }
}

bool V0_0_37_diag_statistics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("parts_packed"))))
    {
        int32_t refVal_setPartsPacked;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parts_packed"))), refVal_setPartsPacked );
        setPartsPacked(refVal_setPartsPacked);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("req_time"))))
    {
        int32_t refVal_setReqTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("req_time"))), refVal_setReqTime );
        setReqTime(refVal_setReqTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("req_time_start"))))
    {
        int32_t refVal_setReqTimeStart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("req_time_start"))), refVal_setReqTimeStart );
        setReqTimeStart(refVal_setReqTimeStart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("server_thread_count"))))
    {
        int32_t refVal_setServerThreadCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("server_thread_count"))), refVal_setServerThreadCount );
        setServerThreadCount(refVal_setServerThreadCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agent_queue_size"))))
    {
        int32_t refVal_setAgentQueueSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent_queue_size"))), refVal_setAgentQueueSize );
        setAgentQueueSize(refVal_setAgentQueueSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agent_count"))))
    {
        int32_t refVal_setAgentCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent_count"))), refVal_setAgentCount );
        setAgentCount(refVal_setAgentCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agent_thread_count"))))
    {
        int32_t refVal_setAgentThreadCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent_thread_count"))), refVal_setAgentThreadCount );
        setAgentThreadCount(refVal_setAgentThreadCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("dbd_agent_queue_size"))))
    {
        int32_t refVal_setDbdAgentQueueSize;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("dbd_agent_queue_size"))), refVal_setDbdAgentQueueSize );
        setDbdAgentQueueSize(refVal_setDbdAgentQueueSize);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gettimeofday_latency"))))
    {
        int32_t refVal_setGettimeofdayLatency;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gettimeofday_latency"))), refVal_setGettimeofdayLatency );
        setGettimeofdayLatency(refVal_setGettimeofdayLatency);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_max"))))
    {
        int32_t refVal_setScheduleCycleMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_max"))), refVal_setScheduleCycleMax );
        setScheduleCycleMax(refVal_setScheduleCycleMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_last"))))
    {
        int32_t refVal_setScheduleCycleLast;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_last"))), refVal_setScheduleCycleLast );
        setScheduleCycleLast(refVal_setScheduleCycleLast);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_total"))))
    {
        int32_t refVal_setScheduleCycleTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_total"))), refVal_setScheduleCycleTotal );
        setScheduleCycleTotal(refVal_setScheduleCycleTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_mean"))))
    {
        int32_t refVal_setScheduleCycleMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_mean"))), refVal_setScheduleCycleMean );
        setScheduleCycleMean(refVal_setScheduleCycleMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))))
    {
        int32_t refVal_setScheduleCycleMeanDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_mean_depth"))), refVal_setScheduleCycleMeanDepth );
        setScheduleCycleMeanDepth(refVal_setScheduleCycleMeanDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_cycle_per_minute"))))
    {
        int32_t refVal_setScheduleCyclePerMinute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_cycle_per_minute"))), refVal_setScheduleCyclePerMinute );
        setScheduleCyclePerMinute(refVal_setScheduleCyclePerMinute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("schedule_queue_length"))))
    {
        int32_t refVal_setScheduleQueueLength;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("schedule_queue_length"))), refVal_setScheduleQueueLength );
        setScheduleQueueLength(refVal_setScheduleQueueLength);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_submitted"))))
    {
        int32_t refVal_setJobsSubmitted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_submitted"))), refVal_setJobsSubmitted );
        setJobsSubmitted(refVal_setJobsSubmitted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_started"))))
    {
        int32_t refVal_setJobsStarted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_started"))), refVal_setJobsStarted );
        setJobsStarted(refVal_setJobsStarted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_completed"))))
    {
        int32_t refVal_setJobsCompleted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_completed"))), refVal_setJobsCompleted );
        setJobsCompleted(refVal_setJobsCompleted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_canceled"))))
    {
        int32_t refVal_setJobsCanceled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_canceled"))), refVal_setJobsCanceled );
        setJobsCanceled(refVal_setJobsCanceled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_failed"))))
    {
        int32_t refVal_setJobsFailed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_failed"))), refVal_setJobsFailed );
        setJobsFailed(refVal_setJobsFailed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_pending"))))
    {
        int32_t refVal_setJobsPending;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_pending"))), refVal_setJobsPending );
        setJobsPending(refVal_setJobsPending);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("jobs_running"))))
    {
        int32_t refVal_setJobsRunning;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("jobs_running"))), refVal_setJobsRunning );
        setJobsRunning(refVal_setJobsRunning);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_states_ts"))))
    {
        int32_t refVal_setJobStatesTs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_states_ts"))), refVal_setJobStatesTs );
        setJobStatesTs(refVal_setJobStatesTs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_backfilled_jobs"))))
    {
        int32_t refVal_setBfBackfilledJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_backfilled_jobs"))), refVal_setBfBackfilledJobs );
        setBfBackfilledJobs(refVal_setBfBackfilledJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))))
    {
        int32_t refVal_setBfLastBackfilledJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_last_backfilled_jobs"))), refVal_setBfLastBackfilledJobs );
        setBfLastBackfilledJobs(refVal_setBfLastBackfilledJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))))
    {
        int32_t refVal_setBfBackfilledHetJobs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_backfilled_het_jobs"))), refVal_setBfBackfilledHetJobs );
        setBfBackfilledHetJobs(refVal_setBfBackfilledHetJobs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_counter"))))
    {
        int32_t refVal_setBfCycleCounter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_counter"))), refVal_setBfCycleCounter );
        setBfCycleCounter(refVal_setBfCycleCounter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_mean"))))
    {
        int32_t refVal_setBfCycleMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_mean"))), refVal_setBfCycleMean );
        setBfCycleMean(refVal_setBfCycleMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_max"))))
    {
        int32_t refVal_setBfCycleMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_max"))), refVal_setBfCycleMax );
        setBfCycleMax(refVal_setBfCycleMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_last_depth"))))
    {
        int32_t refVal_setBfLastDepth;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_last_depth"))), refVal_setBfLastDepth );
        setBfLastDepth(refVal_setBfLastDepth);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_last_depth_try"))))
    {
        int32_t refVal_setBfLastDepthTry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_last_depth_try"))), refVal_setBfLastDepthTry );
        setBfLastDepthTry(refVal_setBfLastDepthTry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_depth_mean"))))
    {
        int32_t refVal_setBfDepthMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_depth_mean"))), refVal_setBfDepthMean );
        setBfDepthMean(refVal_setBfDepthMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_depth_mean_try"))))
    {
        int32_t refVal_setBfDepthMeanTry;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_depth_mean_try"))), refVal_setBfDepthMeanTry );
        setBfDepthMeanTry(refVal_setBfDepthMeanTry);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_cycle_last"))))
    {
        int32_t refVal_setBfCycleLast;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_cycle_last"))), refVal_setBfCycleLast );
        setBfCycleLast(refVal_setBfCycleLast);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_queue_len"))))
    {
        int32_t refVal_setBfQueueLen;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_queue_len"))), refVal_setBfQueueLen );
        setBfQueueLen(refVal_setBfQueueLen);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_queue_len_mean"))))
    {
        int32_t refVal_setBfQueueLenMean;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_queue_len_mean"))), refVal_setBfQueueLenMean );
        setBfQueueLenMean(refVal_setBfQueueLenMean);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_when_last_cycle"))))
    {
        int32_t refVal_setBfWhenLastCycle;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_when_last_cycle"))), refVal_setBfWhenLastCycle );
        setBfWhenLastCycle(refVal_setBfWhenLastCycle);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("bf_active"))))
    {
        bool refVal_setBfActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("bf_active"))), refVal_setBfActive );
        setBfActive(refVal_setBfActive);
    }
    return ok;
}

int32_t V0_0_37_diag_statistics::getPartsPacked() const
{
    return m_Parts_packed;
}

void V0_0_37_diag_statistics::setPartsPacked(int32_t value)
{
    m_Parts_packed = value;
    m_Parts_packedIsSet = true;
}

bool V0_0_37_diag_statistics::partsPackedIsSet() const
{
    return m_Parts_packedIsSet;
}

void V0_0_37_diag_statistics::unsetParts_packed()
{
    m_Parts_packedIsSet = false;
}
int32_t V0_0_37_diag_statistics::getReqTime() const
{
    return m_Req_time;
}

void V0_0_37_diag_statistics::setReqTime(int32_t value)
{
    m_Req_time = value;
    m_Req_timeIsSet = true;
}

bool V0_0_37_diag_statistics::reqTimeIsSet() const
{
    return m_Req_timeIsSet;
}

void V0_0_37_diag_statistics::unsetReq_time()
{
    m_Req_timeIsSet = false;
}
int32_t V0_0_37_diag_statistics::getReqTimeStart() const
{
    return m_Req_time_start;
}

void V0_0_37_diag_statistics::setReqTimeStart(int32_t value)
{
    m_Req_time_start = value;
    m_Req_time_startIsSet = true;
}

bool V0_0_37_diag_statistics::reqTimeStartIsSet() const
{
    return m_Req_time_startIsSet;
}

void V0_0_37_diag_statistics::unsetReq_time_start()
{
    m_Req_time_startIsSet = false;
}
int32_t V0_0_37_diag_statistics::getServerThreadCount() const
{
    return m_Server_thread_count;
}

void V0_0_37_diag_statistics::setServerThreadCount(int32_t value)
{
    m_Server_thread_count = value;
    m_Server_thread_countIsSet = true;
}

bool V0_0_37_diag_statistics::serverThreadCountIsSet() const
{
    return m_Server_thread_countIsSet;
}

void V0_0_37_diag_statistics::unsetServer_thread_count()
{
    m_Server_thread_countIsSet = false;
}
int32_t V0_0_37_diag_statistics::getAgentQueueSize() const
{
    return m_Agent_queue_size;
}

void V0_0_37_diag_statistics::setAgentQueueSize(int32_t value)
{
    m_Agent_queue_size = value;
    m_Agent_queue_sizeIsSet = true;
}

bool V0_0_37_diag_statistics::agentQueueSizeIsSet() const
{
    return m_Agent_queue_sizeIsSet;
}

void V0_0_37_diag_statistics::unsetAgent_queue_size()
{
    m_Agent_queue_sizeIsSet = false;
}
int32_t V0_0_37_diag_statistics::getAgentCount() const
{
    return m_Agent_count;
}

void V0_0_37_diag_statistics::setAgentCount(int32_t value)
{
    m_Agent_count = value;
    m_Agent_countIsSet = true;
}

bool V0_0_37_diag_statistics::agentCountIsSet() const
{
    return m_Agent_countIsSet;
}

void V0_0_37_diag_statistics::unsetAgent_count()
{
    m_Agent_countIsSet = false;
}
int32_t V0_0_37_diag_statistics::getAgentThreadCount() const
{
    return m_Agent_thread_count;
}

void V0_0_37_diag_statistics::setAgentThreadCount(int32_t value)
{
    m_Agent_thread_count = value;
    m_Agent_thread_countIsSet = true;
}

bool V0_0_37_diag_statistics::agentThreadCountIsSet() const
{
    return m_Agent_thread_countIsSet;
}

void V0_0_37_diag_statistics::unsetAgent_thread_count()
{
    m_Agent_thread_countIsSet = false;
}
int32_t V0_0_37_diag_statistics::getDbdAgentQueueSize() const
{
    return m_Dbd_agent_queue_size;
}

void V0_0_37_diag_statistics::setDbdAgentQueueSize(int32_t value)
{
    m_Dbd_agent_queue_size = value;
    m_Dbd_agent_queue_sizeIsSet = true;
}

bool V0_0_37_diag_statistics::dbdAgentQueueSizeIsSet() const
{
    return m_Dbd_agent_queue_sizeIsSet;
}

void V0_0_37_diag_statistics::unsetDbd_agent_queue_size()
{
    m_Dbd_agent_queue_sizeIsSet = false;
}
int32_t V0_0_37_diag_statistics::getGettimeofdayLatency() const
{
    return m_Gettimeofday_latency;
}

void V0_0_37_diag_statistics::setGettimeofdayLatency(int32_t value)
{
    m_Gettimeofday_latency = value;
    m_Gettimeofday_latencyIsSet = true;
}

bool V0_0_37_diag_statistics::gettimeofdayLatencyIsSet() const
{
    return m_Gettimeofday_latencyIsSet;
}

void V0_0_37_diag_statistics::unsetGettimeofday_latency()
{
    m_Gettimeofday_latencyIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleCycleMax() const
{
    return m_Schedule_cycle_max;
}

void V0_0_37_diag_statistics::setScheduleCycleMax(int32_t value)
{
    m_Schedule_cycle_max = value;
    m_Schedule_cycle_maxIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleCycleMaxIsSet() const
{
    return m_Schedule_cycle_maxIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_cycle_max()
{
    m_Schedule_cycle_maxIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleCycleLast() const
{
    return m_Schedule_cycle_last;
}

void V0_0_37_diag_statistics::setScheduleCycleLast(int32_t value)
{
    m_Schedule_cycle_last = value;
    m_Schedule_cycle_lastIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleCycleLastIsSet() const
{
    return m_Schedule_cycle_lastIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_cycle_last()
{
    m_Schedule_cycle_lastIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleCycleTotal() const
{
    return m_Schedule_cycle_total;
}

void V0_0_37_diag_statistics::setScheduleCycleTotal(int32_t value)
{
    m_Schedule_cycle_total = value;
    m_Schedule_cycle_totalIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleCycleTotalIsSet() const
{
    return m_Schedule_cycle_totalIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_cycle_total()
{
    m_Schedule_cycle_totalIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleCycleMean() const
{
    return m_Schedule_cycle_mean;
}

void V0_0_37_diag_statistics::setScheduleCycleMean(int32_t value)
{
    m_Schedule_cycle_mean = value;
    m_Schedule_cycle_meanIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleCycleMeanIsSet() const
{
    return m_Schedule_cycle_meanIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_cycle_mean()
{
    m_Schedule_cycle_meanIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleCycleMeanDepth() const
{
    return m_Schedule_cycle_mean_depth;
}

void V0_0_37_diag_statistics::setScheduleCycleMeanDepth(int32_t value)
{
    m_Schedule_cycle_mean_depth = value;
    m_Schedule_cycle_mean_depthIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleCycleMeanDepthIsSet() const
{
    return m_Schedule_cycle_mean_depthIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_cycle_mean_depth()
{
    m_Schedule_cycle_mean_depthIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleCyclePerMinute() const
{
    return m_Schedule_cycle_per_minute;
}

void V0_0_37_diag_statistics::setScheduleCyclePerMinute(int32_t value)
{
    m_Schedule_cycle_per_minute = value;
    m_Schedule_cycle_per_minuteIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleCyclePerMinuteIsSet() const
{
    return m_Schedule_cycle_per_minuteIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_cycle_per_minute()
{
    m_Schedule_cycle_per_minuteIsSet = false;
}
int32_t V0_0_37_diag_statistics::getScheduleQueueLength() const
{
    return m_Schedule_queue_length;
}

void V0_0_37_diag_statistics::setScheduleQueueLength(int32_t value)
{
    m_Schedule_queue_length = value;
    m_Schedule_queue_lengthIsSet = true;
}

bool V0_0_37_diag_statistics::scheduleQueueLengthIsSet() const
{
    return m_Schedule_queue_lengthIsSet;
}

void V0_0_37_diag_statistics::unsetSchedule_queue_length()
{
    m_Schedule_queue_lengthIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsSubmitted() const
{
    return m_Jobs_submitted;
}

void V0_0_37_diag_statistics::setJobsSubmitted(int32_t value)
{
    m_Jobs_submitted = value;
    m_Jobs_submittedIsSet = true;
}

bool V0_0_37_diag_statistics::jobsSubmittedIsSet() const
{
    return m_Jobs_submittedIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_submitted()
{
    m_Jobs_submittedIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsStarted() const
{
    return m_Jobs_started;
}

void V0_0_37_diag_statistics::setJobsStarted(int32_t value)
{
    m_Jobs_started = value;
    m_Jobs_startedIsSet = true;
}

bool V0_0_37_diag_statistics::jobsStartedIsSet() const
{
    return m_Jobs_startedIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_started()
{
    m_Jobs_startedIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsCompleted() const
{
    return m_Jobs_completed;
}

void V0_0_37_diag_statistics::setJobsCompleted(int32_t value)
{
    m_Jobs_completed = value;
    m_Jobs_completedIsSet = true;
}

bool V0_0_37_diag_statistics::jobsCompletedIsSet() const
{
    return m_Jobs_completedIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_completed()
{
    m_Jobs_completedIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsCanceled() const
{
    return m_Jobs_canceled;
}

void V0_0_37_diag_statistics::setJobsCanceled(int32_t value)
{
    m_Jobs_canceled = value;
    m_Jobs_canceledIsSet = true;
}

bool V0_0_37_diag_statistics::jobsCanceledIsSet() const
{
    return m_Jobs_canceledIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_canceled()
{
    m_Jobs_canceledIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsFailed() const
{
    return m_Jobs_failed;
}

void V0_0_37_diag_statistics::setJobsFailed(int32_t value)
{
    m_Jobs_failed = value;
    m_Jobs_failedIsSet = true;
}

bool V0_0_37_diag_statistics::jobsFailedIsSet() const
{
    return m_Jobs_failedIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_failed()
{
    m_Jobs_failedIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsPending() const
{
    return m_Jobs_pending;
}

void V0_0_37_diag_statistics::setJobsPending(int32_t value)
{
    m_Jobs_pending = value;
    m_Jobs_pendingIsSet = true;
}

bool V0_0_37_diag_statistics::jobsPendingIsSet() const
{
    return m_Jobs_pendingIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_pending()
{
    m_Jobs_pendingIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobsRunning() const
{
    return m_Jobs_running;
}

void V0_0_37_diag_statistics::setJobsRunning(int32_t value)
{
    m_Jobs_running = value;
    m_Jobs_runningIsSet = true;
}

bool V0_0_37_diag_statistics::jobsRunningIsSet() const
{
    return m_Jobs_runningIsSet;
}

void V0_0_37_diag_statistics::unsetJobs_running()
{
    m_Jobs_runningIsSet = false;
}
int32_t V0_0_37_diag_statistics::getJobStatesTs() const
{
    return m_Job_states_ts;
}

void V0_0_37_diag_statistics::setJobStatesTs(int32_t value)
{
    m_Job_states_ts = value;
    m_Job_states_tsIsSet = true;
}

bool V0_0_37_diag_statistics::jobStatesTsIsSet() const
{
    return m_Job_states_tsIsSet;
}

void V0_0_37_diag_statistics::unsetJob_states_ts()
{
    m_Job_states_tsIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfBackfilledJobs() const
{
    return m_Bf_backfilled_jobs;
}

void V0_0_37_diag_statistics::setBfBackfilledJobs(int32_t value)
{
    m_Bf_backfilled_jobs = value;
    m_Bf_backfilled_jobsIsSet = true;
}

bool V0_0_37_diag_statistics::bfBackfilledJobsIsSet() const
{
    return m_Bf_backfilled_jobsIsSet;
}

void V0_0_37_diag_statistics::unsetBf_backfilled_jobs()
{
    m_Bf_backfilled_jobsIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfLastBackfilledJobs() const
{
    return m_Bf_last_backfilled_jobs;
}

void V0_0_37_diag_statistics::setBfLastBackfilledJobs(int32_t value)
{
    m_Bf_last_backfilled_jobs = value;
    m_Bf_last_backfilled_jobsIsSet = true;
}

bool V0_0_37_diag_statistics::bfLastBackfilledJobsIsSet() const
{
    return m_Bf_last_backfilled_jobsIsSet;
}

void V0_0_37_diag_statistics::unsetBf_last_backfilled_jobs()
{
    m_Bf_last_backfilled_jobsIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfBackfilledHetJobs() const
{
    return m_Bf_backfilled_het_jobs;
}

void V0_0_37_diag_statistics::setBfBackfilledHetJobs(int32_t value)
{
    m_Bf_backfilled_het_jobs = value;
    m_Bf_backfilled_het_jobsIsSet = true;
}

bool V0_0_37_diag_statistics::bfBackfilledHetJobsIsSet() const
{
    return m_Bf_backfilled_het_jobsIsSet;
}

void V0_0_37_diag_statistics::unsetBf_backfilled_het_jobs()
{
    m_Bf_backfilled_het_jobsIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfCycleCounter() const
{
    return m_Bf_cycle_counter;
}

void V0_0_37_diag_statistics::setBfCycleCounter(int32_t value)
{
    m_Bf_cycle_counter = value;
    m_Bf_cycle_counterIsSet = true;
}

bool V0_0_37_diag_statistics::bfCycleCounterIsSet() const
{
    return m_Bf_cycle_counterIsSet;
}

void V0_0_37_diag_statistics::unsetBf_cycle_counter()
{
    m_Bf_cycle_counterIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfCycleMean() const
{
    return m_Bf_cycle_mean;
}

void V0_0_37_diag_statistics::setBfCycleMean(int32_t value)
{
    m_Bf_cycle_mean = value;
    m_Bf_cycle_meanIsSet = true;
}

bool V0_0_37_diag_statistics::bfCycleMeanIsSet() const
{
    return m_Bf_cycle_meanIsSet;
}

void V0_0_37_diag_statistics::unsetBf_cycle_mean()
{
    m_Bf_cycle_meanIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfCycleMax() const
{
    return m_Bf_cycle_max;
}

void V0_0_37_diag_statistics::setBfCycleMax(int32_t value)
{
    m_Bf_cycle_max = value;
    m_Bf_cycle_maxIsSet = true;
}

bool V0_0_37_diag_statistics::bfCycleMaxIsSet() const
{
    return m_Bf_cycle_maxIsSet;
}

void V0_0_37_diag_statistics::unsetBf_cycle_max()
{
    m_Bf_cycle_maxIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfLastDepth() const
{
    return m_Bf_last_depth;
}

void V0_0_37_diag_statistics::setBfLastDepth(int32_t value)
{
    m_Bf_last_depth = value;
    m_Bf_last_depthIsSet = true;
}

bool V0_0_37_diag_statistics::bfLastDepthIsSet() const
{
    return m_Bf_last_depthIsSet;
}

void V0_0_37_diag_statistics::unsetBf_last_depth()
{
    m_Bf_last_depthIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfLastDepthTry() const
{
    return m_Bf_last_depth_try;
}

void V0_0_37_diag_statistics::setBfLastDepthTry(int32_t value)
{
    m_Bf_last_depth_try = value;
    m_Bf_last_depth_tryIsSet = true;
}

bool V0_0_37_diag_statistics::bfLastDepthTryIsSet() const
{
    return m_Bf_last_depth_tryIsSet;
}

void V0_0_37_diag_statistics::unsetBf_last_depth_try()
{
    m_Bf_last_depth_tryIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfDepthMean() const
{
    return m_Bf_depth_mean;
}

void V0_0_37_diag_statistics::setBfDepthMean(int32_t value)
{
    m_Bf_depth_mean = value;
    m_Bf_depth_meanIsSet = true;
}

bool V0_0_37_diag_statistics::bfDepthMeanIsSet() const
{
    return m_Bf_depth_meanIsSet;
}

void V0_0_37_diag_statistics::unsetBf_depth_mean()
{
    m_Bf_depth_meanIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfDepthMeanTry() const
{
    return m_Bf_depth_mean_try;
}

void V0_0_37_diag_statistics::setBfDepthMeanTry(int32_t value)
{
    m_Bf_depth_mean_try = value;
    m_Bf_depth_mean_tryIsSet = true;
}

bool V0_0_37_diag_statistics::bfDepthMeanTryIsSet() const
{
    return m_Bf_depth_mean_tryIsSet;
}

void V0_0_37_diag_statistics::unsetBf_depth_mean_try()
{
    m_Bf_depth_mean_tryIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfCycleLast() const
{
    return m_Bf_cycle_last;
}

void V0_0_37_diag_statistics::setBfCycleLast(int32_t value)
{
    m_Bf_cycle_last = value;
    m_Bf_cycle_lastIsSet = true;
}

bool V0_0_37_diag_statistics::bfCycleLastIsSet() const
{
    return m_Bf_cycle_lastIsSet;
}

void V0_0_37_diag_statistics::unsetBf_cycle_last()
{
    m_Bf_cycle_lastIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfQueueLen() const
{
    return m_Bf_queue_len;
}

void V0_0_37_diag_statistics::setBfQueueLen(int32_t value)
{
    m_Bf_queue_len = value;
    m_Bf_queue_lenIsSet = true;
}

bool V0_0_37_diag_statistics::bfQueueLenIsSet() const
{
    return m_Bf_queue_lenIsSet;
}

void V0_0_37_diag_statistics::unsetBf_queue_len()
{
    m_Bf_queue_lenIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfQueueLenMean() const
{
    return m_Bf_queue_len_mean;
}

void V0_0_37_diag_statistics::setBfQueueLenMean(int32_t value)
{
    m_Bf_queue_len_mean = value;
    m_Bf_queue_len_meanIsSet = true;
}

bool V0_0_37_diag_statistics::bfQueueLenMeanIsSet() const
{
    return m_Bf_queue_len_meanIsSet;
}

void V0_0_37_diag_statistics::unsetBf_queue_len_mean()
{
    m_Bf_queue_len_meanIsSet = false;
}
int32_t V0_0_37_diag_statistics::getBfWhenLastCycle() const
{
    return m_Bf_when_last_cycle;
}

void V0_0_37_diag_statistics::setBfWhenLastCycle(int32_t value)
{
    m_Bf_when_last_cycle = value;
    m_Bf_when_last_cycleIsSet = true;
}

bool V0_0_37_diag_statistics::bfWhenLastCycleIsSet() const
{
    return m_Bf_when_last_cycleIsSet;
}

void V0_0_37_diag_statistics::unsetBf_when_last_cycle()
{
    m_Bf_when_last_cycleIsSet = false;
}
bool V0_0_37_diag_statistics::isBfActive() const
{
    return m_Bf_active;
}

void V0_0_37_diag_statistics::setBfActive(bool value)
{
    m_Bf_active = value;
    m_Bf_activeIsSet = true;
}

bool V0_0_37_diag_statistics::bfActiveIsSet() const
{
    return m_Bf_activeIsSet;
}

void V0_0_37_diag_statistics::unsetBf_active()
{
    m_Bf_activeIsSet = false;
}
}
}
}
}


