/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_37_cluster_info.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_37_cluster_info::Dbv0_0_37_cluster_info()
{
    m_ControllerIsSet = false;
    m_FlagsIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Nodes = utility::conversions::to_string_t("");
    m_NodesIsSet = false;
    m_Select_plugin = utility::conversions::to_string_t("");
    m_Select_pluginIsSet = false;
    m_AssociationsIsSet = false;
    m_Rpc_version = 0;
    m_Rpc_versionIsSet = false;
    m_TresIsSet = false;
}

Dbv0_0_37_cluster_info::~Dbv0_0_37_cluster_info()
{
}

void Dbv0_0_37_cluster_info::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_37_cluster_info::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ControllerIsSet)
    {
        val[utility::conversions::to_string_t(U("controller"))] = ModelBase::toJson(m_Controller);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_Select_pluginIsSet)
    {
        val[utility::conversions::to_string_t(U("select_plugin"))] = ModelBase::toJson(m_Select_plugin);
    }
    if(m_AssociationsIsSet)
    {
        val[utility::conversions::to_string_t(U("associations"))] = ModelBase::toJson(m_Associations);
    }
    if(m_Rpc_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("rpc_version"))] = ModelBase::toJson(m_Rpc_version);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }

    return val;
}

bool Dbv0_0_37_cluster_info::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("controller"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("controller")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_37_cluster_info_controller> refVal_setController;
            ok &= ModelBase::fromJson(fieldValue, refVal_setController);
            setController(refVal_setController);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("select_plugin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("select_plugin")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSelectPlugin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelectPlugin);
            setSelectPlugin(refVal_setSelectPlugin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("associations"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("associations")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_37_cluster_info_associations> refVal_setAssociations;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociations);
            setAssociations(refVal_setAssociations);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rpc_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rpc_version")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRpcVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRpcVersion);
            setRpcVersion(refVal_setRpcVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_37_response_tres>> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    return ok;
}

void Dbv0_0_37_cluster_info::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ControllerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("controller")), m_Controller));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_Select_pluginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("select_plugin")), m_Select_plugin));
    }
    if(m_AssociationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("associations")), m_Associations));
    }
    if(m_Rpc_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rpc_version")), m_Rpc_version));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
}

bool Dbv0_0_37_cluster_info::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("controller"))))
    {
        std::shared_ptr<Dbv0_0_37_cluster_info_controller> refVal_setController;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("controller"))), refVal_setController );
        setController(refVal_setController);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        utility::string_t refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("select_plugin"))))
    {
        utility::string_t refVal_setSelectPlugin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("select_plugin"))), refVal_setSelectPlugin );
        setSelectPlugin(refVal_setSelectPlugin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("associations"))))
    {
        std::shared_ptr<Dbv0_0_37_cluster_info_associations> refVal_setAssociations;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("associations"))), refVal_setAssociations );
        setAssociations(refVal_setAssociations);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rpc_version"))))
    {
        int32_t refVal_setRpcVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rpc_version"))), refVal_setRpcVersion );
        setRpcVersion(refVal_setRpcVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_37_response_tres>> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    return ok;
}

std::shared_ptr<Dbv0_0_37_cluster_info_controller> Dbv0_0_37_cluster_info::getController() const
{
    return m_Controller;
}

void Dbv0_0_37_cluster_info::setController(const std::shared_ptr<Dbv0_0_37_cluster_info_controller>& value)
{
    m_Controller = value;
    m_ControllerIsSet = true;
}

bool Dbv0_0_37_cluster_info::controllerIsSet() const
{
    return m_ControllerIsSet;
}

void Dbv0_0_37_cluster_info::unsetController()
{
    m_ControllerIsSet = false;
}
std::vector<utility::string_t>& Dbv0_0_37_cluster_info::getFlags()
{
    return m_Flags;
}

void Dbv0_0_37_cluster_info::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool Dbv0_0_37_cluster_info::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void Dbv0_0_37_cluster_info::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t Dbv0_0_37_cluster_info::getName() const
{
    return m_Name;
}

void Dbv0_0_37_cluster_info::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Dbv0_0_37_cluster_info::nameIsSet() const
{
    return m_NameIsSet;
}

void Dbv0_0_37_cluster_info::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Dbv0_0_37_cluster_info::getNodes() const
{
    return m_Nodes;
}

void Dbv0_0_37_cluster_info::setNodes(const utility::string_t& value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool Dbv0_0_37_cluster_info::nodesIsSet() const
{
    return m_NodesIsSet;
}

void Dbv0_0_37_cluster_info::unsetNodes()
{
    m_NodesIsSet = false;
}
utility::string_t Dbv0_0_37_cluster_info::getSelectPlugin() const
{
    return m_Select_plugin;
}

void Dbv0_0_37_cluster_info::setSelectPlugin(const utility::string_t& value)
{
    m_Select_plugin = value;
    m_Select_pluginIsSet = true;
}

bool Dbv0_0_37_cluster_info::selectPluginIsSet() const
{
    return m_Select_pluginIsSet;
}

void Dbv0_0_37_cluster_info::unsetSelect_plugin()
{
    m_Select_pluginIsSet = false;
}
std::shared_ptr<Dbv0_0_37_cluster_info_associations> Dbv0_0_37_cluster_info::getAssociations() const
{
    return m_Associations;
}

void Dbv0_0_37_cluster_info::setAssociations(const std::shared_ptr<Dbv0_0_37_cluster_info_associations>& value)
{
    m_Associations = value;
    m_AssociationsIsSet = true;
}

bool Dbv0_0_37_cluster_info::associationsIsSet() const
{
    return m_AssociationsIsSet;
}

void Dbv0_0_37_cluster_info::unsetAssociations()
{
    m_AssociationsIsSet = false;
}
int32_t Dbv0_0_37_cluster_info::getRpcVersion() const
{
    return m_Rpc_version;
}

void Dbv0_0_37_cluster_info::setRpcVersion(int32_t value)
{
    m_Rpc_version = value;
    m_Rpc_versionIsSet = true;
}

bool Dbv0_0_37_cluster_info::rpcVersionIsSet() const
{
    return m_Rpc_versionIsSet;
}

void Dbv0_0_37_cluster_info::unsetRpc_version()
{
    m_Rpc_versionIsSet = false;
}
std::vector<std::shared_ptr<Dbv0_0_37_response_tres>>& Dbv0_0_37_cluster_info::getTres()
{
    return m_Tres;
}

void Dbv0_0_37_cluster_info::setTres(const std::vector<std::shared_ptr<Dbv0_0_37_response_tres>>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool Dbv0_0_37_cluster_info::tresIsSet() const
{
    return m_TresIsSet;
}

void Dbv0_0_37_cluster_info::unsetTres()
{
    m_TresIsSet = false;
}
}
}
}
}


