/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_job_required.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_job_required::V0_0_39_job_required()
{
    m_CPUs = 0;
    m_CPUsIsSet = false;
    m_Memory_per_cpuIsSet = false;
    m_Memory_per_nodeIsSet = false;
    m_Memory = 0L;
    m_MemoryIsSet = false;
}

V0_0_39_job_required::~V0_0_39_job_required()
{
}

void V0_0_39_job_required::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_job_required::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CPUsIsSet)
    {
        val[utility::conversions::to_string_t(U("CPUs"))] = ModelBase::toJson(m_CPUs);
    }
    if(m_Memory_per_cpuIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_cpu"))] = ModelBase::toJson(m_Memory_per_cpu);
    }
    if(m_Memory_per_nodeIsSet)
    {
        val[utility::conversions::to_string_t(U("memory_per_node"))] = ModelBase::toJson(m_Memory_per_node);
    }
    if(m_MemoryIsSet)
    {
        val[utility::conversions::to_string_t(U("memory"))] = ModelBase::toJson(m_Memory);
    }

    return val;
}

bool V0_0_39_job_required::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("CPUs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("CPUs")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCPUs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCPUs);
            setCPUs(refVal_setCPUs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_cpu")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerCpu;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerCpu);
            setMemoryPerCpu(refVal_setMemoryPerCpu);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory_per_node")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemoryPerNode);
            setMemoryPerNode(refVal_setMemoryPerNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemory);
            setMemory(refVal_setMemory);
        }
    }
    return ok;
}

void V0_0_39_job_required::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CPUsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("CPUs")), m_CPUs));
    }
    if(m_Memory_per_cpuIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_cpu")), m_Memory_per_cpu));
    }
    if(m_Memory_per_nodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory_per_node")), m_Memory_per_node));
    }
    if(m_MemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory")), m_Memory));
    }
}

bool V0_0_39_job_required::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("CPUs"))))
    {
        int32_t refVal_setCPUs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("CPUs"))), refVal_setCPUs );
        setCPUs(refVal_setCPUs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_cpu"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerCpu;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_cpu"))), refVal_setMemoryPerCpu );
        setMemoryPerCpu(refVal_setMemoryPerCpu);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory_per_node"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setMemoryPerNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory_per_node"))), refVal_setMemoryPerNode );
        setMemoryPerNode(refVal_setMemoryPerNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory"))))
    {
        int64_t refVal_setMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory"))), refVal_setMemory );
        setMemory(refVal_setMemory);
    }
    return ok;
}

int32_t V0_0_39_job_required::getCPUs() const
{
    return m_CPUs;
}

void V0_0_39_job_required::setCPUs(int32_t value)
{
    m_CPUs = value;
    m_CPUsIsSet = true;
}

bool V0_0_39_job_required::cPUsIsSet() const
{
    return m_CPUsIsSet;
}

void V0_0_39_job_required::unsetCPUs()
{
    m_CPUsIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_job_required::getMemoryPerCpu() const
{
    return m_Memory_per_cpu;
}

void V0_0_39_job_required::setMemoryPerCpu(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Memory_per_cpu = value;
    m_Memory_per_cpuIsSet = true;
}

bool V0_0_39_job_required::memoryPerCpuIsSet() const
{
    return m_Memory_per_cpuIsSet;
}

void V0_0_39_job_required::unsetMemory_per_cpu()
{
    m_Memory_per_cpuIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_job_required::getMemoryPerNode() const
{
    return m_Memory_per_node;
}

void V0_0_39_job_required::setMemoryPerNode(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Memory_per_node = value;
    m_Memory_per_nodeIsSet = true;
}

bool V0_0_39_job_required::memoryPerNodeIsSet() const
{
    return m_Memory_per_nodeIsSet;
}

void V0_0_39_job_required::unsetMemory_per_node()
{
    m_Memory_per_nodeIsSet = false;
}
int64_t V0_0_39_job_required::getMemory() const
{
    return m_Memory;
}

void V0_0_39_job_required::setMemory(int64_t value)
{
    m_Memory = value;
    m_MemoryIsSet = true;
}

bool V0_0_39_job_required::memoryIsSet() const
{
    return m_MemoryIsSet;
}

void V0_0_39_job_required::unsetMemory()
{
    m_MemoryIsSet = false;
}
}
}
}
}


