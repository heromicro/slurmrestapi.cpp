/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_slurm_step_id.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_39_slurm_step_id::V0_0_39_slurm_step_id()
{
    m_Job_id = 0;
    m_Job_idIsSet = false;
    m_Step_het_component = 0;
    m_Step_het_componentIsSet = false;
    m_Step_id = utility::conversions::to_string_t("");
    m_Step_idIsSet = false;
}

V0_0_39_slurm_step_id::~V0_0_39_slurm_step_id()
{
}

void V0_0_39_slurm_step_id::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_slurm_step_id::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("job_id"))] = ModelBase::toJson(m_Job_id);
    }
    if(m_Step_het_componentIsSet)
    {
        val[utility::conversions::to_string_t(U("step_het_component"))] = ModelBase::toJson(m_Step_het_component);
    }
    if(m_Step_idIsSet)
    {
        val[utility::conversions::to_string_t(U("step_id"))] = ModelBase::toJson(m_Step_id);
    }

    return val;
}

bool V0_0_39_slurm_step_id::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("step_het_component"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("step_het_component")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setStepHetComponent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStepHetComponent);
            setStepHetComponent(refVal_setStepHetComponent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("step_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("step_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStepId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStepId);
            setStepId(refVal_setStepId);
        }
    }
    return ok;
}

void V0_0_39_slurm_step_id::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_id")), m_Job_id));
    }
    if(m_Step_het_componentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("step_het_component")), m_Step_het_component));
    }
    if(m_Step_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("step_id")), m_Step_id));
    }
}

bool V0_0_39_slurm_step_id::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("job_id"))))
    {
        int32_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_id"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("step_het_component"))))
    {
        int32_t refVal_setStepHetComponent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("step_het_component"))), refVal_setStepHetComponent );
        setStepHetComponent(refVal_setStepHetComponent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("step_id"))))
    {
        utility::string_t refVal_setStepId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("step_id"))), refVal_setStepId );
        setStepId(refVal_setStepId);
    }
    return ok;
}

int32_t V0_0_39_slurm_step_id::getJobId() const
{
    return m_Job_id;
}

void V0_0_39_slurm_step_id::setJobId(int32_t value)
{
    m_Job_id = value;
    m_Job_idIsSet = true;
}

bool V0_0_39_slurm_step_id::jobIdIsSet() const
{
    return m_Job_idIsSet;
}

void V0_0_39_slurm_step_id::unsetJob_id()
{
    m_Job_idIsSet = false;
}
int32_t V0_0_39_slurm_step_id::getStepHetComponent() const
{
    return m_Step_het_component;
}

void V0_0_39_slurm_step_id::setStepHetComponent(int32_t value)
{
    m_Step_het_component = value;
    m_Step_het_componentIsSet = true;
}

bool V0_0_39_slurm_step_id::stepHetComponentIsSet() const
{
    return m_Step_het_componentIsSet;
}

void V0_0_39_slurm_step_id::unsetStep_het_component()
{
    m_Step_het_componentIsSet = false;
}
utility::string_t V0_0_39_slurm_step_id::getStepId() const
{
    return m_Step_id;
}

void V0_0_39_slurm_step_id::setStepId(const utility::string_t& value)
{
    m_Step_id = value;
    m_Step_idIsSet = true;
}

bool V0_0_39_slurm_step_id::stepIdIsSet() const
{
    return m_Step_idIsSet;
}

void V0_0_39_slurm_step_id::unsetStep_id()
{
    m_Step_idIsSet = false;
}
}
}
}
}


