/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_kill_jobs_resp_job_error.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_kill_jobs_resp_job_error::V0_0_40_kill_jobs_resp_job_error()
{
    m_string = utility::conversions::to_string_t("");
    m_stringIsSet = false;
    m_Code = 0;
    m_CodeIsSet = false;
    m_Message = utility::conversions::to_string_t("");
    m_MessageIsSet = false;
}

V0_0_40_kill_jobs_resp_job_error::~V0_0_40_kill_jobs_resp_job_error()
{
}

void V0_0_40_kill_jobs_resp_job_error::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_kill_jobs_resp_job_error::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_stringIsSet)
    {
        val[utility::conversions::to_string_t(U("string"))] = ModelBase::toJson(m_string);
    }
    if(m_CodeIsSet)
    {
        val[utility::conversions::to_string_t(U("code"))] = ModelBase::toJson(m_Code);
    }
    if(m_MessageIsSet)
    {
        val[utility::conversions::to_string_t(U("message"))] = ModelBase::toJson(m_Message);
    }

    return val;
}

bool V0_0_40_kill_jobs_resp_job_error::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("string"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("string")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setString;
            ok &= ModelBase::fromJson(fieldValue, refVal_setString);
            setString(refVal_setString);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("code")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCode);
            setCode(refVal_setCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("message"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("message")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMessage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMessage);
            setMessage(refVal_setMessage);
        }
    }
    return ok;
}

void V0_0_40_kill_jobs_resp_job_error::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_stringIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("string")), m_string));
    }
    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("code")), m_Code));
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("message")), m_Message));
    }
}

bool V0_0_40_kill_jobs_resp_job_error::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("string"))))
    {
        utility::string_t refVal_setString;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("string"))), refVal_setString );
        setString(refVal_setString);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("code"))))
    {
        int32_t refVal_setCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("code"))), refVal_setCode );
        setCode(refVal_setCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("message"))))
    {
        utility::string_t refVal_setMessage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("message"))), refVal_setMessage );
        setMessage(refVal_setMessage);
    }
    return ok;
}

utility::string_t V0_0_40_kill_jobs_resp_job_error::getString() const
{
    return m_string;
}

void V0_0_40_kill_jobs_resp_job_error::setString(const utility::string_t& value)
{
    m_string = value;
    m_stringIsSet = true;
}

bool V0_0_40_kill_jobs_resp_job_error::stringIsSet() const
{
    return m_stringIsSet;
}

void V0_0_40_kill_jobs_resp_job_error::unsetstring()
{
    m_stringIsSet = false;
}
int32_t V0_0_40_kill_jobs_resp_job_error::getCode() const
{
    return m_Code;
}

void V0_0_40_kill_jobs_resp_job_error::setCode(int32_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}

bool V0_0_40_kill_jobs_resp_job_error::codeIsSet() const
{
    return m_CodeIsSet;
}

void V0_0_40_kill_jobs_resp_job_error::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t V0_0_40_kill_jobs_resp_job_error::getMessage() const
{
    return m_Message;
}

void V0_0_40_kill_jobs_resp_job_error::setMessage(const utility::string_t& value)
{
    m_Message = value;
    m_MessageIsSet = true;
}

bool V0_0_40_kill_jobs_resp_job_error::messageIsSet() const
{
    return m_MessageIsSet;
}

void V0_0_40_kill_jobs_resp_job_error::unsetMessage()
{
    m_MessageIsSet = false;
}
}
}
}
}


