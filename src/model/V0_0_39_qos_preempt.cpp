/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_qos_preempt.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_39_qos_preempt::V0_0_39_qos_preempt()
{
    m_ListIsSet = false;
    m_ModeIsSet = false;
    m_Exempt_timeIsSet = false;
}

V0_0_39_qos_preempt::~V0_0_39_qos_preempt()
{
}

void V0_0_39_qos_preempt::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_qos_preempt::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ListIsSet)
    {
        val[utility::conversions::to_string_t(U("list"))] = ModelBase::toJson(m_List);
    }
    if(m_ModeIsSet)
    {
        val[utility::conversions::to_string_t(U("mode"))] = ModelBase::toJson(m_Mode);
    }
    if(m_Exempt_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("exempt_time"))] = ModelBase::toJson(m_Exempt_time);
    }

    return val;
}

bool V0_0_39_qos_preempt::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("list"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("list")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setList;
            ok &= ModelBase::fromJson(fieldValue, refVal_setList);
            setList(refVal_setList);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mode")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMode);
            setMode(refVal_setMode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exempt_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exempt_time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setExemptTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExemptTime);
            setExemptTime(refVal_setExemptTime);
        }
    }
    return ok;
}

void V0_0_39_qos_preempt::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ListIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("list")), m_List));
    }
    if(m_ModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mode")), m_Mode));
    }
    if(m_Exempt_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exempt_time")), m_Exempt_time));
    }
}

bool V0_0_39_qos_preempt::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("list"))))
    {
        std::vector<utility::string_t> refVal_setList;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("list"))), refVal_setList );
        setList(refVal_setList);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mode"))))
    {
        std::vector<utility::string_t> refVal_setMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mode"))), refVal_setMode );
        setMode(refVal_setMode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exempt_time"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setExemptTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exempt_time"))), refVal_setExemptTime );
        setExemptTime(refVal_setExemptTime);
    }
    return ok;
}

std::vector<utility::string_t>& V0_0_39_qos_preempt::getList()
{
    return m_List;
}

void V0_0_39_qos_preempt::setList(const std::vector<utility::string_t>& value)
{
    m_List = value;
    m_ListIsSet = true;
}

bool V0_0_39_qos_preempt::listIsSet() const
{
    return m_ListIsSet;
}

void V0_0_39_qos_preempt::unsetList()
{
    m_ListIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_qos_preempt::getMode()
{
    return m_Mode;
}

void V0_0_39_qos_preempt::setMode(const std::vector<utility::string_t>& value)
{
    m_Mode = value;
    m_ModeIsSet = true;
}

bool V0_0_39_qos_preempt::modeIsSet() const
{
    return m_ModeIsSet;
}

void V0_0_39_qos_preempt::unsetMode()
{
    m_ModeIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_qos_preempt::getExemptTime() const
{
    return m_Exempt_time;
}

void V0_0_39_qos_preempt::setExemptTime(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Exempt_time = value;
    m_Exempt_timeIsSet = true;
}

bool V0_0_39_qos_preempt::exemptTimeIsSet() const
{
    return m_Exempt_timeIsSet;
}

void V0_0_39_qos_preempt::unsetExempt_time()
{
    m_Exempt_timeIsSet = false;
}
}
}
}
}


