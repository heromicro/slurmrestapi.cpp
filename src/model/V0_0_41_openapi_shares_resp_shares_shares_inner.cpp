/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_shares_resp_shares_shares_inner.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_shares_resp_shares_shares_inner::V0_0_41_openapi_shares_resp_shares_shares_inner()
{
    m_Id = 0;
    m_IdIsSet = false;
    m_Cluster = utility::conversions::to_string_t("");
    m_ClusterIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Parent = utility::conversions::to_string_t("");
    m_ParentIsSet = false;
    m_Partition = utility::conversions::to_string_t("");
    m_PartitionIsSet = false;
    m_Shares_normalizedIsSet = false;
    m_SharesIsSet = false;
    m_TresIsSet = false;
    m_Effective_usage = 0.0;
    m_Effective_usageIsSet = false;
    m_Usage_normalizedIsSet = false;
    m_Usage = 0L;
    m_UsageIsSet = false;
    m_FairshareIsSet = false;
    m_TypeIsSet = false;
}

V0_0_41_openapi_shares_resp_shares_shares_inner::~V0_0_41_openapi_shares_resp_shares_shares_inner()
{
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_shares_resp_shares_shares_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_ClusterIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster"))] = ModelBase::toJson(m_Cluster);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_ParentIsSet)
    {
        val[utility::conversions::to_string_t(U("parent"))] = ModelBase::toJson(m_Parent);
    }
    if(m_PartitionIsSet)
    {
        val[utility::conversions::to_string_t(U("partition"))] = ModelBase::toJson(m_Partition);
    }
    if(m_Shares_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("shares_normalized"))] = ModelBase::toJson(m_Shares_normalized);
    }
    if(m_SharesIsSet)
    {
        val[utility::conversions::to_string_t(U("shares"))] = ModelBase::toJson(m_Shares);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }
    if(m_Effective_usageIsSet)
    {
        val[utility::conversions::to_string_t(U("effective_usage"))] = ModelBase::toJson(m_Effective_usage);
    }
    if(m_Usage_normalizedIsSet)
    {
        val[utility::conversions::to_string_t(U("usage_normalized"))] = ModelBase::toJson(m_Usage_normalized);
    }
    if(m_UsageIsSet)
    {
        val[utility::conversions::to_string_t(U("usage"))] = ModelBase::toJson(m_Usage);
    }
    if(m_FairshareIsSet)
    {
        val[utility::conversions::to_string_t(U("fairshare"))] = ModelBase::toJson(m_Fairshare);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }

    return val;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCluster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCluster);
            setCluster(refVal_setCluster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("parent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("parent")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setParent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setParent);
            setParent(refVal_setParent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartition);
            setPartition(refVal_setPartition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shares_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shares_normalized")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares_normalized> refVal_setSharesNormalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSharesNormalized);
            setSharesNormalized(refVal_setSharesNormalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shares"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shares")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares> refVal_setShares;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShares);
            setShares(refVal_setShares);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_tres> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("effective_usage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("effective_usage")));
        if(!fieldValue.is_null())
        {
            double refVal_setEffectiveUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEffectiveUsage);
            setEffectiveUsage(refVal_setEffectiveUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("usage_normalized"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usage_normalized")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_usage_normalized> refVal_setUsageNormalized;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsageNormalized);
            setUsageNormalized(refVal_setUsageNormalized);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("usage"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("usage")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setUsage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsage);
            setUsage(refVal_setUsage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fairshare"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fairshare")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_assoc_shares_obj_wrap_fairshare> refVal_setFairshare;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFairshare);
            setFairshare(refVal_setFairshare);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    return ok;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_ClusterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster")), m_Cluster));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_ParentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("parent")), m_Parent));
    }
    if(m_PartitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition")), m_Partition));
    }
    if(m_Shares_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shares_normalized")), m_Shares_normalized));
    }
    if(m_SharesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shares")), m_Shares));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
    if(m_Effective_usageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("effective_usage")), m_Effective_usage));
    }
    if(m_Usage_normalizedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usage_normalized")), m_Usage_normalized));
    }
    if(m_UsageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("usage")), m_Usage));
    }
    if(m_FairshareIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fairshare")), m_Fairshare));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        int32_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster"))))
    {
        utility::string_t refVal_setCluster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster"))), refVal_setCluster );
        setCluster(refVal_setCluster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("parent"))))
    {
        utility::string_t refVal_setParent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("parent"))), refVal_setParent );
        setParent(refVal_setParent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition"))))
    {
        utility::string_t refVal_setPartition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition"))), refVal_setPartition );
        setPartition(refVal_setPartition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shares_normalized"))))
    {
        std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares_normalized> refVal_setSharesNormalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shares_normalized"))), refVal_setSharesNormalized );
        setSharesNormalized(refVal_setSharesNormalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shares"))))
    {
        std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares> refVal_setShares;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shares"))), refVal_setShares );
        setShares(refVal_setShares);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_tres> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("effective_usage"))))
    {
        double refVal_setEffectiveUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("effective_usage"))), refVal_setEffectiveUsage );
        setEffectiveUsage(refVal_setEffectiveUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("usage_normalized"))))
    {
        std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_usage_normalized> refVal_setUsageNormalized;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usage_normalized"))), refVal_setUsageNormalized );
        setUsageNormalized(refVal_setUsageNormalized);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("usage"))))
    {
        int64_t refVal_setUsage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("usage"))), refVal_setUsage );
        setUsage(refVal_setUsage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fairshare"))))
    {
        std::shared_ptr<V0_0_40_assoc_shares_obj_wrap_fairshare> refVal_setFairshare;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fairshare"))), refVal_setFairshare );
        setFairshare(refVal_setFairshare);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::vector<utility::string_t> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    return ok;
}

int32_t V0_0_41_openapi_shares_resp_shares_shares_inner::getId() const
{
    return m_Id;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setId(int32_t value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::idIsSet() const
{
    return m_IdIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t V0_0_41_openapi_shares_resp_shares_shares_inner::getCluster() const
{
    return m_Cluster;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setCluster(const utility::string_t& value)
{
    m_Cluster = value;
    m_ClusterIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::clusterIsSet() const
{
    return m_ClusterIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetCluster()
{
    m_ClusterIsSet = false;
}
utility::string_t V0_0_41_openapi_shares_resp_shares_shares_inner::getName() const
{
    return m_Name;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t V0_0_41_openapi_shares_resp_shares_shares_inner::getParent() const
{
    return m_Parent;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setParent(const utility::string_t& value)
{
    m_Parent = value;
    m_ParentIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::parentIsSet() const
{
    return m_ParentIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetParent()
{
    m_ParentIsSet = false;
}
utility::string_t V0_0_41_openapi_shares_resp_shares_shares_inner::getPartition() const
{
    return m_Partition;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setPartition(const utility::string_t& value)
{
    m_Partition = value;
    m_PartitionIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::partitionIsSet() const
{
    return m_PartitionIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetPartition()
{
    m_PartitionIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares_normalized> V0_0_41_openapi_shares_resp_shares_shares_inner::getSharesNormalized() const
{
    return m_Shares_normalized;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setSharesNormalized(const std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares_normalized>& value)
{
    m_Shares_normalized = value;
    m_Shares_normalizedIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::sharesNormalizedIsSet() const
{
    return m_Shares_normalizedIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetShares_normalized()
{
    m_Shares_normalizedIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares> V0_0_41_openapi_shares_resp_shares_shares_inner::getShares() const
{
    return m_Shares;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setShares(const std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_shares>& value)
{
    m_Shares = value;
    m_SharesIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::sharesIsSet() const
{
    return m_SharesIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetShares()
{
    m_SharesIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_tres> V0_0_41_openapi_shares_resp_shares_shares_inner::getTres() const
{
    return m_Tres;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setTres(const std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_tres>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::tresIsSet() const
{
    return m_TresIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetTres()
{
    m_TresIsSet = false;
}
double V0_0_41_openapi_shares_resp_shares_shares_inner::getEffectiveUsage() const
{
    return m_Effective_usage;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setEffectiveUsage(double value)
{
    m_Effective_usage = value;
    m_Effective_usageIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::effectiveUsageIsSet() const
{
    return m_Effective_usageIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetEffective_usage()
{
    m_Effective_usageIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_usage_normalized> V0_0_41_openapi_shares_resp_shares_shares_inner::getUsageNormalized() const
{
    return m_Usage_normalized;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setUsageNormalized(const std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner_usage_normalized>& value)
{
    m_Usage_normalized = value;
    m_Usage_normalizedIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::usageNormalizedIsSet() const
{
    return m_Usage_normalizedIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetUsage_normalized()
{
    m_Usage_normalizedIsSet = false;
}
int64_t V0_0_41_openapi_shares_resp_shares_shares_inner::getUsage() const
{
    return m_Usage;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setUsage(int64_t value)
{
    m_Usage = value;
    m_UsageIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::usageIsSet() const
{
    return m_UsageIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetUsage()
{
    m_UsageIsSet = false;
}
std::shared_ptr<V0_0_40_assoc_shares_obj_wrap_fairshare> V0_0_41_openapi_shares_resp_shares_shares_inner::getFairshare() const
{
    return m_Fairshare;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setFairshare(const std::shared_ptr<V0_0_40_assoc_shares_obj_wrap_fairshare>& value)
{
    m_Fairshare = value;
    m_FairshareIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::fairshareIsSet() const
{
    return m_FairshareIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetFairshare()
{
    m_FairshareIsSet = false;
}
std::vector<utility::string_t>& V0_0_41_openapi_shares_resp_shares_shares_inner::getType()
{
    return m_Type;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::setType(const std::vector<utility::string_t>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool V0_0_41_openapi_shares_resp_shares_shares_inner::typeIsSet() const
{
    return m_TypeIsSet;
}

void V0_0_41_openapi_shares_resp_shares_shares_inner::unsetType()
{
    m_TypeIsSet = false;
}
}
}
}
}


