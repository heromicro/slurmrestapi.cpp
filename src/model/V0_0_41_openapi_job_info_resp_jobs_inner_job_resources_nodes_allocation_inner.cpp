/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner()
{
    m_Index = 0;
    m_IndexIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_CpusIsSet = false;
    m_MemoryIsSet = false;
    m_SocketsIsSet = false;
}

V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::~V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner()
{
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IndexIsSet)
    {
        val[utility::conversions::to_string_t(U("index"))] = ModelBase::toJson(m_Index);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_CpusIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus"))] = ModelBase::toJson(m_Cpus);
    }
    if(m_MemoryIsSet)
    {
        val[utility::conversions::to_string_t(U("memory"))] = ModelBase::toJson(m_Memory);
    }
    if(m_SocketsIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets"))] = ModelBase::toJson(m_Sockets);
    }

    return val;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("index"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("index")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setIndex;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIndex);
            setIndex(refVal_setIndex);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_cpus> refVal_setCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpus);
            setCpus(refVal_setCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("memory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("memory")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory> refVal_setMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMemory);
            setMemory(refVal_setMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_sockets_inner>> refVal_setSockets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSockets);
            setSockets(refVal_setSockets);
        }
    }
    return ok;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IndexIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("index")), m_Index));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_CpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus")), m_Cpus));
    }
    if(m_MemoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("memory")), m_Memory));
    }
    if(m_SocketsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets")), m_Sockets));
    }
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("index"))))
    {
        int32_t refVal_setIndex;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("index"))), refVal_setIndex );
        setIndex(refVal_setIndex);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus"))))
    {
        std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_cpus> refVal_setCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus"))), refVal_setCpus );
        setCpus(refVal_setCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("memory"))))
    {
        std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory> refVal_setMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("memory"))), refVal_setMemory );
        setMemory(refVal_setMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets"))))
    {
        std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_sockets_inner>> refVal_setSockets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets"))), refVal_setSockets );
        setSockets(refVal_setSockets);
    }
    return ok;
}

int32_t V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getIndex() const
{
    return m_Index;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setIndex(int32_t value)
{
    m_Index = value;
    m_IndexIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::indexIsSet() const
{
    return m_IndexIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::unsetIndex()
{
    m_IndexIsSet = false;
}
utility::string_t V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getName() const
{
    return m_Name;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_cpus> V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getCpus() const
{
    return m_Cpus;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setCpus(const std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_cpus>& value)
{
    m_Cpus = value;
    m_CpusIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::cpusIsSet() const
{
    return m_CpusIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::unsetCpus()
{
    m_CpusIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory> V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getMemory() const
{
    return m_Memory;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setMemory(const std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_memory>& value)
{
    m_Memory = value;
    m_MemoryIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::memoryIsSet() const
{
    return m_MemoryIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::unsetMemory()
{
    m_MemoryIsSet = false;
}
std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_sockets_inner>>& V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::getSockets()
{
    return m_Sockets;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::setSockets(const std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner_sockets_inner>>& value)
{
    m_Sockets = value;
    m_SocketsIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::socketsIsSet() const
{
    return m_SocketsIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner::unsetSockets()
{
    m_SocketsIsSet = false;
}
}
}
}
}


