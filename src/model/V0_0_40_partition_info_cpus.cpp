/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_partition_info_cpus.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_40_partition_info_cpus::V0_0_40_partition_info_cpus()
{
    m_Task_binding = 0;
    m_Task_bindingIsSet = false;
    m_Total = 0;
    m_TotalIsSet = false;
}

V0_0_40_partition_info_cpus::~V0_0_40_partition_info_cpus()
{
}

void V0_0_40_partition_info_cpus::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_partition_info_cpus::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Task_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("task_binding"))] = ModelBase::toJson(m_Task_binding);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }

    return val;
}

bool V0_0_40_partition_info_cpus::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("task_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("task_binding")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTaskBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTaskBinding);
            setTaskBinding(refVal_setTaskBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    return ok;
}

void V0_0_40_partition_info_cpus::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Task_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("task_binding")), m_Task_binding));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
}

bool V0_0_40_partition_info_cpus::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("task_binding"))))
    {
        int32_t refVal_setTaskBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("task_binding"))), refVal_setTaskBinding );
        setTaskBinding(refVal_setTaskBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        int32_t refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    return ok;
}

int32_t V0_0_40_partition_info_cpus::getTaskBinding() const
{
    return m_Task_binding;
}

void V0_0_40_partition_info_cpus::setTaskBinding(int32_t value)
{
    m_Task_binding = value;
    m_Task_bindingIsSet = true;
}

bool V0_0_40_partition_info_cpus::taskBindingIsSet() const
{
    return m_Task_bindingIsSet;
}

void V0_0_40_partition_info_cpus::unsetTask_binding()
{
    m_Task_bindingIsSet = false;
}
int32_t V0_0_40_partition_info_cpus::getTotal() const
{
    return m_Total;
}

void V0_0_40_partition_info_cpus::setTotal(int32_t value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool V0_0_40_partition_info_cpus::totalIsSet() const
{
    return m_TotalIsSet;
}

void V0_0_40_partition_info_cpus::unsetTotal()
{
    m_TotalIsSet = false;
}
}
}
}
}


