/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_job_info_resp_jobs_inner_job_resources.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::V0_0_41_openapi_job_info_resp_jobs_inner_job_resources()
{
    m_Select_typeIsSet = false;
    m_NodesIsSet = false;
    m_Cpus = 0;
    m_CpusIsSet = false;
    m_Threads_per_coreIsSet = false;
}

V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::~V0_0_41_openapi_job_info_resp_jobs_inner_job_resources()
{
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Select_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("select_type"))] = ModelBase::toJson(m_Select_type);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_CpusIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus"))] = ModelBase::toJson(m_Cpus);
    }
    if(m_Threads_per_coreIsSet)
    {
        val[utility::conversions::to_string_t(U("threads_per_core"))] = ModelBase::toJson(m_Threads_per_core);
    }

    return val;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("select_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("select_type")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setSelectType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSelectType);
            setSelectType(refVal_setSelectType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes> refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpus);
            setCpus(refVal_setCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threads_per_core")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_threads_per_core> refVal_setThreadsPerCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreadsPerCore);
            setThreadsPerCore(refVal_setThreadsPerCore);
        }
    }
    return ok;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Select_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("select_type")), m_Select_type));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_CpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus")), m_Cpus));
    }
    if(m_Threads_per_coreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threads_per_core")), m_Threads_per_core));
    }
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("select_type"))))
    {
        std::vector<utility::string_t> refVal_setSelectType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("select_type"))), refVal_setSelectType );
        setSelectType(refVal_setSelectType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes> refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus"))))
    {
        int32_t refVal_setCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus"))), refVal_setCpus );
        setCpus(refVal_setCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threads_per_core"))))
    {
        std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_threads_per_core> refVal_setThreadsPerCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threads_per_core"))), refVal_setThreadsPerCore );
        setThreadsPerCore(refVal_setThreadsPerCore);
    }
    return ok;
}

std::vector<utility::string_t>& V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getSelectType()
{
    return m_Select_type;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setSelectType(const std::vector<utility::string_t>& value)
{
    m_Select_type = value;
    m_Select_typeIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::selectTypeIsSet() const
{
    return m_Select_typeIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::unsetSelect_type()
{
    m_Select_typeIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes> V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getNodes() const
{
    return m_Nodes;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setNodes(const std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes>& value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::nodesIsSet() const
{
    return m_NodesIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::unsetNodes()
{
    m_NodesIsSet = false;
}
int32_t V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getCpus() const
{
    return m_Cpus;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setCpus(int32_t value)
{
    m_Cpus = value;
    m_CpusIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::cpusIsSet() const
{
    return m_CpusIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::unsetCpus()
{
    m_CpusIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_threads_per_core> V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::getThreadsPerCore() const
{
    return m_Threads_per_core;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::setThreadsPerCore(const std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_threads_per_core>& value)
{
    m_Threads_per_core = value;
    m_Threads_per_coreIsSet = true;
}

bool V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::threadsPerCoreIsSet() const
{
    return m_Threads_per_coreIsSet;
}

void V0_0_41_openapi_job_info_resp_jobs_inner_job_resources::unsetThreads_per_core()
{
    m_Threads_per_coreIsSet = false;
}
}
}
}
}


