/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_37_association_max_tres_group.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_37_association_max_tres_group::Dbv0_0_37_association_max_tres_group()
{
    m_MinutesIsSet = false;
    m_ActiveIsSet = false;
}

Dbv0_0_37_association_max_tres_group::~Dbv0_0_37_association_max_tres_group()
{
}

void Dbv0_0_37_association_max_tres_group::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_37_association_max_tres_group::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MinutesIsSet)
    {
        val[utility::conversions::to_string_t(U("minutes"))] = ModelBase::toJson(m_Minutes);
    }
    if(m_ActiveIsSet)
    {
        val[utility::conversions::to_string_t(U("active"))] = ModelBase::toJson(m_Active);
    }

    return val;
}

bool Dbv0_0_37_association_max_tres_group::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("minutes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("minutes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>> refVal_setMinutes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMinutes);
            setMinutes(refVal_setMinutes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>> refVal_setActive;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActive);
            setActive(refVal_setActive);
        }
    }
    return ok;
}

void Dbv0_0_37_association_max_tres_group::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MinutesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("minutes")), m_Minutes));
    }
    if(m_ActiveIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active")), m_Active));
    }
}

bool Dbv0_0_37_association_max_tres_group::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("minutes"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>> refVal_setMinutes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("minutes"))), refVal_setMinutes );
        setMinutes(refVal_setMinutes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>> refVal_setActive;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active"))), refVal_setActive );
        setActive(refVal_setActive);
    }
    return ok;
}

std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>>& Dbv0_0_37_association_max_tres_group::getMinutes()
{
    return m_Minutes;
}

void Dbv0_0_37_association_max_tres_group::setMinutes(const std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>>& value)
{
    m_Minutes = value;
    m_MinutesIsSet = true;
}

bool Dbv0_0_37_association_max_tres_group::minutesIsSet() const
{
    return m_MinutesIsSet;
}

void Dbv0_0_37_association_max_tres_group::unsetMinutes()
{
    m_MinutesIsSet = false;
}
std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>>& Dbv0_0_37_association_max_tres_group::getActive()
{
    return m_Active;
}

void Dbv0_0_37_association_max_tres_group::setActive(const std::vector<std::shared_ptr<Dbv0_0_37_tres_list_inner>>& value)
{
    m_Active = value;
    m_ActiveIsSet = true;
}

bool Dbv0_0_37_association_max_tres_group::activeIsSet() const
{
    return m_ActiveIsSet;
}

void Dbv0_0_37_association_max_tres_group::unsetActive()
{
    m_ActiveIsSet = false;
}
}
}
}
}


