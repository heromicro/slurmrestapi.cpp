/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_39_meta_Slurm.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_39_meta_Slurm::Dbv0_0_39_meta_Slurm()
{
    m_VersionIsSet = false;
    m_Release = utility::conversions::to_string_t("");
    m_ReleaseIsSet = false;
}

Dbv0_0_39_meta_Slurm::~Dbv0_0_39_meta_Slurm()
{
}

void Dbv0_0_39_meta_Slurm::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_39_meta_Slurm::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_ReleaseIsSet)
    {
        val[utility::conversions::to_string_t(U("release"))] = ModelBase::toJson(m_Release);
    }

    return val;
}

bool Dbv0_0_39_meta_Slurm::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_39_meta_Slurm_version> refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("release"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("release")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRelease;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRelease);
            setRelease(refVal_setRelease);
        }
    }
    return ok;
}

void Dbv0_0_39_meta_Slurm::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_ReleaseIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("release")), m_Release));
    }
}

bool Dbv0_0_39_meta_Slurm::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        std::shared_ptr<Dbv0_0_39_meta_Slurm_version> refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("release"))))
    {
        utility::string_t refVal_setRelease;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("release"))), refVal_setRelease );
        setRelease(refVal_setRelease);
    }
    return ok;
}

std::shared_ptr<Dbv0_0_39_meta_Slurm_version> Dbv0_0_39_meta_Slurm::getVersion() const
{
    return m_Version;
}

void Dbv0_0_39_meta_Slurm::setVersion(const std::shared_ptr<Dbv0_0_39_meta_Slurm_version>& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Dbv0_0_39_meta_Slurm::versionIsSet() const
{
    return m_VersionIsSet;
}

void Dbv0_0_39_meta_Slurm::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t Dbv0_0_39_meta_Slurm::getRelease() const
{
    return m_Release;
}

void Dbv0_0_39_meta_Slurm::setRelease(const utility::string_t& value)
{
    m_Release = value;
    m_ReleaseIsSet = true;
}

bool Dbv0_0_39_meta_Slurm::releaseIsSet() const
{
    return m_ReleaseIsSet;
}

void Dbv0_0_39_meta_Slurm::unsetRelease()
{
    m_ReleaseIsSet = false;
}
}
}
}
}


