/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_users_add_cond.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_40_users_add_cond::V0_0_40_users_add_cond()
{
    m_AccountsIsSet = false;
    m_AssociationIsSet = false;
    m_ClustersIsSet = false;
    m_PartitionsIsSet = false;
    m_UsersIsSet = false;
    m_WckeysIsSet = false;
}

V0_0_40_users_add_cond::~V0_0_40_users_add_cond()
{
}

void V0_0_40_users_add_cond::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_users_add_cond::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountsIsSet)
    {
        val[utility::conversions::to_string_t(U("accounts"))] = ModelBase::toJson(m_Accounts);
    }
    if(m_AssociationIsSet)
    {
        val[utility::conversions::to_string_t(U("association"))] = ModelBase::toJson(m_Association);
    }
    if(m_ClustersIsSet)
    {
        val[utility::conversions::to_string_t(U("clusters"))] = ModelBase::toJson(m_Clusters);
    }
    if(m_PartitionsIsSet)
    {
        val[utility::conversions::to_string_t(U("partitions"))] = ModelBase::toJson(m_Partitions);
    }
    if(m_UsersIsSet)
    {
        val[utility::conversions::to_string_t(U("users"))] = ModelBase::toJson(m_Users);
    }
    if(m_WckeysIsSet)
    {
        val[utility::conversions::to_string_t(U("wckeys"))] = ModelBase::toJson(m_Wckeys);
    }

    return val;
}

bool V0_0_40_users_add_cond::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("accounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accounts")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setAccounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccounts);
            setAccounts(refVal_setAccounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("association"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("association")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_assoc_rec_set> refVal_setAssociation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociation);
            setAssociation(refVal_setAssociation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("clusters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("clusters")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setClusters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusters);
            setClusters(refVal_setClusters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partitions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partitions")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPartitions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartitions);
            setPartitions(refVal_setPartitions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("users"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("users")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setUsers;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsers);
            setUsers(refVal_setUsers);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckeys"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckeys")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setWckeys;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckeys);
            setWckeys(refVal_setWckeys);
        }
    }
    return ok;
}

void V0_0_40_users_add_cond::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accounts")), m_Accounts));
    }
    if(m_AssociationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("association")), m_Association));
    }
    if(m_ClustersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("clusters")), m_Clusters));
    }
    if(m_PartitionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partitions")), m_Partitions));
    }
    if(m_UsersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("users")), m_Users));
    }
    if(m_WckeysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckeys")), m_Wckeys));
    }
}

bool V0_0_40_users_add_cond::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("accounts"))))
    {
        std::vector<utility::string_t> refVal_setAccounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accounts"))), refVal_setAccounts );
        setAccounts(refVal_setAccounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("association"))))
    {
        std::shared_ptr<V0_0_40_assoc_rec_set> refVal_setAssociation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("association"))), refVal_setAssociation );
        setAssociation(refVal_setAssociation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("clusters"))))
    {
        std::vector<utility::string_t> refVal_setClusters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("clusters"))), refVal_setClusters );
        setClusters(refVal_setClusters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partitions"))))
    {
        std::vector<utility::string_t> refVal_setPartitions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partitions"))), refVal_setPartitions );
        setPartitions(refVal_setPartitions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("users"))))
    {
        std::vector<utility::string_t> refVal_setUsers;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("users"))), refVal_setUsers );
        setUsers(refVal_setUsers);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckeys"))))
    {
        std::vector<utility::string_t> refVal_setWckeys;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckeys"))), refVal_setWckeys );
        setWckeys(refVal_setWckeys);
    }
    return ok;
}

std::vector<utility::string_t>& V0_0_40_users_add_cond::getAccounts()
{
    return m_Accounts;
}

void V0_0_40_users_add_cond::setAccounts(const std::vector<utility::string_t>& value)
{
    m_Accounts = value;
    m_AccountsIsSet = true;
}

bool V0_0_40_users_add_cond::accountsIsSet() const
{
    return m_AccountsIsSet;
}

void V0_0_40_users_add_cond::unsetAccounts()
{
    m_AccountsIsSet = false;
}
std::shared_ptr<V0_0_40_assoc_rec_set> V0_0_40_users_add_cond::getAssociation() const
{
    return m_Association;
}

void V0_0_40_users_add_cond::setAssociation(const std::shared_ptr<V0_0_40_assoc_rec_set>& value)
{
    m_Association = value;
    m_AssociationIsSet = true;
}

bool V0_0_40_users_add_cond::associationIsSet() const
{
    return m_AssociationIsSet;
}

void V0_0_40_users_add_cond::unsetAssociation()
{
    m_AssociationIsSet = false;
}
std::vector<utility::string_t>& V0_0_40_users_add_cond::getClusters()
{
    return m_Clusters;
}

void V0_0_40_users_add_cond::setClusters(const std::vector<utility::string_t>& value)
{
    m_Clusters = value;
    m_ClustersIsSet = true;
}

bool V0_0_40_users_add_cond::clustersIsSet() const
{
    return m_ClustersIsSet;
}

void V0_0_40_users_add_cond::unsetClusters()
{
    m_ClustersIsSet = false;
}
std::vector<utility::string_t>& V0_0_40_users_add_cond::getPartitions()
{
    return m_Partitions;
}

void V0_0_40_users_add_cond::setPartitions(const std::vector<utility::string_t>& value)
{
    m_Partitions = value;
    m_PartitionsIsSet = true;
}

bool V0_0_40_users_add_cond::partitionsIsSet() const
{
    return m_PartitionsIsSet;
}

void V0_0_40_users_add_cond::unsetPartitions()
{
    m_PartitionsIsSet = false;
}
std::vector<utility::string_t>& V0_0_40_users_add_cond::getUsers()
{
    return m_Users;
}

void V0_0_40_users_add_cond::setUsers(const std::vector<utility::string_t>& value)
{
    m_Users = value;
    m_UsersIsSet = true;
}

bool V0_0_40_users_add_cond::usersIsSet() const
{
    return m_UsersIsSet;
}

void V0_0_40_users_add_cond::unsetUsers()
{
    m_UsersIsSet = false;
}
std::vector<utility::string_t>& V0_0_40_users_add_cond::getWckeys()
{
    return m_Wckeys;
}

void V0_0_40_users_add_cond::setWckeys(const std::vector<utility::string_t>& value)
{
    m_Wckeys = value;
    m_WckeysIsSet = true;
}

bool V0_0_40_users_add_cond::wckeysIsSet() const
{
    return m_WckeysIsSet;
}

void V0_0_40_users_add_cond::unsetWckeys()
{
    m_WckeysIsSet = false;
}
}
}
}
}


