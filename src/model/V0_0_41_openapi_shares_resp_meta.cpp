/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_shares_resp_meta.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_shares_resp_meta::V0_0_41_openapi_shares_resp_meta()
{
    m_PluginIsSet = false;
    m_ClientIsSet = false;
    m_CommandIsSet = false;
    m_SlurmIsSet = false;
}

V0_0_41_openapi_shares_resp_meta::~V0_0_41_openapi_shares_resp_meta()
{
}

void V0_0_41_openapi_shares_resp_meta::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_shares_resp_meta::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PluginIsSet)
    {
        val[utility::conversions::to_string_t(U("plugin"))] = ModelBase::toJson(m_Plugin);
    }
    if(m_ClientIsSet)
    {
        val[utility::conversions::to_string_t(U("client"))] = ModelBase::toJson(m_Client);
    }
    if(m_CommandIsSet)
    {
        val[utility::conversions::to_string_t(U("command"))] = ModelBase::toJson(m_Command);
    }
    if(m_SlurmIsSet)
    {
        val[utility::conversions::to_string_t(U("slurm"))] = ModelBase::toJson(m_Slurm);
    }

    return val;
}

bool V0_0_41_openapi_shares_resp_meta::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("plugin"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("plugin")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_openapi_meta_plugin> refVal_setPlugin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPlugin);
            setPlugin(refVal_setPlugin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("client"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("client")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_openapi_meta_client> refVal_setClient;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClient);
            setClient(refVal_setClient);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("command"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("command")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setCommand;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCommand);
            setCommand(refVal_setCommand);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slurm"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slurm")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_openapi_meta_slurm> refVal_setSlurm;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlurm);
            setSlurm(refVal_setSlurm);
        }
    }
    return ok;
}

void V0_0_41_openapi_shares_resp_meta::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PluginIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("plugin")), m_Plugin));
    }
    if(m_ClientIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("client")), m_Client));
    }
    if(m_CommandIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("command")), m_Command));
    }
    if(m_SlurmIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slurm")), m_Slurm));
    }
}

bool V0_0_41_openapi_shares_resp_meta::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("plugin"))))
    {
        std::shared_ptr<V0_0_40_openapi_meta_plugin> refVal_setPlugin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("plugin"))), refVal_setPlugin );
        setPlugin(refVal_setPlugin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("client"))))
    {
        std::shared_ptr<V0_0_40_openapi_meta_client> refVal_setClient;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("client"))), refVal_setClient );
        setClient(refVal_setClient);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("command"))))
    {
        std::vector<utility::string_t> refVal_setCommand;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("command"))), refVal_setCommand );
        setCommand(refVal_setCommand);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slurm"))))
    {
        std::shared_ptr<V0_0_40_openapi_meta_slurm> refVal_setSlurm;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slurm"))), refVal_setSlurm );
        setSlurm(refVal_setSlurm);
    }
    return ok;
}

std::shared_ptr<V0_0_40_openapi_meta_plugin> V0_0_41_openapi_shares_resp_meta::getPlugin() const
{
    return m_Plugin;
}

void V0_0_41_openapi_shares_resp_meta::setPlugin(const std::shared_ptr<V0_0_40_openapi_meta_plugin>& value)
{
    m_Plugin = value;
    m_PluginIsSet = true;
}

bool V0_0_41_openapi_shares_resp_meta::pluginIsSet() const
{
    return m_PluginIsSet;
}

void V0_0_41_openapi_shares_resp_meta::unsetPlugin()
{
    m_PluginIsSet = false;
}
std::shared_ptr<V0_0_40_openapi_meta_client> V0_0_41_openapi_shares_resp_meta::getClient() const
{
    return m_Client;
}

void V0_0_41_openapi_shares_resp_meta::setClient(const std::shared_ptr<V0_0_40_openapi_meta_client>& value)
{
    m_Client = value;
    m_ClientIsSet = true;
}

bool V0_0_41_openapi_shares_resp_meta::clientIsSet() const
{
    return m_ClientIsSet;
}

void V0_0_41_openapi_shares_resp_meta::unsetClient()
{
    m_ClientIsSet = false;
}
std::vector<utility::string_t>& V0_0_41_openapi_shares_resp_meta::getCommand()
{
    return m_Command;
}

void V0_0_41_openapi_shares_resp_meta::setCommand(const std::vector<utility::string_t>& value)
{
    m_Command = value;
    m_CommandIsSet = true;
}

bool V0_0_41_openapi_shares_resp_meta::commandIsSet() const
{
    return m_CommandIsSet;
}

void V0_0_41_openapi_shares_resp_meta::unsetCommand()
{
    m_CommandIsSet = false;
}
std::shared_ptr<V0_0_40_openapi_meta_slurm> V0_0_41_openapi_shares_resp_meta::getSlurm() const
{
    return m_Slurm;
}

void V0_0_41_openapi_shares_resp_meta::setSlurm(const std::shared_ptr<V0_0_40_openapi_meta_slurm>& value)
{
    m_Slurm = value;
    m_SlurmIsSet = true;
}

bool V0_0_41_openapi_shares_resp_meta::slurmIsSet() const
{
    return m_SlurmIsSet;
}

void V0_0_41_openapi_shares_resp_meta::unsetSlurm()
{
    m_SlurmIsSet = false;
}
}
}
}
}


