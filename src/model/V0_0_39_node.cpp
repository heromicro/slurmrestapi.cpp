/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_node.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_39_node::V0_0_39_node()
{
    m_Architecture = utility::conversions::to_string_t("");
    m_ArchitectureIsSet = false;
    m_Burstbuffer_network_address = utility::conversions::to_string_t("");
    m_Burstbuffer_network_addressIsSet = false;
    m_Boards = 0;
    m_BoardsIsSet = false;
    m_Boot_time = 0L;
    m_Boot_timeIsSet = false;
    m_Cluster_name = utility::conversions::to_string_t("");
    m_Cluster_nameIsSet = false;
    m_Cores = 0;
    m_CoresIsSet = false;
    m_Specialized_cores = 0;
    m_Specialized_coresIsSet = false;
    m_Cpu_binding = 0;
    m_Cpu_bindingIsSet = false;
    m_Cpu_loadIsSet = false;
    m_Free_memIsSet = false;
    m_Cpus = 0;
    m_CpusIsSet = false;
    m_Effective_cpus = 0;
    m_Effective_cpusIsSet = false;
    m_Specialized_cpus = utility::conversions::to_string_t("");
    m_Specialized_cpusIsSet = false;
    m_EnergyIsSet = false;
    m_External_sensorsIsSet = false;
    m_Extra = utility::conversions::to_string_t("");
    m_ExtraIsSet = false;
    m_PowerIsSet = false;
    m_FeaturesIsSet = false;
    m_Active_featuresIsSet = false;
    m_Gres = utility::conversions::to_string_t("");
    m_GresIsSet = false;
    m_Gres_drained = utility::conversions::to_string_t("");
    m_Gres_drainedIsSet = false;
    m_Gres_used = utility::conversions::to_string_t("");
    m_Gres_usedIsSet = false;
    m_Last_busy = 0L;
    m_Last_busyIsSet = false;
    m_Mcs_label = utility::conversions::to_string_t("");
    m_Mcs_labelIsSet = false;
    m_Specialized_memory = 0L;
    m_Specialized_memoryIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Next_state_after_rebootIsSet = false;
    m_Address = utility::conversions::to_string_t("");
    m_AddressIsSet = false;
    m_Hostname = utility::conversions::to_string_t("");
    m_HostnameIsSet = false;
    m_StateIsSet = false;
    m_Operating_system = utility::conversions::to_string_t("");
    m_Operating_systemIsSet = false;
    m_Owner = utility::conversions::to_string_t("");
    m_OwnerIsSet = false;
    m_PartitionsIsSet = false;
    m_Port = 0;
    m_PortIsSet = false;
    m_Real_memory = 0L;
    m_Real_memoryIsSet = false;
    m_Comment = utility::conversions::to_string_t("");
    m_CommentIsSet = false;
    m_Reason = utility::conversions::to_string_t("");
    m_ReasonIsSet = false;
    m_Reason_changed_at = 0L;
    m_Reason_changed_atIsSet = false;
    m_Reason_set_by_user = utility::conversions::to_string_t("");
    m_Reason_set_by_userIsSet = false;
    m_Resume_afterIsSet = false;
    m_Reservation = utility::conversions::to_string_t("");
    m_ReservationIsSet = false;
    m_Alloc_memory = 0L;
    m_Alloc_memoryIsSet = false;
    m_Alloc_cpus = 0;
    m_Alloc_cpusIsSet = false;
    m_Alloc_idle_cpus = 0;
    m_Alloc_idle_cpusIsSet = false;
    m_Tres_used = utility::conversions::to_string_t("");
    m_Tres_usedIsSet = false;
    m_Tres_weighted = 0.0;
    m_Tres_weightedIsSet = false;
    m_Slurmd_start_time = 0L;
    m_Slurmd_start_timeIsSet = false;
    m_Sockets = 0;
    m_SocketsIsSet = false;
    m_Threads = 0;
    m_ThreadsIsSet = false;
    m_Temporary_disk = 0;
    m_Temporary_diskIsSet = false;
    m_Weight = 0;
    m_WeightIsSet = false;
    m_Tres = utility::conversions::to_string_t("");
    m_TresIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
}

V0_0_39_node::~V0_0_39_node()
{
}

void V0_0_39_node::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_node::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ArchitectureIsSet)
    {
        val[utility::conversions::to_string_t(U("architecture"))] = ModelBase::toJson(m_Architecture);
    }
    if(m_Burstbuffer_network_addressIsSet)
    {
        val[utility::conversions::to_string_t(U("burstbuffer_network_address"))] = ModelBase::toJson(m_Burstbuffer_network_address);
    }
    if(m_BoardsIsSet)
    {
        val[utility::conversions::to_string_t(U("boards"))] = ModelBase::toJson(m_Boards);
    }
    if(m_Boot_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("boot_time"))] = ModelBase::toJson(m_Boot_time);
    }
    if(m_Cluster_nameIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster_name"))] = ModelBase::toJson(m_Cluster_name);
    }
    if(m_CoresIsSet)
    {
        val[utility::conversions::to_string_t(U("cores"))] = ModelBase::toJson(m_Cores);
    }
    if(m_Specialized_coresIsSet)
    {
        val[utility::conversions::to_string_t(U("specialized_cores"))] = ModelBase::toJson(m_Specialized_cores);
    }
    if(m_Cpu_bindingIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_binding"))] = ModelBase::toJson(m_Cpu_binding);
    }
    if(m_Cpu_loadIsSet)
    {
        val[utility::conversions::to_string_t(U("cpu_load"))] = ModelBase::toJson(m_Cpu_load);
    }
    if(m_Free_memIsSet)
    {
        val[utility::conversions::to_string_t(U("free_mem"))] = ModelBase::toJson(m_Free_mem);
    }
    if(m_CpusIsSet)
    {
        val[utility::conversions::to_string_t(U("cpus"))] = ModelBase::toJson(m_Cpus);
    }
    if(m_Effective_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("effective_cpus"))] = ModelBase::toJson(m_Effective_cpus);
    }
    if(m_Specialized_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("specialized_cpus"))] = ModelBase::toJson(m_Specialized_cpus);
    }
    if(m_EnergyIsSet)
    {
        val[utility::conversions::to_string_t(U("energy"))] = ModelBase::toJson(m_Energy);
    }
    if(m_External_sensorsIsSet)
    {
        val[utility::conversions::to_string_t(U("external_sensors"))] = ModelBase::toJson(m_External_sensors);
    }
    if(m_ExtraIsSet)
    {
        val[utility::conversions::to_string_t(U("extra"))] = ModelBase::toJson(m_Extra);
    }
    if(m_PowerIsSet)
    {
        val[utility::conversions::to_string_t(U("power"))] = ModelBase::toJson(m_Power);
    }
    if(m_FeaturesIsSet)
    {
        val[utility::conversions::to_string_t(U("features"))] = ModelBase::toJson(m_Features);
    }
    if(m_Active_featuresIsSet)
    {
        val[utility::conversions::to_string_t(U("active_features"))] = ModelBase::toJson(m_Active_features);
    }
    if(m_GresIsSet)
    {
        val[utility::conversions::to_string_t(U("gres"))] = ModelBase::toJson(m_Gres);
    }
    if(m_Gres_drainedIsSet)
    {
        val[utility::conversions::to_string_t(U("gres_drained"))] = ModelBase::toJson(m_Gres_drained);
    }
    if(m_Gres_usedIsSet)
    {
        val[utility::conversions::to_string_t(U("gres_used"))] = ModelBase::toJson(m_Gres_used);
    }
    if(m_Last_busyIsSet)
    {
        val[utility::conversions::to_string_t(U("last_busy"))] = ModelBase::toJson(m_Last_busy);
    }
    if(m_Mcs_labelIsSet)
    {
        val[utility::conversions::to_string_t(U("mcs_label"))] = ModelBase::toJson(m_Mcs_label);
    }
    if(m_Specialized_memoryIsSet)
    {
        val[utility::conversions::to_string_t(U("specialized_memory"))] = ModelBase::toJson(m_Specialized_memory);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_Next_state_after_rebootIsSet)
    {
        val[utility::conversions::to_string_t(U("next_state_after_reboot"))] = ModelBase::toJson(m_Next_state_after_reboot);
    }
    if(m_AddressIsSet)
    {
        val[utility::conversions::to_string_t(U("address"))] = ModelBase::toJson(m_Address);
    }
    if(m_HostnameIsSet)
    {
        val[utility::conversions::to_string_t(U("hostname"))] = ModelBase::toJson(m_Hostname);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }
    if(m_Operating_systemIsSet)
    {
        val[utility::conversions::to_string_t(U("operating_system"))] = ModelBase::toJson(m_Operating_system);
    }
    if(m_OwnerIsSet)
    {
        val[utility::conversions::to_string_t(U("owner"))] = ModelBase::toJson(m_Owner);
    }
    if(m_PartitionsIsSet)
    {
        val[utility::conversions::to_string_t(U("partitions"))] = ModelBase::toJson(m_Partitions);
    }
    if(m_PortIsSet)
    {
        val[utility::conversions::to_string_t(U("port"))] = ModelBase::toJson(m_Port);
    }
    if(m_Real_memoryIsSet)
    {
        val[utility::conversions::to_string_t(U("real_memory"))] = ModelBase::toJson(m_Real_memory);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_ReasonIsSet)
    {
        val[utility::conversions::to_string_t(U("reason"))] = ModelBase::toJson(m_Reason);
    }
    if(m_Reason_changed_atIsSet)
    {
        val[utility::conversions::to_string_t(U("reason_changed_at"))] = ModelBase::toJson(m_Reason_changed_at);
    }
    if(m_Reason_set_by_userIsSet)
    {
        val[utility::conversions::to_string_t(U("reason_set_by_user"))] = ModelBase::toJson(m_Reason_set_by_user);
    }
    if(m_Resume_afterIsSet)
    {
        val[utility::conversions::to_string_t(U("resume_after"))] = ModelBase::toJson(m_Resume_after);
    }
    if(m_ReservationIsSet)
    {
        val[utility::conversions::to_string_t(U("reservation"))] = ModelBase::toJson(m_Reservation);
    }
    if(m_Alloc_memoryIsSet)
    {
        val[utility::conversions::to_string_t(U("alloc_memory"))] = ModelBase::toJson(m_Alloc_memory);
    }
    if(m_Alloc_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("alloc_cpus"))] = ModelBase::toJson(m_Alloc_cpus);
    }
    if(m_Alloc_idle_cpusIsSet)
    {
        val[utility::conversions::to_string_t(U("alloc_idle_cpus"))] = ModelBase::toJson(m_Alloc_idle_cpus);
    }
    if(m_Tres_usedIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_used"))] = ModelBase::toJson(m_Tres_used);
    }
    if(m_Tres_weightedIsSet)
    {
        val[utility::conversions::to_string_t(U("tres_weighted"))] = ModelBase::toJson(m_Tres_weighted);
    }
    if(m_Slurmd_start_timeIsSet)
    {
        val[utility::conversions::to_string_t(U("slurmd_start_time"))] = ModelBase::toJson(m_Slurmd_start_time);
    }
    if(m_SocketsIsSet)
    {
        val[utility::conversions::to_string_t(U("sockets"))] = ModelBase::toJson(m_Sockets);
    }
    if(m_ThreadsIsSet)
    {
        val[utility::conversions::to_string_t(U("threads"))] = ModelBase::toJson(m_Threads);
    }
    if(m_Temporary_diskIsSet)
    {
        val[utility::conversions::to_string_t(U("temporary_disk"))] = ModelBase::toJson(m_Temporary_disk);
    }
    if(m_WeightIsSet)
    {
        val[utility::conversions::to_string_t(U("weight"))] = ModelBase::toJson(m_Weight);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }

    return val;
}

bool V0_0_39_node::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("architecture"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("architecture")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setArchitecture;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArchitecture);
            setArchitecture(refVal_setArchitecture);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("burstbuffer_network_address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("burstbuffer_network_address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setBurstbufferNetworkAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBurstbufferNetworkAddress);
            setBurstbufferNetworkAddress(refVal_setBurstbufferNetworkAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boards"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boards")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setBoards;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBoards);
            setBoards(refVal_setBoards);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("boot_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("boot_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setBootTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setBootTime);
            setBootTime(refVal_setBootTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster_name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster_name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setClusterName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setClusterName);
            setClusterName(refVal_setClusterName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cores"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cores")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCores;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCores);
            setCores(refVal_setCores);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("specialized_cores"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("specialized_cores")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSpecializedCores;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpecializedCores);
            setSpecializedCores(refVal_setSpecializedCores);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_binding"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_binding")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCpuBinding;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuBinding);
            setCpuBinding(refVal_setCpuBinding);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpu_load"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpu_load")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuLoad;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpuLoad);
            setCpuLoad(refVal_setCpuLoad);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("free_mem"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("free_mem")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setFreeMem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFreeMem);
            setFreeMem(refVal_setFreeMem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCpus);
            setCpus(refVal_setCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("effective_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("effective_cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setEffectiveCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEffectiveCpus);
            setEffectiveCpus(refVal_setEffectiveCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("specialized_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("specialized_cpus")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSpecializedCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpecializedCpus);
            setSpecializedCpus(refVal_setSpecializedCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("energy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("energy")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_acct_gather_energy> refVal_setEnergy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEnergy);
            setEnergy(refVal_setEnergy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("external_sensors"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("external_sensors")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setExternalSensors;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExternalSensors);
            setExternalSensors(refVal_setExternalSensors);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("extra"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("extra")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExtra;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExtra);
            setExtra(refVal_setExtra);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("power"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("power")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Object> refVal_setPower;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPower);
            setPower(refVal_setPower);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("features")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFeatures);
            setFeatures(refVal_setFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("active_features"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("active_features")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setActiveFeatures;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActiveFeatures);
            setActiveFeatures(refVal_setActiveFeatures);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGres);
            setGres(refVal_setGres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gres_drained"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gres_drained")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGresDrained;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGresDrained);
            setGresDrained(refVal_setGresDrained);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("gres_used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("gres_used")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGresUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGresUsed);
            setGresUsed(refVal_setGresUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_busy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_busy")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLastBusy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastBusy);
            setLastBusy(refVal_setLastBusy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcs_label"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcs_label")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setMcsLabel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcsLabel);
            setMcsLabel(refVal_setMcsLabel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("specialized_memory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("specialized_memory")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSpecializedMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSpecializedMemory);
            setSpecializedMemory(refVal_setSpecializedMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("next_state_after_reboot"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("next_state_after_reboot")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setNextStateAfterReboot;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNextStateAfterReboot);
            setNextStateAfterReboot(refVal_setNextStateAfterReboot);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("address"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("address")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAddress;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAddress);
            setAddress(refVal_setAddress);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("hostname"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hostname")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHostname;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHostname);
            setHostname(refVal_setHostname);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("operating_system"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("operating_system")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOperatingSystem;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOperatingSystem);
            setOperatingSystem(refVal_setOperatingSystem);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("owner"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("owner")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOwner;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOwner);
            setOwner(refVal_setOwner);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partitions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partitions")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setPartitions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartitions);
            setPartitions(refVal_setPartitions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("port"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("port")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPort;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPort);
            setPort(refVal_setPort);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("real_memory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("real_memory")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setRealMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRealMemory);
            setRealMemory(refVal_setRealMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reason"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reason")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReason;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReason);
            setReason(refVal_setReason);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reason_changed_at"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reason_changed_at")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setReasonChangedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReasonChangedAt);
            setReasonChangedAt(refVal_setReasonChangedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reason_set_by_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reason_set_by_user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReasonSetByUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReasonSetByUser);
            setReasonSetByUser(refVal_setReasonSetByUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resume_after"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resume_after")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_39_uint64_no_val> refVal_setResumeAfter;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResumeAfter);
            setResumeAfter(refVal_setResumeAfter);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reservation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reservation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setReservation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReservation);
            setReservation(refVal_setReservation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alloc_memory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alloc_memory")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setAllocMemory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocMemory);
            setAllocMemory(refVal_setAllocMemory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alloc_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alloc_cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAllocCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocCpus);
            setAllocCpus(refVal_setAllocCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("alloc_idle_cpus"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("alloc_idle_cpus")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAllocIdleCpus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocIdleCpus);
            setAllocIdleCpus(refVal_setAllocIdleCpus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_used")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTresUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresUsed);
            setTresUsed(refVal_setTresUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres_weighted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres_weighted")));
        if(!fieldValue.is_null())
        {
            double refVal_setTresWeighted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTresWeighted);
            setTresWeighted(refVal_setTresWeighted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slurmd_start_time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slurmd_start_time")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setSlurmdStartTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlurmdStartTime);
            setSlurmdStartTime(refVal_setSlurmdStartTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sockets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sockets")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSockets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSockets);
            setSockets(refVal_setSockets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("threads"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("threads")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setThreads;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThreads);
            setThreads(refVal_setThreads);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("temporary_disk"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("temporary_disk")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTemporaryDisk;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTemporaryDisk);
            setTemporaryDisk(refVal_setTemporaryDisk);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("weight"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("weight")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWeight;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWeight);
            setWeight(refVal_setWeight);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    return ok;
}

void V0_0_39_node::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ArchitectureIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("architecture")), m_Architecture));
    }
    if(m_Burstbuffer_network_addressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("burstbuffer_network_address")), m_Burstbuffer_network_address));
    }
    if(m_BoardsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boards")), m_Boards));
    }
    if(m_Boot_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("boot_time")), m_Boot_time));
    }
    if(m_Cluster_nameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster_name")), m_Cluster_name));
    }
    if(m_CoresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cores")), m_Cores));
    }
    if(m_Specialized_coresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("specialized_cores")), m_Specialized_cores));
    }
    if(m_Cpu_bindingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_binding")), m_Cpu_binding));
    }
    if(m_Cpu_loadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpu_load")), m_Cpu_load));
    }
    if(m_Free_memIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("free_mem")), m_Free_mem));
    }
    if(m_CpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cpus")), m_Cpus));
    }
    if(m_Effective_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("effective_cpus")), m_Effective_cpus));
    }
    if(m_Specialized_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("specialized_cpus")), m_Specialized_cpus));
    }
    if(m_EnergyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("energy")), m_Energy));
    }
    if(m_External_sensorsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("external_sensors")), m_External_sensors));
    }
    if(m_ExtraIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("extra")), m_Extra));
    }
    if(m_PowerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("power")), m_Power));
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("features")), m_Features));
    }
    if(m_Active_featuresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("active_features")), m_Active_features));
    }
    if(m_GresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gres")), m_Gres));
    }
    if(m_Gres_drainedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gres_drained")), m_Gres_drained));
    }
    if(m_Gres_usedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("gres_used")), m_Gres_used));
    }
    if(m_Last_busyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_busy")), m_Last_busy));
    }
    if(m_Mcs_labelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcs_label")), m_Mcs_label));
    }
    if(m_Specialized_memoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("specialized_memory")), m_Specialized_memory));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_Next_state_after_rebootIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("next_state_after_reboot")), m_Next_state_after_reboot));
    }
    if(m_AddressIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("address")), m_Address));
    }
    if(m_HostnameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hostname")), m_Hostname));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
    if(m_Operating_systemIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("operating_system")), m_Operating_system));
    }
    if(m_OwnerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("owner")), m_Owner));
    }
    if(m_PartitionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partitions")), m_Partitions));
    }
    if(m_PortIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("port")), m_Port));
    }
    if(m_Real_memoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("real_memory")), m_Real_memory));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_ReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reason")), m_Reason));
    }
    if(m_Reason_changed_atIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reason_changed_at")), m_Reason_changed_at));
    }
    if(m_Reason_set_by_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reason_set_by_user")), m_Reason_set_by_user));
    }
    if(m_Resume_afterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resume_after")), m_Resume_after));
    }
    if(m_ReservationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reservation")), m_Reservation));
    }
    if(m_Alloc_memoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alloc_memory")), m_Alloc_memory));
    }
    if(m_Alloc_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alloc_cpus")), m_Alloc_cpus));
    }
    if(m_Alloc_idle_cpusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("alloc_idle_cpus")), m_Alloc_idle_cpus));
    }
    if(m_Tres_usedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_used")), m_Tres_used));
    }
    if(m_Tres_weightedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres_weighted")), m_Tres_weighted));
    }
    if(m_Slurmd_start_timeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slurmd_start_time")), m_Slurmd_start_time));
    }
    if(m_SocketsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sockets")), m_Sockets));
    }
    if(m_ThreadsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("threads")), m_Threads));
    }
    if(m_Temporary_diskIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("temporary_disk")), m_Temporary_disk));
    }
    if(m_WeightIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("weight")), m_Weight));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
}

bool V0_0_39_node::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("architecture"))))
    {
        utility::string_t refVal_setArchitecture;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("architecture"))), refVal_setArchitecture );
        setArchitecture(refVal_setArchitecture);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("burstbuffer_network_address"))))
    {
        utility::string_t refVal_setBurstbufferNetworkAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("burstbuffer_network_address"))), refVal_setBurstbufferNetworkAddress );
        setBurstbufferNetworkAddress(refVal_setBurstbufferNetworkAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boards"))))
    {
        int32_t refVal_setBoards;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boards"))), refVal_setBoards );
        setBoards(refVal_setBoards);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("boot_time"))))
    {
        int64_t refVal_setBootTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("boot_time"))), refVal_setBootTime );
        setBootTime(refVal_setBootTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster_name"))))
    {
        utility::string_t refVal_setClusterName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster_name"))), refVal_setClusterName );
        setClusterName(refVal_setClusterName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cores"))))
    {
        int32_t refVal_setCores;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cores"))), refVal_setCores );
        setCores(refVal_setCores);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("specialized_cores"))))
    {
        int32_t refVal_setSpecializedCores;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("specialized_cores"))), refVal_setSpecializedCores );
        setSpecializedCores(refVal_setSpecializedCores);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_binding"))))
    {
        int32_t refVal_setCpuBinding;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_binding"))), refVal_setCpuBinding );
        setCpuBinding(refVal_setCpuBinding);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpu_load"))))
    {
        std::shared_ptr<V0_0_39_uint32_no_val> refVal_setCpuLoad;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpu_load"))), refVal_setCpuLoad );
        setCpuLoad(refVal_setCpuLoad);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("free_mem"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setFreeMem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("free_mem"))), refVal_setFreeMem );
        setFreeMem(refVal_setFreeMem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cpus"))))
    {
        int32_t refVal_setCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cpus"))), refVal_setCpus );
        setCpus(refVal_setCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("effective_cpus"))))
    {
        int32_t refVal_setEffectiveCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("effective_cpus"))), refVal_setEffectiveCpus );
        setEffectiveCpus(refVal_setEffectiveCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("specialized_cpus"))))
    {
        utility::string_t refVal_setSpecializedCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("specialized_cpus"))), refVal_setSpecializedCpus );
        setSpecializedCpus(refVal_setSpecializedCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("energy"))))
    {
        std::shared_ptr<V0_0_39_acct_gather_energy> refVal_setEnergy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("energy"))), refVal_setEnergy );
        setEnergy(refVal_setEnergy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("external_sensors"))))
    {
        std::shared_ptr<Object> refVal_setExternalSensors;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("external_sensors"))), refVal_setExternalSensors );
        setExternalSensors(refVal_setExternalSensors);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("extra"))))
    {
        utility::string_t refVal_setExtra;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("extra"))), refVal_setExtra );
        setExtra(refVal_setExtra);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("power"))))
    {
        std::shared_ptr<Object> refVal_setPower;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("power"))), refVal_setPower );
        setPower(refVal_setPower);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("features"))))
    {
        std::vector<utility::string_t> refVal_setFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("features"))), refVal_setFeatures );
        setFeatures(refVal_setFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("active_features"))))
    {
        std::vector<utility::string_t> refVal_setActiveFeatures;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("active_features"))), refVal_setActiveFeatures );
        setActiveFeatures(refVal_setActiveFeatures);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gres"))))
    {
        utility::string_t refVal_setGres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gres"))), refVal_setGres );
        setGres(refVal_setGres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gres_drained"))))
    {
        utility::string_t refVal_setGresDrained;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gres_drained"))), refVal_setGresDrained );
        setGresDrained(refVal_setGresDrained);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("gres_used"))))
    {
        utility::string_t refVal_setGresUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("gres_used"))), refVal_setGresUsed );
        setGresUsed(refVal_setGresUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_busy"))))
    {
        int64_t refVal_setLastBusy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_busy"))), refVal_setLastBusy );
        setLastBusy(refVal_setLastBusy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcs_label"))))
    {
        utility::string_t refVal_setMcsLabel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcs_label"))), refVal_setMcsLabel );
        setMcsLabel(refVal_setMcsLabel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("specialized_memory"))))
    {
        int64_t refVal_setSpecializedMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("specialized_memory"))), refVal_setSpecializedMemory );
        setSpecializedMemory(refVal_setSpecializedMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("next_state_after_reboot"))))
    {
        std::vector<utility::string_t> refVal_setNextStateAfterReboot;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("next_state_after_reboot"))), refVal_setNextStateAfterReboot );
        setNextStateAfterReboot(refVal_setNextStateAfterReboot);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("address"))))
    {
        utility::string_t refVal_setAddress;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("address"))), refVal_setAddress );
        setAddress(refVal_setAddress);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("hostname"))))
    {
        utility::string_t refVal_setHostname;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hostname"))), refVal_setHostname );
        setHostname(refVal_setHostname);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        std::vector<utility::string_t> refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("operating_system"))))
    {
        utility::string_t refVal_setOperatingSystem;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("operating_system"))), refVal_setOperatingSystem );
        setOperatingSystem(refVal_setOperatingSystem);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("owner"))))
    {
        utility::string_t refVal_setOwner;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("owner"))), refVal_setOwner );
        setOwner(refVal_setOwner);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partitions"))))
    {
        std::vector<utility::string_t> refVal_setPartitions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partitions"))), refVal_setPartitions );
        setPartitions(refVal_setPartitions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("port"))))
    {
        int32_t refVal_setPort;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("port"))), refVal_setPort );
        setPort(refVal_setPort);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("real_memory"))))
    {
        int64_t refVal_setRealMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("real_memory"))), refVal_setRealMemory );
        setRealMemory(refVal_setRealMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        utility::string_t refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reason"))))
    {
        utility::string_t refVal_setReason;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reason"))), refVal_setReason );
        setReason(refVal_setReason);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reason_changed_at"))))
    {
        int64_t refVal_setReasonChangedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reason_changed_at"))), refVal_setReasonChangedAt );
        setReasonChangedAt(refVal_setReasonChangedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reason_set_by_user"))))
    {
        utility::string_t refVal_setReasonSetByUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reason_set_by_user"))), refVal_setReasonSetByUser );
        setReasonSetByUser(refVal_setReasonSetByUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resume_after"))))
    {
        std::shared_ptr<V0_0_39_uint64_no_val> refVal_setResumeAfter;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resume_after"))), refVal_setResumeAfter );
        setResumeAfter(refVal_setResumeAfter);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reservation"))))
    {
        utility::string_t refVal_setReservation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reservation"))), refVal_setReservation );
        setReservation(refVal_setReservation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alloc_memory"))))
    {
        int64_t refVal_setAllocMemory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alloc_memory"))), refVal_setAllocMemory );
        setAllocMemory(refVal_setAllocMemory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alloc_cpus"))))
    {
        int32_t refVal_setAllocCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alloc_cpus"))), refVal_setAllocCpus );
        setAllocCpus(refVal_setAllocCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("alloc_idle_cpus"))))
    {
        int32_t refVal_setAllocIdleCpus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("alloc_idle_cpus"))), refVal_setAllocIdleCpus );
        setAllocIdleCpus(refVal_setAllocIdleCpus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_used"))))
    {
        utility::string_t refVal_setTresUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_used"))), refVal_setTresUsed );
        setTresUsed(refVal_setTresUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres_weighted"))))
    {
        double refVal_setTresWeighted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres_weighted"))), refVal_setTresWeighted );
        setTresWeighted(refVal_setTresWeighted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slurmd_start_time"))))
    {
        int64_t refVal_setSlurmdStartTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slurmd_start_time"))), refVal_setSlurmdStartTime );
        setSlurmdStartTime(refVal_setSlurmdStartTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sockets"))))
    {
        int32_t refVal_setSockets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sockets"))), refVal_setSockets );
        setSockets(refVal_setSockets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("threads"))))
    {
        int32_t refVal_setThreads;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("threads"))), refVal_setThreads );
        setThreads(refVal_setThreads);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("temporary_disk"))))
    {
        int32_t refVal_setTemporaryDisk;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("temporary_disk"))), refVal_setTemporaryDisk );
        setTemporaryDisk(refVal_setTemporaryDisk);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("weight"))))
    {
        int32_t refVal_setWeight;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("weight"))), refVal_setWeight );
        setWeight(refVal_setWeight);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        utility::string_t refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    return ok;
}

utility::string_t V0_0_39_node::getArchitecture() const
{
    return m_Architecture;
}

void V0_0_39_node::setArchitecture(const utility::string_t& value)
{
    m_Architecture = value;
    m_ArchitectureIsSet = true;
}

bool V0_0_39_node::architectureIsSet() const
{
    return m_ArchitectureIsSet;
}

void V0_0_39_node::unsetArchitecture()
{
    m_ArchitectureIsSet = false;
}
utility::string_t V0_0_39_node::getBurstbufferNetworkAddress() const
{
    return m_Burstbuffer_network_address;
}

void V0_0_39_node::setBurstbufferNetworkAddress(const utility::string_t& value)
{
    m_Burstbuffer_network_address = value;
    m_Burstbuffer_network_addressIsSet = true;
}

bool V0_0_39_node::burstbufferNetworkAddressIsSet() const
{
    return m_Burstbuffer_network_addressIsSet;
}

void V0_0_39_node::unsetBurstbuffer_network_address()
{
    m_Burstbuffer_network_addressIsSet = false;
}
int32_t V0_0_39_node::getBoards() const
{
    return m_Boards;
}

void V0_0_39_node::setBoards(int32_t value)
{
    m_Boards = value;
    m_BoardsIsSet = true;
}

bool V0_0_39_node::boardsIsSet() const
{
    return m_BoardsIsSet;
}

void V0_0_39_node::unsetBoards()
{
    m_BoardsIsSet = false;
}
int64_t V0_0_39_node::getBootTime() const
{
    return m_Boot_time;
}

void V0_0_39_node::setBootTime(int64_t value)
{
    m_Boot_time = value;
    m_Boot_timeIsSet = true;
}

bool V0_0_39_node::bootTimeIsSet() const
{
    return m_Boot_timeIsSet;
}

void V0_0_39_node::unsetBoot_time()
{
    m_Boot_timeIsSet = false;
}
utility::string_t V0_0_39_node::getClusterName() const
{
    return m_Cluster_name;
}

void V0_0_39_node::setClusterName(const utility::string_t& value)
{
    m_Cluster_name = value;
    m_Cluster_nameIsSet = true;
}

bool V0_0_39_node::clusterNameIsSet() const
{
    return m_Cluster_nameIsSet;
}

void V0_0_39_node::unsetCluster_name()
{
    m_Cluster_nameIsSet = false;
}
int32_t V0_0_39_node::getCores() const
{
    return m_Cores;
}

void V0_0_39_node::setCores(int32_t value)
{
    m_Cores = value;
    m_CoresIsSet = true;
}

bool V0_0_39_node::coresIsSet() const
{
    return m_CoresIsSet;
}

void V0_0_39_node::unsetCores()
{
    m_CoresIsSet = false;
}
int32_t V0_0_39_node::getSpecializedCores() const
{
    return m_Specialized_cores;
}

void V0_0_39_node::setSpecializedCores(int32_t value)
{
    m_Specialized_cores = value;
    m_Specialized_coresIsSet = true;
}

bool V0_0_39_node::specializedCoresIsSet() const
{
    return m_Specialized_coresIsSet;
}

void V0_0_39_node::unsetSpecialized_cores()
{
    m_Specialized_coresIsSet = false;
}
int32_t V0_0_39_node::getCpuBinding() const
{
    return m_Cpu_binding;
}

void V0_0_39_node::setCpuBinding(int32_t value)
{
    m_Cpu_binding = value;
    m_Cpu_bindingIsSet = true;
}

bool V0_0_39_node::cpuBindingIsSet() const
{
    return m_Cpu_bindingIsSet;
}

void V0_0_39_node::unsetCpu_binding()
{
    m_Cpu_bindingIsSet = false;
}
std::shared_ptr<V0_0_39_uint32_no_val> V0_0_39_node::getCpuLoad() const
{
    return m_Cpu_load;
}

void V0_0_39_node::setCpuLoad(const std::shared_ptr<V0_0_39_uint32_no_val>& value)
{
    m_Cpu_load = value;
    m_Cpu_loadIsSet = true;
}

bool V0_0_39_node::cpuLoadIsSet() const
{
    return m_Cpu_loadIsSet;
}

void V0_0_39_node::unsetCpu_load()
{
    m_Cpu_loadIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_node::getFreeMem() const
{
    return m_Free_mem;
}

void V0_0_39_node::setFreeMem(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Free_mem = value;
    m_Free_memIsSet = true;
}

bool V0_0_39_node::freeMemIsSet() const
{
    return m_Free_memIsSet;
}

void V0_0_39_node::unsetFree_mem()
{
    m_Free_memIsSet = false;
}
int32_t V0_0_39_node::getCpus() const
{
    return m_Cpus;
}

void V0_0_39_node::setCpus(int32_t value)
{
    m_Cpus = value;
    m_CpusIsSet = true;
}

bool V0_0_39_node::cpusIsSet() const
{
    return m_CpusIsSet;
}

void V0_0_39_node::unsetCpus()
{
    m_CpusIsSet = false;
}
int32_t V0_0_39_node::getEffectiveCpus() const
{
    return m_Effective_cpus;
}

void V0_0_39_node::setEffectiveCpus(int32_t value)
{
    m_Effective_cpus = value;
    m_Effective_cpusIsSet = true;
}

bool V0_0_39_node::effectiveCpusIsSet() const
{
    return m_Effective_cpusIsSet;
}

void V0_0_39_node::unsetEffective_cpus()
{
    m_Effective_cpusIsSet = false;
}
utility::string_t V0_0_39_node::getSpecializedCpus() const
{
    return m_Specialized_cpus;
}

void V0_0_39_node::setSpecializedCpus(const utility::string_t& value)
{
    m_Specialized_cpus = value;
    m_Specialized_cpusIsSet = true;
}

bool V0_0_39_node::specializedCpusIsSet() const
{
    return m_Specialized_cpusIsSet;
}

void V0_0_39_node::unsetSpecialized_cpus()
{
    m_Specialized_cpusIsSet = false;
}
std::shared_ptr<V0_0_39_acct_gather_energy> V0_0_39_node::getEnergy() const
{
    return m_Energy;
}

void V0_0_39_node::setEnergy(const std::shared_ptr<V0_0_39_acct_gather_energy>& value)
{
    m_Energy = value;
    m_EnergyIsSet = true;
}

bool V0_0_39_node::energyIsSet() const
{
    return m_EnergyIsSet;
}

void V0_0_39_node::unsetEnergy()
{
    m_EnergyIsSet = false;
}
std::shared_ptr<Object> V0_0_39_node::getExternalSensors() const
{
    return m_External_sensors;
}

void V0_0_39_node::setExternalSensors(const std::shared_ptr<Object>& value)
{
    m_External_sensors = value;
    m_External_sensorsIsSet = true;
}

bool V0_0_39_node::externalSensorsIsSet() const
{
    return m_External_sensorsIsSet;
}

void V0_0_39_node::unsetExternal_sensors()
{
    m_External_sensorsIsSet = false;
}
utility::string_t V0_0_39_node::getExtra() const
{
    return m_Extra;
}

void V0_0_39_node::setExtra(const utility::string_t& value)
{
    m_Extra = value;
    m_ExtraIsSet = true;
}

bool V0_0_39_node::extraIsSet() const
{
    return m_ExtraIsSet;
}

void V0_0_39_node::unsetExtra()
{
    m_ExtraIsSet = false;
}
std::shared_ptr<Object> V0_0_39_node::getPower() const
{
    return m_Power;
}

void V0_0_39_node::setPower(const std::shared_ptr<Object>& value)
{
    m_Power = value;
    m_PowerIsSet = true;
}

bool V0_0_39_node::powerIsSet() const
{
    return m_PowerIsSet;
}

void V0_0_39_node::unsetPower()
{
    m_PowerIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_node::getFeatures()
{
    return m_Features;
}

void V0_0_39_node::setFeatures(const std::vector<utility::string_t>& value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}

bool V0_0_39_node::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void V0_0_39_node::unsetFeatures()
{
    m_FeaturesIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_node::getActiveFeatures()
{
    return m_Active_features;
}

void V0_0_39_node::setActiveFeatures(const std::vector<utility::string_t>& value)
{
    m_Active_features = value;
    m_Active_featuresIsSet = true;
}

bool V0_0_39_node::activeFeaturesIsSet() const
{
    return m_Active_featuresIsSet;
}

void V0_0_39_node::unsetActive_features()
{
    m_Active_featuresIsSet = false;
}
utility::string_t V0_0_39_node::getGres() const
{
    return m_Gres;
}

void V0_0_39_node::setGres(const utility::string_t& value)
{
    m_Gres = value;
    m_GresIsSet = true;
}

bool V0_0_39_node::gresIsSet() const
{
    return m_GresIsSet;
}

void V0_0_39_node::unsetGres()
{
    m_GresIsSet = false;
}
utility::string_t V0_0_39_node::getGresDrained() const
{
    return m_Gres_drained;
}

void V0_0_39_node::setGresDrained(const utility::string_t& value)
{
    m_Gres_drained = value;
    m_Gres_drainedIsSet = true;
}

bool V0_0_39_node::gresDrainedIsSet() const
{
    return m_Gres_drainedIsSet;
}

void V0_0_39_node::unsetGres_drained()
{
    m_Gres_drainedIsSet = false;
}
utility::string_t V0_0_39_node::getGresUsed() const
{
    return m_Gres_used;
}

void V0_0_39_node::setGresUsed(const utility::string_t& value)
{
    m_Gres_used = value;
    m_Gres_usedIsSet = true;
}

bool V0_0_39_node::gresUsedIsSet() const
{
    return m_Gres_usedIsSet;
}

void V0_0_39_node::unsetGres_used()
{
    m_Gres_usedIsSet = false;
}
int64_t V0_0_39_node::getLastBusy() const
{
    return m_Last_busy;
}

void V0_0_39_node::setLastBusy(int64_t value)
{
    m_Last_busy = value;
    m_Last_busyIsSet = true;
}

bool V0_0_39_node::lastBusyIsSet() const
{
    return m_Last_busyIsSet;
}

void V0_0_39_node::unsetLast_busy()
{
    m_Last_busyIsSet = false;
}
utility::string_t V0_0_39_node::getMcsLabel() const
{
    return m_Mcs_label;
}

void V0_0_39_node::setMcsLabel(const utility::string_t& value)
{
    m_Mcs_label = value;
    m_Mcs_labelIsSet = true;
}

bool V0_0_39_node::mcsLabelIsSet() const
{
    return m_Mcs_labelIsSet;
}

void V0_0_39_node::unsetMcs_label()
{
    m_Mcs_labelIsSet = false;
}
int64_t V0_0_39_node::getSpecializedMemory() const
{
    return m_Specialized_memory;
}

void V0_0_39_node::setSpecializedMemory(int64_t value)
{
    m_Specialized_memory = value;
    m_Specialized_memoryIsSet = true;
}

bool V0_0_39_node::specializedMemoryIsSet() const
{
    return m_Specialized_memoryIsSet;
}

void V0_0_39_node::unsetSpecialized_memory()
{
    m_Specialized_memoryIsSet = false;
}
utility::string_t V0_0_39_node::getName() const
{
    return m_Name;
}

void V0_0_39_node::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool V0_0_39_node::nameIsSet() const
{
    return m_NameIsSet;
}

void V0_0_39_node::unsetName()
{
    m_NameIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_node::getNextStateAfterReboot()
{
    return m_Next_state_after_reboot;
}

void V0_0_39_node::setNextStateAfterReboot(const std::vector<utility::string_t>& value)
{
    m_Next_state_after_reboot = value;
    m_Next_state_after_rebootIsSet = true;
}

bool V0_0_39_node::nextStateAfterRebootIsSet() const
{
    return m_Next_state_after_rebootIsSet;
}

void V0_0_39_node::unsetNext_state_after_reboot()
{
    m_Next_state_after_rebootIsSet = false;
}
utility::string_t V0_0_39_node::getAddress() const
{
    return m_Address;
}

void V0_0_39_node::setAddress(const utility::string_t& value)
{
    m_Address = value;
    m_AddressIsSet = true;
}

bool V0_0_39_node::addressIsSet() const
{
    return m_AddressIsSet;
}

void V0_0_39_node::unsetAddress()
{
    m_AddressIsSet = false;
}
utility::string_t V0_0_39_node::getHostname() const
{
    return m_Hostname;
}

void V0_0_39_node::setHostname(const utility::string_t& value)
{
    m_Hostname = value;
    m_HostnameIsSet = true;
}

bool V0_0_39_node::hostnameIsSet() const
{
    return m_HostnameIsSet;
}

void V0_0_39_node::unsetHostname()
{
    m_HostnameIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_node::getState()
{
    return m_State;
}

void V0_0_39_node::setState(const std::vector<utility::string_t>& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool V0_0_39_node::stateIsSet() const
{
    return m_StateIsSet;
}

void V0_0_39_node::unsetState()
{
    m_StateIsSet = false;
}
utility::string_t V0_0_39_node::getOperatingSystem() const
{
    return m_Operating_system;
}

void V0_0_39_node::setOperatingSystem(const utility::string_t& value)
{
    m_Operating_system = value;
    m_Operating_systemIsSet = true;
}

bool V0_0_39_node::operatingSystemIsSet() const
{
    return m_Operating_systemIsSet;
}

void V0_0_39_node::unsetOperating_system()
{
    m_Operating_systemIsSet = false;
}
utility::string_t V0_0_39_node::getOwner() const
{
    return m_Owner;
}

void V0_0_39_node::setOwner(const utility::string_t& value)
{
    m_Owner = value;
    m_OwnerIsSet = true;
}

bool V0_0_39_node::ownerIsSet() const
{
    return m_OwnerIsSet;
}

void V0_0_39_node::unsetOwner()
{
    m_OwnerIsSet = false;
}
std::vector<utility::string_t>& V0_0_39_node::getPartitions()
{
    return m_Partitions;
}

void V0_0_39_node::setPartitions(const std::vector<utility::string_t>& value)
{
    m_Partitions = value;
    m_PartitionsIsSet = true;
}

bool V0_0_39_node::partitionsIsSet() const
{
    return m_PartitionsIsSet;
}

void V0_0_39_node::unsetPartitions()
{
    m_PartitionsIsSet = false;
}
int32_t V0_0_39_node::getPort() const
{
    return m_Port;
}

void V0_0_39_node::setPort(int32_t value)
{
    m_Port = value;
    m_PortIsSet = true;
}

bool V0_0_39_node::portIsSet() const
{
    return m_PortIsSet;
}

void V0_0_39_node::unsetPort()
{
    m_PortIsSet = false;
}
int64_t V0_0_39_node::getRealMemory() const
{
    return m_Real_memory;
}

void V0_0_39_node::setRealMemory(int64_t value)
{
    m_Real_memory = value;
    m_Real_memoryIsSet = true;
}

bool V0_0_39_node::realMemoryIsSet() const
{
    return m_Real_memoryIsSet;
}

void V0_0_39_node::unsetReal_memory()
{
    m_Real_memoryIsSet = false;
}
utility::string_t V0_0_39_node::getComment() const
{
    return m_Comment;
}

void V0_0_39_node::setComment(const utility::string_t& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool V0_0_39_node::commentIsSet() const
{
    return m_CommentIsSet;
}

void V0_0_39_node::unsetComment()
{
    m_CommentIsSet = false;
}
utility::string_t V0_0_39_node::getReason() const
{
    return m_Reason;
}

void V0_0_39_node::setReason(const utility::string_t& value)
{
    m_Reason = value;
    m_ReasonIsSet = true;
}

bool V0_0_39_node::reasonIsSet() const
{
    return m_ReasonIsSet;
}

void V0_0_39_node::unsetReason()
{
    m_ReasonIsSet = false;
}
int64_t V0_0_39_node::getReasonChangedAt() const
{
    return m_Reason_changed_at;
}

void V0_0_39_node::setReasonChangedAt(int64_t value)
{
    m_Reason_changed_at = value;
    m_Reason_changed_atIsSet = true;
}

bool V0_0_39_node::reasonChangedAtIsSet() const
{
    return m_Reason_changed_atIsSet;
}

void V0_0_39_node::unsetReason_changed_at()
{
    m_Reason_changed_atIsSet = false;
}
utility::string_t V0_0_39_node::getReasonSetByUser() const
{
    return m_Reason_set_by_user;
}

void V0_0_39_node::setReasonSetByUser(const utility::string_t& value)
{
    m_Reason_set_by_user = value;
    m_Reason_set_by_userIsSet = true;
}

bool V0_0_39_node::reasonSetByUserIsSet() const
{
    return m_Reason_set_by_userIsSet;
}

void V0_0_39_node::unsetReason_set_by_user()
{
    m_Reason_set_by_userIsSet = false;
}
std::shared_ptr<V0_0_39_uint64_no_val> V0_0_39_node::getResumeAfter() const
{
    return m_Resume_after;
}

void V0_0_39_node::setResumeAfter(const std::shared_ptr<V0_0_39_uint64_no_val>& value)
{
    m_Resume_after = value;
    m_Resume_afterIsSet = true;
}

bool V0_0_39_node::resumeAfterIsSet() const
{
    return m_Resume_afterIsSet;
}

void V0_0_39_node::unsetResume_after()
{
    m_Resume_afterIsSet = false;
}
utility::string_t V0_0_39_node::getReservation() const
{
    return m_Reservation;
}

void V0_0_39_node::setReservation(const utility::string_t& value)
{
    m_Reservation = value;
    m_ReservationIsSet = true;
}

bool V0_0_39_node::reservationIsSet() const
{
    return m_ReservationIsSet;
}

void V0_0_39_node::unsetReservation()
{
    m_ReservationIsSet = false;
}
int64_t V0_0_39_node::getAllocMemory() const
{
    return m_Alloc_memory;
}

void V0_0_39_node::setAllocMemory(int64_t value)
{
    m_Alloc_memory = value;
    m_Alloc_memoryIsSet = true;
}

bool V0_0_39_node::allocMemoryIsSet() const
{
    return m_Alloc_memoryIsSet;
}

void V0_0_39_node::unsetAlloc_memory()
{
    m_Alloc_memoryIsSet = false;
}
int32_t V0_0_39_node::getAllocCpus() const
{
    return m_Alloc_cpus;
}

void V0_0_39_node::setAllocCpus(int32_t value)
{
    m_Alloc_cpus = value;
    m_Alloc_cpusIsSet = true;
}

bool V0_0_39_node::allocCpusIsSet() const
{
    return m_Alloc_cpusIsSet;
}

void V0_0_39_node::unsetAlloc_cpus()
{
    m_Alloc_cpusIsSet = false;
}
int32_t V0_0_39_node::getAllocIdleCpus() const
{
    return m_Alloc_idle_cpus;
}

void V0_0_39_node::setAllocIdleCpus(int32_t value)
{
    m_Alloc_idle_cpus = value;
    m_Alloc_idle_cpusIsSet = true;
}

bool V0_0_39_node::allocIdleCpusIsSet() const
{
    return m_Alloc_idle_cpusIsSet;
}

void V0_0_39_node::unsetAlloc_idle_cpus()
{
    m_Alloc_idle_cpusIsSet = false;
}
utility::string_t V0_0_39_node::getTresUsed() const
{
    return m_Tres_used;
}

void V0_0_39_node::setTresUsed(const utility::string_t& value)
{
    m_Tres_used = value;
    m_Tres_usedIsSet = true;
}

bool V0_0_39_node::tresUsedIsSet() const
{
    return m_Tres_usedIsSet;
}

void V0_0_39_node::unsetTres_used()
{
    m_Tres_usedIsSet = false;
}
double V0_0_39_node::getTresWeighted() const
{
    return m_Tres_weighted;
}

void V0_0_39_node::setTresWeighted(double value)
{
    m_Tres_weighted = value;
    m_Tres_weightedIsSet = true;
}

bool V0_0_39_node::tresWeightedIsSet() const
{
    return m_Tres_weightedIsSet;
}

void V0_0_39_node::unsetTres_weighted()
{
    m_Tres_weightedIsSet = false;
}
int64_t V0_0_39_node::getSlurmdStartTime() const
{
    return m_Slurmd_start_time;
}

void V0_0_39_node::setSlurmdStartTime(int64_t value)
{
    m_Slurmd_start_time = value;
    m_Slurmd_start_timeIsSet = true;
}

bool V0_0_39_node::slurmdStartTimeIsSet() const
{
    return m_Slurmd_start_timeIsSet;
}

void V0_0_39_node::unsetSlurmd_start_time()
{
    m_Slurmd_start_timeIsSet = false;
}
int32_t V0_0_39_node::getSockets() const
{
    return m_Sockets;
}

void V0_0_39_node::setSockets(int32_t value)
{
    m_Sockets = value;
    m_SocketsIsSet = true;
}

bool V0_0_39_node::socketsIsSet() const
{
    return m_SocketsIsSet;
}

void V0_0_39_node::unsetSockets()
{
    m_SocketsIsSet = false;
}
int32_t V0_0_39_node::getThreads() const
{
    return m_Threads;
}

void V0_0_39_node::setThreads(int32_t value)
{
    m_Threads = value;
    m_ThreadsIsSet = true;
}

bool V0_0_39_node::threadsIsSet() const
{
    return m_ThreadsIsSet;
}

void V0_0_39_node::unsetThreads()
{
    m_ThreadsIsSet = false;
}
int32_t V0_0_39_node::getTemporaryDisk() const
{
    return m_Temporary_disk;
}

void V0_0_39_node::setTemporaryDisk(int32_t value)
{
    m_Temporary_disk = value;
    m_Temporary_diskIsSet = true;
}

bool V0_0_39_node::temporaryDiskIsSet() const
{
    return m_Temporary_diskIsSet;
}

void V0_0_39_node::unsetTemporary_disk()
{
    m_Temporary_diskIsSet = false;
}
int32_t V0_0_39_node::getWeight() const
{
    return m_Weight;
}

void V0_0_39_node::setWeight(int32_t value)
{
    m_Weight = value;
    m_WeightIsSet = true;
}

bool V0_0_39_node::weightIsSet() const
{
    return m_WeightIsSet;
}

void V0_0_39_node::unsetWeight()
{
    m_WeightIsSet = false;
}
utility::string_t V0_0_39_node::getTres() const
{
    return m_Tres;
}

void V0_0_39_node::setTres(const utility::string_t& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool V0_0_39_node::tresIsSet() const
{
    return m_TresIsSet;
}

void V0_0_39_node::unsetTres()
{
    m_TresIsSet = false;
}
utility::string_t V0_0_39_node::getVersion() const
{
    return m_Version;
}

void V0_0_39_node::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool V0_0_39_node::versionIsSet() const
{
    return m_VersionIsSet;
}

void V0_0_39_node::unsetVersion()
{
    m_VersionIsSet = false;
}
}
}
}
}


