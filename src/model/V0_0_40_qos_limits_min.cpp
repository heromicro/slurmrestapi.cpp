/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_qos_limits_min.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_qos_limits_min::V0_0_40_qos_limits_min()
{
    m_Priority_thresholdIsSet = false;
    m_TresIsSet = false;
}

V0_0_40_qos_limits_min::~V0_0_40_qos_limits_min()
{
}

void V0_0_40_qos_limits_min::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_qos_limits_min::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Priority_thresholdIsSet)
    {
        val[utility::conversions::to_string_t(U("priority_threshold"))] = ModelBase::toJson(m_Priority_threshold);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }

    return val;
}

bool V0_0_40_qos_limits_min::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("priority_threshold"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority_threshold")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_uint32_no_val> refVal_setPriorityThreshold;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriorityThreshold);
            setPriorityThreshold(refVal_setPriorityThreshold);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_40_qos_limits_min_tres> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    return ok;
}

void V0_0_40_qos_limits_min::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Priority_thresholdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority_threshold")), m_Priority_threshold));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
}

bool V0_0_40_qos_limits_min::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("priority_threshold"))))
    {
        std::shared_ptr<V0_0_40_uint32_no_val> refVal_setPriorityThreshold;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority_threshold"))), refVal_setPriorityThreshold );
        setPriorityThreshold(refVal_setPriorityThreshold);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::shared_ptr<V0_0_40_qos_limits_min_tres> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    return ok;
}

std::shared_ptr<V0_0_40_uint32_no_val> V0_0_40_qos_limits_min::getPriorityThreshold() const
{
    return m_Priority_threshold;
}

void V0_0_40_qos_limits_min::setPriorityThreshold(const std::shared_ptr<V0_0_40_uint32_no_val>& value)
{
    m_Priority_threshold = value;
    m_Priority_thresholdIsSet = true;
}

bool V0_0_40_qos_limits_min::priorityThresholdIsSet() const
{
    return m_Priority_thresholdIsSet;
}

void V0_0_40_qos_limits_min::unsetPriority_threshold()
{
    m_Priority_thresholdIsSet = false;
}
std::shared_ptr<V0_0_40_qos_limits_min_tres> V0_0_40_qos_limits_min::getTres() const
{
    return m_Tres;
}

void V0_0_40_qos_limits_min::setTres(const std::shared_ptr<V0_0_40_qos_limits_min_tres>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool V0_0_40_qos_limits_min::tresIsSet() const
{
    return m_TresIsSet;
}

void V0_0_40_qos_limits_min::unsetTres()
{
    m_TresIsSet = false;
}
}
}
}
}


