/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/Dbv0_0_38_job.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



Dbv0_0_38_job::Dbv0_0_38_job()
{
    m_Account = utility::conversions::to_string_t("");
    m_AccountIsSet = false;
    m_CommentIsSet = false;
    m_Allocation_nodes = utility::conversions::to_string_t("");
    m_Allocation_nodesIsSet = false;
    m_arrayIsSet = false;
    m_TimeIsSet = false;
    m_AssociationIsSet = false;
    m_Cluster = utility::conversions::to_string_t("");
    m_ClusterIsSet = false;
    m_Constraints = utility::conversions::to_string_t("");
    m_ConstraintsIsSet = false;
    m_Derived_exit_codeIsSet = false;
    m_Exit_codeIsSet = false;
    m_FlagsIsSet = false;
    m_Group = utility::conversions::to_string_t("");
    m_GroupIsSet = false;
    m_HetIsSet = false;
    m_Job_id = 0;
    m_Job_idIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_McsIsSet = false;
    m_Nodes = utility::conversions::to_string_t("");
    m_NodesIsSet = false;
    m_Partition = utility::conversions::to_string_t("");
    m_PartitionIsSet = false;
    m_Priority = 0;
    m_PriorityIsSet = false;
    m_Qos = utility::conversions::to_string_t("");
    m_QosIsSet = false;
    m_RequiredIsSet = false;
    m_Kill_request_user = utility::conversions::to_string_t("");
    m_Kill_request_userIsSet = false;
    m_ReservationIsSet = false;
    m_StateIsSet = false;
    m_StepsIsSet = false;
    m_TresIsSet = false;
    m_User = utility::conversions::to_string_t("");
    m_UserIsSet = false;
    m_WckeyIsSet = false;
    m_Working_directory = utility::conversions::to_string_t("");
    m_Working_directoryIsSet = false;
    m_Container = utility::conversions::to_string_t("");
    m_ContainerIsSet = false;
}

Dbv0_0_38_job::~Dbv0_0_38_job()
{
}

void Dbv0_0_38_job::validate()
{
    // TODO: implement validation
}

web::json::value Dbv0_0_38_job::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIsSet)
    {
        val[utility::conversions::to_string_t(U("account"))] = ModelBase::toJson(m_Account);
    }
    if(m_CommentIsSet)
    {
        val[utility::conversions::to_string_t(U("comment"))] = ModelBase::toJson(m_Comment);
    }
    if(m_Allocation_nodesIsSet)
    {
        val[utility::conversions::to_string_t(U("allocation_nodes"))] = ModelBase::toJson(m_Allocation_nodes);
    }
    if(m_arrayIsSet)
    {
        val[utility::conversions::to_string_t(U("array"))] = ModelBase::toJson(m_array);
    }
    if(m_TimeIsSet)
    {
        val[utility::conversions::to_string_t(U("time"))] = ModelBase::toJson(m_Time);
    }
    if(m_AssociationIsSet)
    {
        val[utility::conversions::to_string_t(U("association"))] = ModelBase::toJson(m_Association);
    }
    if(m_ClusterIsSet)
    {
        val[utility::conversions::to_string_t(U("cluster"))] = ModelBase::toJson(m_Cluster);
    }
    if(m_ConstraintsIsSet)
    {
        val[utility::conversions::to_string_t(U("constraints"))] = ModelBase::toJson(m_Constraints);
    }
    if(m_Derived_exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("derived_exit_code"))] = ModelBase::toJson(m_Derived_exit_code);
    }
    if(m_Exit_codeIsSet)
    {
        val[utility::conversions::to_string_t(U("exit_code"))] = ModelBase::toJson(m_Exit_code);
    }
    if(m_FlagsIsSet)
    {
        val[utility::conversions::to_string_t(U("flags"))] = ModelBase::toJson(m_Flags);
    }
    if(m_GroupIsSet)
    {
        val[utility::conversions::to_string_t(U("group"))] = ModelBase::toJson(m_Group);
    }
    if(m_HetIsSet)
    {
        val[utility::conversions::to_string_t(U("het"))] = ModelBase::toJson(m_Het);
    }
    if(m_Job_idIsSet)
    {
        val[utility::conversions::to_string_t(U("job_id"))] = ModelBase::toJson(m_Job_id);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_McsIsSet)
    {
        val[utility::conversions::to_string_t(U("mcs"))] = ModelBase::toJson(m_Mcs);
    }
    if(m_NodesIsSet)
    {
        val[utility::conversions::to_string_t(U("nodes"))] = ModelBase::toJson(m_Nodes);
    }
    if(m_PartitionIsSet)
    {
        val[utility::conversions::to_string_t(U("partition"))] = ModelBase::toJson(m_Partition);
    }
    if(m_PriorityIsSet)
    {
        val[utility::conversions::to_string_t(U("priority"))] = ModelBase::toJson(m_Priority);
    }
    if(m_QosIsSet)
    {
        val[utility::conversions::to_string_t(U("qos"))] = ModelBase::toJson(m_Qos);
    }
    if(m_RequiredIsSet)
    {
        val[utility::conversions::to_string_t(U("required"))] = ModelBase::toJson(m_Required);
    }
    if(m_Kill_request_userIsSet)
    {
        val[utility::conversions::to_string_t(U("kill_request_user"))] = ModelBase::toJson(m_Kill_request_user);
    }
    if(m_ReservationIsSet)
    {
        val[utility::conversions::to_string_t(U("reservation"))] = ModelBase::toJson(m_Reservation);
    }
    if(m_StateIsSet)
    {
        val[utility::conversions::to_string_t(U("state"))] = ModelBase::toJson(m_State);
    }
    if(m_StepsIsSet)
    {
        val[utility::conversions::to_string_t(U("steps"))] = ModelBase::toJson(m_Steps);
    }
    if(m_TresIsSet)
    {
        val[utility::conversions::to_string_t(U("tres"))] = ModelBase::toJson(m_Tres);
    }
    if(m_UserIsSet)
    {
        val[utility::conversions::to_string_t(U("user"))] = ModelBase::toJson(m_User);
    }
    if(m_WckeyIsSet)
    {
        val[utility::conversions::to_string_t(U("wckey"))] = ModelBase::toJson(m_Wckey);
    }
    if(m_Working_directoryIsSet)
    {
        val[utility::conversions::to_string_t(U("working_directory"))] = ModelBase::toJson(m_Working_directory);
    }
    if(m_ContainerIsSet)
    {
        val[utility::conversions::to_string_t(U("container"))] = ModelBase::toJson(m_Container);
    }

    return val;
}

bool Dbv0_0_38_job::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("account"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("account")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccount);
            setAccount(refVal_setAccount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("comment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("comment")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_comment> refVal_setComment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setComment);
            setComment(refVal_setComment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("allocation_nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("allocation_nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAllocationNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAllocationNodes);
            setAllocationNodes(refVal_setAllocationNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("array"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("array")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_array> refVal_setArray;
            ok &= ModelBase::fromJson(fieldValue, refVal_setArray);
            setArray(refVal_setArray);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("time"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("time")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_time> refVal_setTime;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTime);
            setTime(refVal_setTime);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("association"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("association")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_association_short_info> refVal_setAssociation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAssociation);
            setAssociation(refVal_setAssociation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cluster"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cluster")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCluster;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCluster);
            setCluster(refVal_setCluster);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("constraints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("constraints")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setConstraints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConstraints);
            setConstraints(refVal_setConstraints);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("derived_exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("derived_exit_code")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_exit_code> refVal_setDerivedExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDerivedExitCode);
            setDerivedExitCode(refVal_setDerivedExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exit_code"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exit_code")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_exit_code> refVal_setExitCode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExitCode);
            setExitCode(refVal_setExitCode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setFlags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlags);
            setFlags(refVal_setFlags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("group"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("group")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setGroup;
            ok &= ModelBase::fromJson(fieldValue, refVal_setGroup);
            setGroup(refVal_setGroup);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("het"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("het")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_het> refVal_setHet;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHet);
            setHet(refVal_setHet);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("job_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("job_id")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setJobId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setJobId);
            setJobId(refVal_setJobId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mcs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mcs")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_mcs> refVal_setMcs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMcs);
            setMcs(refVal_setMcs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nodes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nodes")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNodes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNodes);
            setNodes(refVal_setNodes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("partition"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("partition")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setPartition;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPartition);
            setPartition(refVal_setPartition);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("priority"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("priority")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPriority;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPriority);
            setPriority(refVal_setPriority);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("qos"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("qos")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setQos;
            ok &= ModelBase::fromJson(fieldValue, refVal_setQos);
            setQos(refVal_setQos);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_required> refVal_setRequired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequired);
            setRequired(refVal_setRequired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("kill_request_user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("kill_request_user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setKillRequestUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setKillRequestUser);
            setKillRequestUser(refVal_setKillRequestUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reservation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reservation")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_reservation> refVal_setReservation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReservation);
            setReservation(refVal_setReservation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("state"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("state")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_state> refVal_setState;
            ok &= ModelBase::fromJson(fieldValue, refVal_setState);
            setState(refVal_setState);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("steps"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("steps")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Dbv0_0_38_job_step>> refVal_setSteps;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSteps);
            setSteps(refVal_setSteps);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tres"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tres")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_tres> refVal_setTres;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTres);
            setTres(refVal_setTres);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUser;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUser);
            setUser(refVal_setUser);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wckey"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wckey")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Dbv0_0_38_job_wckey> refVal_setWckey;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWckey);
            setWckey(refVal_setWckey);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("working_directory"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("working_directory")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWorkingDirectory;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWorkingDirectory);
            setWorkingDirectory(refVal_setWorkingDirectory);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("container"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("container")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setContainer;
            ok &= ModelBase::fromJson(fieldValue, refVal_setContainer);
            setContainer(refVal_setContainer);
        }
    }
    return ok;
}

void Dbv0_0_38_job::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("account")), m_Account));
    }
    if(m_CommentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("comment")), m_Comment));
    }
    if(m_Allocation_nodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("allocation_nodes")), m_Allocation_nodes));
    }
    if(m_arrayIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("array")), m_array));
    }
    if(m_TimeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("time")), m_Time));
    }
    if(m_AssociationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("association")), m_Association));
    }
    if(m_ClusterIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cluster")), m_Cluster));
    }
    if(m_ConstraintsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("constraints")), m_Constraints));
    }
    if(m_Derived_exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("derived_exit_code")), m_Derived_exit_code));
    }
    if(m_Exit_codeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exit_code")), m_Exit_code));
    }
    if(m_FlagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flags")), m_Flags));
    }
    if(m_GroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("group")), m_Group));
    }
    if(m_HetIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("het")), m_Het));
    }
    if(m_Job_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("job_id")), m_Job_id));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_McsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mcs")), m_Mcs));
    }
    if(m_NodesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nodes")), m_Nodes));
    }
    if(m_PartitionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("partition")), m_Partition));
    }
    if(m_PriorityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("priority")), m_Priority));
    }
    if(m_QosIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("qos")), m_Qos));
    }
    if(m_RequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required")), m_Required));
    }
    if(m_Kill_request_userIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("kill_request_user")), m_Kill_request_user));
    }
    if(m_ReservationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reservation")), m_Reservation));
    }
    if(m_StateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("state")), m_State));
    }
    if(m_StepsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("steps")), m_Steps));
    }
    if(m_TresIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tres")), m_Tres));
    }
    if(m_UserIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user")), m_User));
    }
    if(m_WckeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wckey")), m_Wckey));
    }
    if(m_Working_directoryIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("working_directory")), m_Working_directory));
    }
    if(m_ContainerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("container")), m_Container));
    }
}

bool Dbv0_0_38_job::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("account"))))
    {
        utility::string_t refVal_setAccount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("account"))), refVal_setAccount );
        setAccount(refVal_setAccount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("comment"))))
    {
        std::shared_ptr<Dbv0_0_38_job_comment> refVal_setComment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("comment"))), refVal_setComment );
        setComment(refVal_setComment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("allocation_nodes"))))
    {
        utility::string_t refVal_setAllocationNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("allocation_nodes"))), refVal_setAllocationNodes );
        setAllocationNodes(refVal_setAllocationNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("array"))))
    {
        std::shared_ptr<Dbv0_0_38_job_array> refVal_setArray;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("array"))), refVal_setArray );
        setArray(refVal_setArray);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("time"))))
    {
        std::shared_ptr<Dbv0_0_38_job_time> refVal_setTime;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("time"))), refVal_setTime );
        setTime(refVal_setTime);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("association"))))
    {
        std::shared_ptr<Dbv0_0_38_association_short_info> refVal_setAssociation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("association"))), refVal_setAssociation );
        setAssociation(refVal_setAssociation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cluster"))))
    {
        utility::string_t refVal_setCluster;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cluster"))), refVal_setCluster );
        setCluster(refVal_setCluster);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("constraints"))))
    {
        utility::string_t refVal_setConstraints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("constraints"))), refVal_setConstraints );
        setConstraints(refVal_setConstraints);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("derived_exit_code"))))
    {
        std::shared_ptr<Dbv0_0_38_job_exit_code> refVal_setDerivedExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("derived_exit_code"))), refVal_setDerivedExitCode );
        setDerivedExitCode(refVal_setDerivedExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exit_code"))))
    {
        std::shared_ptr<Dbv0_0_38_job_exit_code> refVal_setExitCode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exit_code"))), refVal_setExitCode );
        setExitCode(refVal_setExitCode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flags"))))
    {
        std::vector<utility::string_t> refVal_setFlags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flags"))), refVal_setFlags );
        setFlags(refVal_setFlags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("group"))))
    {
        utility::string_t refVal_setGroup;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("group"))), refVal_setGroup );
        setGroup(refVal_setGroup);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("het"))))
    {
        std::shared_ptr<Dbv0_0_38_job_het> refVal_setHet;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("het"))), refVal_setHet );
        setHet(refVal_setHet);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("job_id"))))
    {
        int32_t refVal_setJobId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("job_id"))), refVal_setJobId );
        setJobId(refVal_setJobId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mcs"))))
    {
        std::shared_ptr<Dbv0_0_38_job_mcs> refVal_setMcs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mcs"))), refVal_setMcs );
        setMcs(refVal_setMcs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nodes"))))
    {
        utility::string_t refVal_setNodes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nodes"))), refVal_setNodes );
        setNodes(refVal_setNodes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("partition"))))
    {
        utility::string_t refVal_setPartition;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("partition"))), refVal_setPartition );
        setPartition(refVal_setPartition);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("priority"))))
    {
        int32_t refVal_setPriority;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("priority"))), refVal_setPriority );
        setPriority(refVal_setPriority);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("qos"))))
    {
        utility::string_t refVal_setQos;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("qos"))), refVal_setQos );
        setQos(refVal_setQos);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required"))))
    {
        std::shared_ptr<Dbv0_0_38_job_required> refVal_setRequired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required"))), refVal_setRequired );
        setRequired(refVal_setRequired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("kill_request_user"))))
    {
        utility::string_t refVal_setKillRequestUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("kill_request_user"))), refVal_setKillRequestUser );
        setKillRequestUser(refVal_setKillRequestUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reservation"))))
    {
        std::shared_ptr<Dbv0_0_38_job_reservation> refVal_setReservation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reservation"))), refVal_setReservation );
        setReservation(refVal_setReservation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("state"))))
    {
        std::shared_ptr<Dbv0_0_38_job_state> refVal_setState;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("state"))), refVal_setState );
        setState(refVal_setState);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("steps"))))
    {
        std::vector<std::shared_ptr<Dbv0_0_38_job_step>> refVal_setSteps;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("steps"))), refVal_setSteps );
        setSteps(refVal_setSteps);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tres"))))
    {
        std::shared_ptr<Dbv0_0_38_job_tres> refVal_setTres;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tres"))), refVal_setTres );
        setTres(refVal_setTres);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user"))))
    {
        utility::string_t refVal_setUser;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user"))), refVal_setUser );
        setUser(refVal_setUser);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wckey"))))
    {
        std::shared_ptr<Dbv0_0_38_job_wckey> refVal_setWckey;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wckey"))), refVal_setWckey );
        setWckey(refVal_setWckey);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("working_directory"))))
    {
        utility::string_t refVal_setWorkingDirectory;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("working_directory"))), refVal_setWorkingDirectory );
        setWorkingDirectory(refVal_setWorkingDirectory);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("container"))))
    {
        utility::string_t refVal_setContainer;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("container"))), refVal_setContainer );
        setContainer(refVal_setContainer);
    }
    return ok;
}

utility::string_t Dbv0_0_38_job::getAccount() const
{
    return m_Account;
}

void Dbv0_0_38_job::setAccount(const utility::string_t& value)
{
    m_Account = value;
    m_AccountIsSet = true;
}

bool Dbv0_0_38_job::accountIsSet() const
{
    return m_AccountIsSet;
}

void Dbv0_0_38_job::unsetAccount()
{
    m_AccountIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_comment> Dbv0_0_38_job::getComment() const
{
    return m_Comment;
}

void Dbv0_0_38_job::setComment(const std::shared_ptr<Dbv0_0_38_job_comment>& value)
{
    m_Comment = value;
    m_CommentIsSet = true;
}

bool Dbv0_0_38_job::commentIsSet() const
{
    return m_CommentIsSet;
}

void Dbv0_0_38_job::unsetComment()
{
    m_CommentIsSet = false;
}
utility::string_t Dbv0_0_38_job::getAllocationNodes() const
{
    return m_Allocation_nodes;
}

void Dbv0_0_38_job::setAllocationNodes(const utility::string_t& value)
{
    m_Allocation_nodes = value;
    m_Allocation_nodesIsSet = true;
}

bool Dbv0_0_38_job::allocationNodesIsSet() const
{
    return m_Allocation_nodesIsSet;
}

void Dbv0_0_38_job::unsetAllocation_nodes()
{
    m_Allocation_nodesIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_array> Dbv0_0_38_job::getArray() const
{
    return m_array;
}

void Dbv0_0_38_job::setArray(const std::shared_ptr<Dbv0_0_38_job_array>& value)
{
    m_array = value;
    m_arrayIsSet = true;
}

bool Dbv0_0_38_job::arrayIsSet() const
{
    return m_arrayIsSet;
}

void Dbv0_0_38_job::unsetarray()
{
    m_arrayIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_time> Dbv0_0_38_job::getTime() const
{
    return m_Time;
}

void Dbv0_0_38_job::setTime(const std::shared_ptr<Dbv0_0_38_job_time>& value)
{
    m_Time = value;
    m_TimeIsSet = true;
}

bool Dbv0_0_38_job::timeIsSet() const
{
    return m_TimeIsSet;
}

void Dbv0_0_38_job::unsetTime()
{
    m_TimeIsSet = false;
}
std::shared_ptr<Dbv0_0_38_association_short_info> Dbv0_0_38_job::getAssociation() const
{
    return m_Association;
}

void Dbv0_0_38_job::setAssociation(const std::shared_ptr<Dbv0_0_38_association_short_info>& value)
{
    m_Association = value;
    m_AssociationIsSet = true;
}

bool Dbv0_0_38_job::associationIsSet() const
{
    return m_AssociationIsSet;
}

void Dbv0_0_38_job::unsetAssociation()
{
    m_AssociationIsSet = false;
}
utility::string_t Dbv0_0_38_job::getCluster() const
{
    return m_Cluster;
}

void Dbv0_0_38_job::setCluster(const utility::string_t& value)
{
    m_Cluster = value;
    m_ClusterIsSet = true;
}

bool Dbv0_0_38_job::clusterIsSet() const
{
    return m_ClusterIsSet;
}

void Dbv0_0_38_job::unsetCluster()
{
    m_ClusterIsSet = false;
}
utility::string_t Dbv0_0_38_job::getConstraints() const
{
    return m_Constraints;
}

void Dbv0_0_38_job::setConstraints(const utility::string_t& value)
{
    m_Constraints = value;
    m_ConstraintsIsSet = true;
}

bool Dbv0_0_38_job::constraintsIsSet() const
{
    return m_ConstraintsIsSet;
}

void Dbv0_0_38_job::unsetConstraints()
{
    m_ConstraintsIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_exit_code> Dbv0_0_38_job::getDerivedExitCode() const
{
    return m_Derived_exit_code;
}

void Dbv0_0_38_job::setDerivedExitCode(const std::shared_ptr<Dbv0_0_38_job_exit_code>& value)
{
    m_Derived_exit_code = value;
    m_Derived_exit_codeIsSet = true;
}

bool Dbv0_0_38_job::derivedExitCodeIsSet() const
{
    return m_Derived_exit_codeIsSet;
}

void Dbv0_0_38_job::unsetDerived_exit_code()
{
    m_Derived_exit_codeIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_exit_code> Dbv0_0_38_job::getExitCode() const
{
    return m_Exit_code;
}

void Dbv0_0_38_job::setExitCode(const std::shared_ptr<Dbv0_0_38_job_exit_code>& value)
{
    m_Exit_code = value;
    m_Exit_codeIsSet = true;
}

bool Dbv0_0_38_job::exitCodeIsSet() const
{
    return m_Exit_codeIsSet;
}

void Dbv0_0_38_job::unsetExit_code()
{
    m_Exit_codeIsSet = false;
}
std::vector<utility::string_t>& Dbv0_0_38_job::getFlags()
{
    return m_Flags;
}

void Dbv0_0_38_job::setFlags(const std::vector<utility::string_t>& value)
{
    m_Flags = value;
    m_FlagsIsSet = true;
}

bool Dbv0_0_38_job::flagsIsSet() const
{
    return m_FlagsIsSet;
}

void Dbv0_0_38_job::unsetFlags()
{
    m_FlagsIsSet = false;
}
utility::string_t Dbv0_0_38_job::getGroup() const
{
    return m_Group;
}

void Dbv0_0_38_job::setGroup(const utility::string_t& value)
{
    m_Group = value;
    m_GroupIsSet = true;
}

bool Dbv0_0_38_job::groupIsSet() const
{
    return m_GroupIsSet;
}

void Dbv0_0_38_job::unsetGroup()
{
    m_GroupIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_het> Dbv0_0_38_job::getHet() const
{
    return m_Het;
}

void Dbv0_0_38_job::setHet(const std::shared_ptr<Dbv0_0_38_job_het>& value)
{
    m_Het = value;
    m_HetIsSet = true;
}

bool Dbv0_0_38_job::hetIsSet() const
{
    return m_HetIsSet;
}

void Dbv0_0_38_job::unsetHet()
{
    m_HetIsSet = false;
}
int32_t Dbv0_0_38_job::getJobId() const
{
    return m_Job_id;
}

void Dbv0_0_38_job::setJobId(int32_t value)
{
    m_Job_id = value;
    m_Job_idIsSet = true;
}

bool Dbv0_0_38_job::jobIdIsSet() const
{
    return m_Job_idIsSet;
}

void Dbv0_0_38_job::unsetJob_id()
{
    m_Job_idIsSet = false;
}
utility::string_t Dbv0_0_38_job::getName() const
{
    return m_Name;
}

void Dbv0_0_38_job::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Dbv0_0_38_job::nameIsSet() const
{
    return m_NameIsSet;
}

void Dbv0_0_38_job::unsetName()
{
    m_NameIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_mcs> Dbv0_0_38_job::getMcs() const
{
    return m_Mcs;
}

void Dbv0_0_38_job::setMcs(const std::shared_ptr<Dbv0_0_38_job_mcs>& value)
{
    m_Mcs = value;
    m_McsIsSet = true;
}

bool Dbv0_0_38_job::mcsIsSet() const
{
    return m_McsIsSet;
}

void Dbv0_0_38_job::unsetMcs()
{
    m_McsIsSet = false;
}
utility::string_t Dbv0_0_38_job::getNodes() const
{
    return m_Nodes;
}

void Dbv0_0_38_job::setNodes(const utility::string_t& value)
{
    m_Nodes = value;
    m_NodesIsSet = true;
}

bool Dbv0_0_38_job::nodesIsSet() const
{
    return m_NodesIsSet;
}

void Dbv0_0_38_job::unsetNodes()
{
    m_NodesIsSet = false;
}
utility::string_t Dbv0_0_38_job::getPartition() const
{
    return m_Partition;
}

void Dbv0_0_38_job::setPartition(const utility::string_t& value)
{
    m_Partition = value;
    m_PartitionIsSet = true;
}

bool Dbv0_0_38_job::partitionIsSet() const
{
    return m_PartitionIsSet;
}

void Dbv0_0_38_job::unsetPartition()
{
    m_PartitionIsSet = false;
}
int32_t Dbv0_0_38_job::getPriority() const
{
    return m_Priority;
}

void Dbv0_0_38_job::setPriority(int32_t value)
{
    m_Priority = value;
    m_PriorityIsSet = true;
}

bool Dbv0_0_38_job::priorityIsSet() const
{
    return m_PriorityIsSet;
}

void Dbv0_0_38_job::unsetPriority()
{
    m_PriorityIsSet = false;
}
utility::string_t Dbv0_0_38_job::getQos() const
{
    return m_Qos;
}

void Dbv0_0_38_job::setQos(const utility::string_t& value)
{
    m_Qos = value;
    m_QosIsSet = true;
}

bool Dbv0_0_38_job::qosIsSet() const
{
    return m_QosIsSet;
}

void Dbv0_0_38_job::unsetQos()
{
    m_QosIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_required> Dbv0_0_38_job::getRequired() const
{
    return m_Required;
}

void Dbv0_0_38_job::setRequired(const std::shared_ptr<Dbv0_0_38_job_required>& value)
{
    m_Required = value;
    m_RequiredIsSet = true;
}

bool Dbv0_0_38_job::requiredIsSet() const
{
    return m_RequiredIsSet;
}

void Dbv0_0_38_job::unsetRequired()
{
    m_RequiredIsSet = false;
}
utility::string_t Dbv0_0_38_job::getKillRequestUser() const
{
    return m_Kill_request_user;
}

void Dbv0_0_38_job::setKillRequestUser(const utility::string_t& value)
{
    m_Kill_request_user = value;
    m_Kill_request_userIsSet = true;
}

bool Dbv0_0_38_job::killRequestUserIsSet() const
{
    return m_Kill_request_userIsSet;
}

void Dbv0_0_38_job::unsetKill_request_user()
{
    m_Kill_request_userIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_reservation> Dbv0_0_38_job::getReservation() const
{
    return m_Reservation;
}

void Dbv0_0_38_job::setReservation(const std::shared_ptr<Dbv0_0_38_job_reservation>& value)
{
    m_Reservation = value;
    m_ReservationIsSet = true;
}

bool Dbv0_0_38_job::reservationIsSet() const
{
    return m_ReservationIsSet;
}

void Dbv0_0_38_job::unsetReservation()
{
    m_ReservationIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_state> Dbv0_0_38_job::getState() const
{
    return m_State;
}

void Dbv0_0_38_job::setState(const std::shared_ptr<Dbv0_0_38_job_state>& value)
{
    m_State = value;
    m_StateIsSet = true;
}

bool Dbv0_0_38_job::stateIsSet() const
{
    return m_StateIsSet;
}

void Dbv0_0_38_job::unsetState()
{
    m_StateIsSet = false;
}
std::vector<std::shared_ptr<Dbv0_0_38_job_step>>& Dbv0_0_38_job::getSteps()
{
    return m_Steps;
}

void Dbv0_0_38_job::setSteps(const std::vector<std::shared_ptr<Dbv0_0_38_job_step>>& value)
{
    m_Steps = value;
    m_StepsIsSet = true;
}

bool Dbv0_0_38_job::stepsIsSet() const
{
    return m_StepsIsSet;
}

void Dbv0_0_38_job::unsetSteps()
{
    m_StepsIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_tres> Dbv0_0_38_job::getTres() const
{
    return m_Tres;
}

void Dbv0_0_38_job::setTres(const std::shared_ptr<Dbv0_0_38_job_tres>& value)
{
    m_Tres = value;
    m_TresIsSet = true;
}

bool Dbv0_0_38_job::tresIsSet() const
{
    return m_TresIsSet;
}

void Dbv0_0_38_job::unsetTres()
{
    m_TresIsSet = false;
}
utility::string_t Dbv0_0_38_job::getUser() const
{
    return m_User;
}

void Dbv0_0_38_job::setUser(const utility::string_t& value)
{
    m_User = value;
    m_UserIsSet = true;
}

bool Dbv0_0_38_job::userIsSet() const
{
    return m_UserIsSet;
}

void Dbv0_0_38_job::unsetUser()
{
    m_UserIsSet = false;
}
std::shared_ptr<Dbv0_0_38_job_wckey> Dbv0_0_38_job::getWckey() const
{
    return m_Wckey;
}

void Dbv0_0_38_job::setWckey(const std::shared_ptr<Dbv0_0_38_job_wckey>& value)
{
    m_Wckey = value;
    m_WckeyIsSet = true;
}

bool Dbv0_0_38_job::wckeyIsSet() const
{
    return m_WckeyIsSet;
}

void Dbv0_0_38_job::unsetWckey()
{
    m_WckeyIsSet = false;
}
utility::string_t Dbv0_0_38_job::getWorkingDirectory() const
{
    return m_Working_directory;
}

void Dbv0_0_38_job::setWorkingDirectory(const utility::string_t& value)
{
    m_Working_directory = value;
    m_Working_directoryIsSet = true;
}

bool Dbv0_0_38_job::workingDirectoryIsSet() const
{
    return m_Working_directoryIsSet;
}

void Dbv0_0_38_job::unsetWorking_directory()
{
    m_Working_directoryIsSet = false;
}
utility::string_t Dbv0_0_38_job::getContainer() const
{
    return m_Container;
}

void Dbv0_0_38_job::setContainer(const utility::string_t& value)
{
    m_Container = value;
    m_ContainerIsSet = true;
}

bool Dbv0_0_38_job::containerIsSet() const
{
    return m_ContainerIsSet;
}

void Dbv0_0_38_job::unsetContainer()
{
    m_ContainerIsSet = false;
}
}
}
}
}


