/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly()
{
    m_Count = 0;
    m_CountIsSet = false;
    m_Last_run = 0L;
    m_Last_runIsSet = false;
    m_DurationIsSet = false;
}

V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::~V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly()
{
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CountIsSet)
    {
        val[utility::conversions::to_string_t(U("count"))] = ModelBase::toJson(m_Count);
    }
    if(m_Last_runIsSet)
    {
        val[utility::conversions::to_string_t(U("last_run"))] = ModelBase::toJson(m_Last_run);
    }
    if(m_DurationIsSet)
    {
        val[utility::conversions::to_string_t(U("duration"))] = ModelBase::toJson(m_Duration);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("count"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("count")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCount);
            setCount(refVal_setCount);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("last_run"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("last_run")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setLastRun;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLastRun);
            setLastRun(refVal_setLastRun);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("duration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("duration")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly_duration> refVal_setDuration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDuration);
            setDuration(refVal_setDuration);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("count")), m_Count));
    }
    if(m_Last_runIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("last_run")), m_Last_run));
    }
    if(m_DurationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("duration")), m_Duration));
    }
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("count"))))
    {
        int32_t refVal_setCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("count"))), refVal_setCount );
        setCount(refVal_setCount);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("last_run"))))
    {
        int64_t refVal_setLastRun;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("last_run"))), refVal_setLastRun );
        setLastRun(refVal_setLastRun);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("duration"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly_duration> refVal_setDuration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("duration"))), refVal_setDuration );
        setDuration(refVal_setDuration);
    }
    return ok;
}

int32_t V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::getCount() const
{
    return m_Count;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::setCount(int32_t value)
{
    m_Count = value;
    m_CountIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::countIsSet() const
{
    return m_CountIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::unsetCount()
{
    m_CountIsSet = false;
}
int64_t V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::getLastRun() const
{
    return m_Last_run;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::setLastRun(int64_t value)
{
    m_Last_run = value;
    m_Last_runIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::lastRunIsSet() const
{
    return m_Last_runIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::unsetLast_run()
{
    m_Last_runIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly_duration> V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::getDuration() const
{
    return m_Duration;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::setDuration(const std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly_duration>& value)
{
    m_Duration = value;
    m_DurationIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::durationIsSet() const
{
    return m_DurationIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly::unsetDuration()
{
    m_DurationIsSet = false;
}
}
}
}
}


