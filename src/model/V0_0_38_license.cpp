/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_38_license.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_38_license::V0_0_38_license()
{
    m_LicenseName = utility::conversions::to_string_t("");
    m_LicenseNameIsSet = false;
    m_Total = 0;
    m_TotalIsSet = false;
    m_Used = 0;
    m_UsedIsSet = false;
    m_Free = 0;
    m_FreeIsSet = false;
    m_Reserved = 0;
    m_ReservedIsSet = false;
    m_Remote = false;
    m_RemoteIsSet = false;
}

V0_0_38_license::~V0_0_38_license()
{
}

void V0_0_38_license::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_38_license::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_LicenseNameIsSet)
    {
        val[utility::conversions::to_string_t(U("LicenseName"))] = ModelBase::toJson(m_LicenseName);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("Total"))] = ModelBase::toJson(m_Total);
    }
    if(m_UsedIsSet)
    {
        val[utility::conversions::to_string_t(U("Used"))] = ModelBase::toJson(m_Used);
    }
    if(m_FreeIsSet)
    {
        val[utility::conversions::to_string_t(U("Free"))] = ModelBase::toJson(m_Free);
    }
    if(m_ReservedIsSet)
    {
        val[utility::conversions::to_string_t(U("Reserved"))] = ModelBase::toJson(m_Reserved);
    }
    if(m_RemoteIsSet)
    {
        val[utility::conversions::to_string_t(U("Remote"))] = ModelBase::toJson(m_Remote);
    }

    return val;
}

bool V0_0_38_license::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("LicenseName"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("LicenseName")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setLicenseName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLicenseName);
            setLicenseName(refVal_setLicenseName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("Total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("Total")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("Used"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("Used")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setUsed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUsed);
            setUsed(refVal_setUsed);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("Free"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("Free")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setFree;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFree);
            setFree(refVal_setFree);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("Reserved"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("Reserved")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setReserved;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReserved);
            setReserved(refVal_setReserved);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("Remote"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("Remote")));
        if(!fieldValue.is_null())
        {
            bool refVal_setRemote;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemote);
            setRemote(refVal_setRemote);
        }
    }
    return ok;
}

void V0_0_38_license::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_LicenseNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("LicenseName")), m_LicenseName));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("Total")), m_Total));
    }
    if(m_UsedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("Used")), m_Used));
    }
    if(m_FreeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("Free")), m_Free));
    }
    if(m_ReservedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("Reserved")), m_Reserved));
    }
    if(m_RemoteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("Remote")), m_Remote));
    }
}

bool V0_0_38_license::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("LicenseName"))))
    {
        utility::string_t refVal_setLicenseName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("LicenseName"))), refVal_setLicenseName );
        setLicenseName(refVal_setLicenseName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("Total"))))
    {
        int32_t refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("Total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("Used"))))
    {
        int32_t refVal_setUsed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("Used"))), refVal_setUsed );
        setUsed(refVal_setUsed);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("Free"))))
    {
        int32_t refVal_setFree;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("Free"))), refVal_setFree );
        setFree(refVal_setFree);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("Reserved"))))
    {
        int32_t refVal_setReserved;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("Reserved"))), refVal_setReserved );
        setReserved(refVal_setReserved);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("Remote"))))
    {
        bool refVal_setRemote;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("Remote"))), refVal_setRemote );
        setRemote(refVal_setRemote);
    }
    return ok;
}

utility::string_t V0_0_38_license::getLicenseName() const
{
    return m_LicenseName;
}

void V0_0_38_license::setLicenseName(const utility::string_t& value)
{
    m_LicenseName = value;
    m_LicenseNameIsSet = true;
}

bool V0_0_38_license::licenseNameIsSet() const
{
    return m_LicenseNameIsSet;
}

void V0_0_38_license::unsetLicenseName()
{
    m_LicenseNameIsSet = false;
}
int32_t V0_0_38_license::getTotal() const
{
    return m_Total;
}

void V0_0_38_license::setTotal(int32_t value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool V0_0_38_license::totalIsSet() const
{
    return m_TotalIsSet;
}

void V0_0_38_license::unsetTotal()
{
    m_TotalIsSet = false;
}
int32_t V0_0_38_license::getUsed() const
{
    return m_Used;
}

void V0_0_38_license::setUsed(int32_t value)
{
    m_Used = value;
    m_UsedIsSet = true;
}

bool V0_0_38_license::usedIsSet() const
{
    return m_UsedIsSet;
}

void V0_0_38_license::unsetUsed()
{
    m_UsedIsSet = false;
}
int32_t V0_0_38_license::getFree() const
{
    return m_Free;
}

void V0_0_38_license::setFree(int32_t value)
{
    m_Free = value;
    m_FreeIsSet = true;
}

bool V0_0_38_license::freeIsSet() const
{
    return m_FreeIsSet;
}

void V0_0_38_license::unsetFree()
{
    m_FreeIsSet = false;
}
int32_t V0_0_38_license::getReserved() const
{
    return m_Reserved;
}

void V0_0_38_license::setReserved(int32_t value)
{
    m_Reserved = value;
    m_ReservedIsSet = true;
}

bool V0_0_38_license::reservedIsSet() const
{
    return m_ReservedIsSet;
}

void V0_0_38_license::unsetReserved()
{
    m_ReservedIsSet = false;
}
bool V0_0_38_license::isRemote() const
{
    return m_Remote;
}

void V0_0_38_license::setRemote(bool value)
{
    m_Remote = value;
    m_RemoteIsSet = true;
}

bool V0_0_38_license::remoteIsSet() const
{
    return m_RemoteIsSet;
}

void V0_0_38_license::unsetRemote()
{
    m_RemoteIsSet = false;
}
}
}
}
}


