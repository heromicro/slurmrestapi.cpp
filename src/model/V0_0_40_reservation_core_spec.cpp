/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_40_reservation_core_spec.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_40_reservation_core_spec::V0_0_40_reservation_core_spec()
{
    m_Node = utility::conversions::to_string_t("");
    m_NodeIsSet = false;
    m_Core = utility::conversions::to_string_t("");
    m_CoreIsSet = false;
}

V0_0_40_reservation_core_spec::~V0_0_40_reservation_core_spec()
{
}

void V0_0_40_reservation_core_spec::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_40_reservation_core_spec::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_NodeIsSet)
    {
        val[utility::conversions::to_string_t(U("node"))] = ModelBase::toJson(m_Node);
    }
    if(m_CoreIsSet)
    {
        val[utility::conversions::to_string_t(U("core"))] = ModelBase::toJson(m_Core);
    }

    return val;
}

bool V0_0_40_reservation_core_spec::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("node"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("node")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setNode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNode);
            setNode(refVal_setNode);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("core"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("core")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setCore;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCore);
            setCore(refVal_setCore);
        }
    }
    return ok;
}

void V0_0_40_reservation_core_spec::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_NodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("node")), m_Node));
    }
    if(m_CoreIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("core")), m_Core));
    }
}

bool V0_0_40_reservation_core_spec::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("node"))))
    {
        utility::string_t refVal_setNode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("node"))), refVal_setNode );
        setNode(refVal_setNode);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("core"))))
    {
        utility::string_t refVal_setCore;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("core"))), refVal_setCore );
        setCore(refVal_setCore);
    }
    return ok;
}

utility::string_t V0_0_40_reservation_core_spec::getNode() const
{
    return m_Node;
}

void V0_0_40_reservation_core_spec::setNode(const utility::string_t& value)
{
    m_Node = value;
    m_NodeIsSet = true;
}

bool V0_0_40_reservation_core_spec::nodeIsSet() const
{
    return m_NodeIsSet;
}

void V0_0_40_reservation_core_spec::unsetNode()
{
    m_NodeIsSet = false;
}
utility::string_t V0_0_40_reservation_core_spec::getCore() const
{
    return m_Core;
}

void V0_0_40_reservation_core_spec::setCore(const utility::string_t& value)
{
    m_Core = value;
    m_CoreIsSet = true;
}

bool V0_0_40_reservation_core_spec::coreIsSet() const
{
    return m_CoreIsSet;
}

void V0_0_40_reservation_core_spec::unsetCore()
{
    m_CoreIsSet = false;
}
}
}
}
}


