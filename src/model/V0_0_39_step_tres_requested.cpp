/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_39_step_tres_requested.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {



V0_0_39_step_tres_requested::V0_0_39_step_tres_requested()
{
    m_MaxIsSet = false;
    m_MinIsSet = false;
    m_AverageIsSet = false;
    m_TotalIsSet = false;
}

V0_0_39_step_tres_requested::~V0_0_39_step_tres_requested()
{
}

void V0_0_39_step_tres_requested::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_39_step_tres_requested::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MaxIsSet)
    {
        val[utility::conversions::to_string_t(U("max"))] = ModelBase::toJson(m_Max);
    }
    if(m_MinIsSet)
    {
        val[utility::conversions::to_string_t(U("min"))] = ModelBase::toJson(m_Min);
    }
    if(m_AverageIsSet)
    {
        val[utility::conversions::to_string_t(U("average"))] = ModelBase::toJson(m_Average);
    }
    if(m_TotalIsSet)
    {
        val[utility::conversions::to_string_t(U("total"))] = ModelBase::toJson(m_Total);
    }

    return val;
}

bool V0_0_39_step_tres_requested::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("max"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("max")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setMax;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMax);
            setMax(refVal_setMax);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("min"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("min")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setMin;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMin);
            setMin(refVal_setMin);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("average"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("average")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setAverage;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAverage);
            setAverage(refVal_setAverage);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("total"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("total")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setTotal;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotal);
            setTotal(refVal_setTotal);
        }
    }
    return ok;
}

void V0_0_39_step_tres_requested::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MaxIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("max")), m_Max));
    }
    if(m_MinIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("min")), m_Min));
    }
    if(m_AverageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("average")), m_Average));
    }
    if(m_TotalIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("total")), m_Total));
    }
}

bool V0_0_39_step_tres_requested::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("max"))))
    {
        std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setMax;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("max"))), refVal_setMax );
        setMax(refVal_setMax);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("min"))))
    {
        std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setMin;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("min"))), refVal_setMin );
        setMin(refVal_setMin);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("average"))))
    {
        std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setAverage;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("average"))), refVal_setAverage );
        setAverage(refVal_setAverage);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("total"))))
    {
        std::vector<std::shared_ptr<V0_0_39_tres>> refVal_setTotal;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("total"))), refVal_setTotal );
        setTotal(refVal_setTotal);
    }
    return ok;
}

std::vector<std::shared_ptr<V0_0_39_tres>>& V0_0_39_step_tres_requested::getMax()
{
    return m_Max;
}

void V0_0_39_step_tres_requested::setMax(const std::vector<std::shared_ptr<V0_0_39_tres>>& value)
{
    m_Max = value;
    m_MaxIsSet = true;
}

bool V0_0_39_step_tres_requested::maxIsSet() const
{
    return m_MaxIsSet;
}

void V0_0_39_step_tres_requested::unsetMax()
{
    m_MaxIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_tres>>& V0_0_39_step_tres_requested::getMin()
{
    return m_Min;
}

void V0_0_39_step_tres_requested::setMin(const std::vector<std::shared_ptr<V0_0_39_tres>>& value)
{
    m_Min = value;
    m_MinIsSet = true;
}

bool V0_0_39_step_tres_requested::minIsSet() const
{
    return m_MinIsSet;
}

void V0_0_39_step_tres_requested::unsetMin()
{
    m_MinIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_tres>>& V0_0_39_step_tres_requested::getAverage()
{
    return m_Average;
}

void V0_0_39_step_tres_requested::setAverage(const std::vector<std::shared_ptr<V0_0_39_tres>>& value)
{
    m_Average = value;
    m_AverageIsSet = true;
}

bool V0_0_39_step_tres_requested::averageIsSet() const
{
    return m_AverageIsSet;
}

void V0_0_39_step_tres_requested::unsetAverage()
{
    m_AverageIsSet = false;
}
std::vector<std::shared_ptr<V0_0_39_tres>>& V0_0_39_step_tres_requested::getTotal()
{
    return m_Total;
}

void V0_0_39_step_tres_requested::setTotal(const std::vector<std::shared_ptr<V0_0_39_tres>>& value)
{
    m_Total = value;
    m_TotalIsSet = true;
}

bool V0_0_39_step_tres_requested::totalIsSet() const
{
    return m_TotalIsSet;
}

void V0_0_39_step_tres_requested::unsetTotal()
{
    m_TotalIsSet = false;
}
}
}
}
}


