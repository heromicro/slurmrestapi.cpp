/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups()
{
    m_HourlyIsSet = false;
    m_DailyIsSet = false;
    m_MonthlyIsSet = false;
}

V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::~V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups()
{
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::validate()
{
    // TODO: implement validation
}

web::json::value V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_HourlyIsSet)
    {
        val[utility::conversions::to_string_t(U("hourly"))] = ModelBase::toJson(m_Hourly);
    }
    if(m_DailyIsSet)
    {
        val[utility::conversions::to_string_t(U("daily"))] = ModelBase::toJson(m_Daily);
    }
    if(m_MonthlyIsSet)
    {
        val[utility::conversions::to_string_t(U("monthly"))] = ModelBase::toJson(m_Monthly);
    }

    return val;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("hourly"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("hourly")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_hourly> refVal_setHourly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHourly);
            setHourly(refVal_setHourly);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("daily"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("daily")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_daily> refVal_setDaily;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDaily);
            setDaily(refVal_setDaily);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("monthly"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("monthly")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly> refVal_setMonthly;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMonthly);
            setMonthly(refVal_setMonthly);
        }
    }
    return ok;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_HourlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("hourly")), m_Hourly));
    }
    if(m_DailyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("daily")), m_Daily));
    }
    if(m_MonthlyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("monthly")), m_Monthly));
    }
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("hourly"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_hourly> refVal_setHourly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("hourly"))), refVal_setHourly );
        setHourly(refVal_setHourly);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("daily"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_daily> refVal_setDaily;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("daily"))), refVal_setDaily );
        setDaily(refVal_setDaily);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("monthly"))))
    {
        std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly> refVal_setMonthly;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("monthly"))), refVal_setMonthly );
        setMonthly(refVal_setMonthly);
    }
    return ok;
}

std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_hourly> V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::getHourly() const
{
    return m_Hourly;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::setHourly(const std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_hourly>& value)
{
    m_Hourly = value;
    m_HourlyIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::hourlyIsSet() const
{
    return m_HourlyIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::unsetHourly()
{
    m_HourlyIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_daily> V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::getDaily() const
{
    return m_Daily;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::setDaily(const std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_daily>& value)
{
    m_Daily = value;
    m_DailyIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::dailyIsSet() const
{
    return m_DailyIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::unsetDaily()
{
    m_DailyIsSet = false;
}
std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly> V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::getMonthly() const
{
    return m_Monthly;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::setMonthly(const std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups_monthly>& value)
{
    m_Monthly = value;
    m_MonthlyIsSet = true;
}

bool V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::monthlyIsSet() const
{
    return m_MonthlyIsSet;
}

void V0_0_41_openapi_slurmdbd_stats_resp_statistics_rollups::unsetMonthly()
{
    m_MonthlyIsSet = false;
}
}
}
}
}


