/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_39_ext_sensors_data.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_ext_sensors_data_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_ext_sensors_data_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_39_uint32_no_val.h"
#include "slurmrestapi/model/V0_0_39_uint64_no_val.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_39_uint64_no_val;
class V0_0_39_uint32_no_val;

/// <summary>
/// 
/// </summary>
class  V0_0_39_ext_sensors_data
    : public ModelBase
{
public:
    V0_0_39_ext_sensors_data();
    virtual ~V0_0_39_ext_sensors_data();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_39_ext_sensors_data members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint64_no_val> getConsumedEnergy() const;
    bool consumedEnergyIsSet() const;
    void unsetConsumed_energy();

    void setConsumedEnergy(const std::shared_ptr<V0_0_39_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint32_no_val> getTemperature() const;
    bool temperatureIsSet() const;
    void unsetTemperature();

    void setTemperature(const std::shared_ptr<V0_0_39_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getEnergyUpdateTime() const;
    bool energyUpdateTimeIsSet() const;
    void unsetEnergy_update_time();

    void setEnergyUpdateTime(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCurrentWatts() const;
    bool currentWattsIsSet() const;
    void unsetCurrent_watts();

    void setCurrentWatts(int32_t value);


protected:
    std::shared_ptr<V0_0_39_uint64_no_val> m_Consumed_energy;
    bool m_Consumed_energyIsSet;
    std::shared_ptr<V0_0_39_uint32_no_val> m_Temperature;
    bool m_TemperatureIsSet;
    int64_t m_Energy_update_time;
    bool m_Energy_update_timeIsSet;
    int32_t m_Current_watts;
    bool m_Current_wattsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_ext_sensors_data_H_ */
