/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_39_assoc.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_assoc_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_assoc_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_39_uint32_no_val.h"
#include "slurmrestapi/model/V0_0_39_assoc_min.h"
#include "slurmrestapi/model/V0_0_39_assoc_usage.h"
#include "slurmrestapi/model/V0_0_39_assoc_max.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "slurmrestapi/model/V0_0_39_assoc_default.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_39_assoc_default;
class V0_0_39_assoc_max;
class V0_0_39_assoc_min;
class V0_0_39_uint32_no_val;
class V0_0_39_assoc_usage;

/// <summary>
/// 
/// </summary>
class  V0_0_39_assoc
    : public ModelBase
{
public:
    V0_0_39_assoc();
    virtual ~V0_0_39_assoc();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_39_assoc members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCluster() const;
    bool clusterIsSet() const;
    void unsetCluster();

    void setCluster(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_assoc_default> getRDefault() const;
    bool rDefaultIsSet() const;
    void unsetr_default();

    void setRDefault(const std::shared_ptr<V0_0_39_assoc_default>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_assoc_max> getMax() const;
    bool maxIsSet() const;
    void unsetMax();

    void setMax(const std::shared_ptr<V0_0_39_assoc_max>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isIsDefault() const;
    bool isDefaultIsSet() const;
    void unsetIs_default();

    void setIsDefault(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_assoc_min> getMin() const;
    bool minIsSet() const;
    void unsetMin();

    void setMin(const std::shared_ptr<V0_0_39_assoc_min>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getParentAccount() const;
    bool parentAccountIsSet() const;
    void unsetParent_account();

    void setParentAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartition() const;
    bool partitionIsSet() const;
    void unsetPartition();

    void setPartition(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint32_no_val> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(const std::shared_ptr<V0_0_39_uint32_no_val>& value);

    /// <summary>
    /// List of QOS names
    /// </summary>
    std::vector<utility::string_t>& getQos();
    bool qosIsSet() const;
    void unsetQos();

    void setQos(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSharesRaw() const;
    bool sharesRawIsSet() const;
    void unsetShares_raw();

    void setSharesRaw(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_assoc_usage> getUsage() const;
    bool usageIsSet() const;
    void unsetUsage();

    void setUsage(const std::shared_ptr<V0_0_39_assoc_usage>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);


protected:
    utility::string_t m_Account;
    bool m_AccountIsSet;
    utility::string_t m_Cluster;
    bool m_ClusterIsSet;
    std::shared_ptr<V0_0_39_assoc_default> m_r_default;
    bool m_r_defaultIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    std::shared_ptr<V0_0_39_assoc_max> m_Max;
    bool m_MaxIsSet;
    bool m_Is_default;
    bool m_Is_defaultIsSet;
    std::shared_ptr<V0_0_39_assoc_min> m_Min;
    bool m_MinIsSet;
    utility::string_t m_Parent_account;
    bool m_Parent_accountIsSet;
    utility::string_t m_Partition;
    bool m_PartitionIsSet;
    std::shared_ptr<V0_0_39_uint32_no_val> m_Priority;
    bool m_PriorityIsSet;
    std::vector<utility::string_t> m_Qos;
    bool m_QosIsSet;
    int32_t m_Shares_raw;
    bool m_Shares_rawIsSet;
    std::shared_ptr<V0_0_39_assoc_usage> m_Usage;
    bool m_UsageIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_assoc_H_ */
