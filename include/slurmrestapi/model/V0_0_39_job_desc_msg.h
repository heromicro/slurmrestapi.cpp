/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_39_job_desc_msg.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_job_desc_msg_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_job_desc_msg_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_39_uint32_no_val.h"
#include "slurmrestapi/model/V0_0_39_uint64_no_val.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/V0_0_39_cron_entry.h"
#include "slurmrestapi/model/V0_0_39_uint16_no_val.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_39_cron_entry;
class V0_0_39_uint32_no_val;
class V0_0_39_uint16_no_val;
class V0_0_39_uint64_no_val;

/// <summary>
/// 
/// </summary>
class  V0_0_39_job_desc_msg
    : public ModelBase
{
public:
    V0_0_39_job_desc_msg();
    virtual ~V0_0_39_job_desc_msg();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_39_job_desc_msg members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAccountGatherFrequency() const;
    bool accountGatherFrequencyIsSet() const;
    void unsetAccount_gather_frequency();

    void setAccountGatherFrequency(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAdminComment() const;
    bool adminCommentIsSet() const;
    void unsetAdmin_comment();

    void setAdminComment(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAllocationNodeList() const;
    bool allocationNodeListIsSet() const;
    void unsetAllocation_node_list();

    void setAllocationNodeList(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAllocationNodePort() const;
    bool allocationNodePortIsSet() const;
    void unsetAllocation_node_port();

    void setAllocationNodePort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getArgv();
    bool argvIsSet() const;
    void unsetArgv();

    void setArgv(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getArray() const;
    bool arrayIsSet() const;
    void unsetarray();

    void setArray(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBatchFeatures() const;
    bool batchFeaturesIsSet() const;
    void unsetBatch_features();

    void setBatchFeatures(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getBeginTime() const;
    bool beginTimeIsSet() const;
    void unsetBegin_time();

    void setBeginTime(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBurstBuffer() const;
    bool burstBufferIsSet() const;
    void unsetBurst_buffer();

    void setBurstBuffer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClusters() const;
    bool clustersIsSet() const;
    void unsetClusters();

    void setClusters(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClusterConstraint() const;
    bool clusterConstraintIsSet() const;
    void unsetCluster_constraint();

    void setClusterConstraint(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getComment() const;
    bool commentIsSet() const;
    void unsetComment();

    void setComment(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isContiguous() const;
    bool contiguousIsSet() const;
    void unsetContiguous();

    void setContiguous(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContainer() const;
    bool containerIsSet() const;
    void unsetContainer();

    void setContainer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getContainerId() const;
    bool containerIdIsSet() const;
    void unsetContainer_id();

    void setContainerId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCoreSpecification() const;
    bool coreSpecificationIsSet() const;
    void unsetCore_specification();

    void setCoreSpecification(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getThreadSpecification() const;
    bool threadSpecificationIsSet() const;
    void unsetThread_specification();

    void setThreadSpecification(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpuBinding() const;
    bool cpuBindingIsSet() const;
    void unsetCpu_binding();

    void setCpuBinding(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getCpuBindingFlags();
    bool cpuBindingFlagsIsSet() const;
    void unsetCpu_binding_flags();

    void setCpuBindingFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpuFrequency() const;
    bool cpuFrequencyIsSet() const;
    void unsetCpu_frequency();

    void setCpuFrequency(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCpusPerTres() const;
    bool cpusPerTresIsSet() const;
    void unsetCpus_per_tres();

    void setCpusPerTres(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_cron_entry> getCrontab() const;
    bool crontabIsSet() const;
    void unsetCrontab();

    void setCrontab(const std::shared_ptr<V0_0_39_cron_entry>& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getDeadline() const;
    bool deadlineIsSet() const;
    void unsetDeadline();

    void setDeadline(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDelayBoot() const;
    bool delayBootIsSet() const;
    void unsetDelay_boot();

    void setDelayBoot(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDependency() const;
    bool dependencyIsSet() const;
    void unsetDependency();

    void setDependency(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getEndTime() const;
    bool endTimeIsSet() const;
    void unsetEnd_time();

    void setEndTime(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getEnvironment();
    bool environmentIsSet() const;
    void unsetEnvironment();

    void setEnvironment(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getExcludedNodes();
    bool excludedNodesIsSet() const;
    void unsetExcluded_nodes();

    void setExcludedNodes(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExtra() const;
    bool extraIsSet() const;
    void unsetExtra();

    void setExtra(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getConstraints() const;
    bool constraintsIsSet() const;
    void unsetConstraints();

    void setConstraints(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGroupId() const;
    bool groupIdIsSet() const;
    void unsetGroup_id();

    void setGroupId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getHetjobGroup() const;
    bool hetjobGroupIsSet() const;
    void unsetHetjob_group();

    void setHetjobGroup(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isImmediate() const;
    bool immediateIsSet() const;
    void unsetImmediate();

    void setImmediate(bool value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getJobId() const;
    bool jobIdIsSet() const;
    void unsetJob_id();

    void setJobId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isKillOnNodeFail() const;
    bool killOnNodeFailIsSet() const;
    void unsetKill_on_node_fail();

    void setKillOnNodeFail(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getLicenses() const;
    bool licensesIsSet() const;
    void unsetLicenses();

    void setLicenses(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getMailType();
    bool mailTypeIsSet() const;
    void unsetMail_type();

    void setMailType(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMailUser() const;
    bool mailUserIsSet() const;
    void unsetMail_user();

    void setMailUser(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMcsLabel() const;
    bool mcsLabelIsSet() const;
    void unsetMcs_label();

    void setMcsLabel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMemoryBinding() const;
    bool memoryBindingIsSet() const;
    void unsetMemory_binding();

    void setMemoryBinding(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getMemoryBindingType();
    bool memoryBindingTypeIsSet() const;
    void unsetMemory_binding_type();

    void setMemoryBindingType(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMemoryPerTres() const;
    bool memoryPerTresIsSet() const;
    void unsetMemory_per_tres();

    void setMemoryPerTres(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNetwork() const;
    bool networkIsSet() const;
    void unsetNetwork();

    void setNetwork(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNice() const;
    bool niceIsSet() const;
    void unsetNice();

    void setNice(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTasks() const;
    bool tasksIsSet() const;
    void unsetTasks();

    void setTasks(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getOpenMode();
    bool openModeIsSet() const;
    void unsetOpen_mode();

    void setOpenMode(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getReservePorts() const;
    bool reservePortsIsSet() const;
    void unsetReserve_ports();

    void setReservePorts(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    bool isOvercommit() const;
    bool overcommitIsSet() const;
    void unsetOvercommit();

    void setOvercommit(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPartition() const;
    bool partitionIsSet() const;
    void unsetPartition();

    void setPartition(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getDistributionPlaneSize() const;
    bool distributionPlaneSizeIsSet() const;
    void unsetDistribution_plane_size();

    void setDistributionPlaneSize(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getPowerFlags();
    bool powerFlagsIsSet() const;
    void unsetPower_flags();

    void setPowerFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getPrefer() const;
    bool preferIsSet() const;
    void unsetPrefer();

    void setPrefer(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getProfile();
    bool profileIsSet() const;
    void unsetProfile();

    void setProfile(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getQos() const;
    bool qosIsSet() const;
    void unsetQos();

    void setQos(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isReboot() const;
    bool rebootIsSet() const;
    void unsetReboot();

    void setReboot(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getRequiredNodes();
    bool requiredNodesIsSet() const;
    void unsetRequired_nodes();

    void setRequiredNodes(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    bool isRequeue() const;
    bool requeueIsSet() const;
    void unsetRequeue();

    void setRequeue(bool value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReservation() const;
    bool reservationIsSet() const;
    void unsetReservation();

    void setReservation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getScript() const;
    bool scriptIsSet() const;
    void unsetScript();

    void setScript(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getShared();
    bool sharedIsSet() const;
    void unsetShared();

    void setShared(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getExclusive();
    bool exclusiveIsSet() const;
    void unsetExclusive();

    void setExclusive(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSiteFactor() const;
    bool siteFactorIsSet() const;
    void unsetSite_factor();

    void setSiteFactor(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getSpankEnvironment();
    bool spankEnvironmentIsSet() const;
    void unsetSpank_environment();

    void setSpankEnvironment(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDistribution() const;
    bool distributionIsSet() const;
    void unsetDistribution();

    void setDistribution(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint32_no_val> getTimeLimit() const;
    bool timeLimitIsSet() const;
    void unsetTime_limit();

    void setTimeLimit(const std::shared_ptr<V0_0_39_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint32_no_val> getTimeMinimum() const;
    bool timeMinimumIsSet() const;
    void unsetTime_minimum();

    void setTimeMinimum(const std::shared_ptr<V0_0_39_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresBind() const;
    bool tresBindIsSet() const;
    void unsetTres_bind();

    void setTresBind(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresFreq() const;
    bool tresFreqIsSet() const;
    void unsetTres_freq();

    void setTresFreq(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresPerJob() const;
    bool tresPerJobIsSet() const;
    void unsetTres_per_job();

    void setTresPerJob(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresPerNode() const;
    bool tresPerNodeIsSet() const;
    void unsetTres_per_node();

    void setTresPerNode(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresPerSocket() const;
    bool tresPerSocketIsSet() const;
    void unsetTres_per_socket();

    void setTresPerSocket(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresPerTask() const;
    bool tresPerTaskIsSet() const;
    void unsetTres_per_task();

    void setTresPerTask(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    bool isWaitAllNodes() const;
    bool waitAllNodesIsSet() const;
    void unsetWait_all_nodes();

    void setWaitAllNodes(bool value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getKillWarningFlags();
    bool killWarningFlagsIsSet() const;
    void unsetKill_warning_flags();

    void setKillWarningFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getKillWarningSignal() const;
    bool killWarningSignalIsSet() const;
    void unsetKill_warning_signal();

    void setKillWarningSignal(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint16_no_val> getKillWarningDelay() const;
    bool killWarningDelayIsSet() const;
    void unsetKill_warning_delay();

    void setKillWarningDelay(const std::shared_ptr<V0_0_39_uint16_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getCurrentWorkingDirectory() const;
    bool currentWorkingDirectoryIsSet() const;
    void unsetCurrent_working_directory();

    void setCurrentWorkingDirectory(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCpusPerTask() const;
    bool cpusPerTaskIsSet() const;
    void unsetCpus_per_task();

    void setCpusPerTask(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumCpus() const;
    bool minimumCpusIsSet() const;
    void unsetMinimum_cpus();

    void setMinimumCpus(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaximumCpus() const;
    bool maximumCpusIsSet() const;
    void unsetMaximum_cpus();

    void setMaximumCpus(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getNodes() const;
    bool nodesIsSet() const;
    void unsetNodes();

    void setNodes(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumNodes() const;
    bool minimumNodesIsSet() const;
    void unsetMinimum_nodes();

    void setMinimumNodes(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMaximumNodes() const;
    bool maximumNodesIsSet() const;
    void unsetMaximum_nodes();

    void setMaximumNodes(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumBoardsPerNode() const;
    bool minimumBoardsPerNodeIsSet() const;
    void unsetMinimum_boards_per_node();

    void setMinimumBoardsPerNode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumSocketsPerBoard() const;
    bool minimumSocketsPerBoardIsSet() const;
    void unsetMinimum_sockets_per_board();

    void setMinimumSocketsPerBoard(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSocketsPerNode() const;
    bool socketsPerNodeIsSet() const;
    void unsetSockets_per_node();

    void setSocketsPerNode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getThreadsPerCore() const;
    bool threadsPerCoreIsSet() const;
    void unsetThreads_per_core();

    void setThreadsPerCore(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTasksPerNode() const;
    bool tasksPerNodeIsSet() const;
    void unsetTasks_per_node();

    void setTasksPerNode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTasksPerSocket() const;
    bool tasksPerSocketIsSet() const;
    void unsetTasks_per_socket();

    void setTasksPerSocket(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTasksPerCore() const;
    bool tasksPerCoreIsSet() const;
    void unsetTasks_per_core();

    void setTasksPerCore(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTasksPerBoard() const;
    bool tasksPerBoardIsSet() const;
    void unsetTasks_per_board();

    void setTasksPerBoard(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getNtasksPerTres() const;
    bool ntasksPerTresIsSet() const;
    void unsetNtasks_per_tres();

    void setNtasksPerTres(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getMinimumCpusPerNode() const;
    bool minimumCpusPerNodeIsSet() const;
    void unsetMinimum_cpus_per_node();

    void setMinimumCpusPerNode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint64_no_val> getMemoryPerCpu() const;
    bool memoryPerCpuIsSet() const;
    void unsetMemory_per_cpu();

    void setMemoryPerCpu(const std::shared_ptr<V0_0_39_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint64_no_val> getMemoryPerNode() const;
    bool memoryPerNodeIsSet() const;
    void unsetMemory_per_node();

    void setMemoryPerNode(const std::shared_ptr<V0_0_39_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTemporaryDiskPerNode() const;
    bool temporaryDiskPerNodeIsSet() const;
    void unsetTemporary_disk_per_node();

    void setTemporaryDiskPerNode(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSelinuxContext() const;
    bool selinuxContextIsSet() const;
    void unsetSelinux_context();

    void setSelinuxContext(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint32_no_val> getRequiredSwitches() const;
    bool requiredSwitchesIsSet() const;
    void unsetRequired_switches();

    void setRequiredSwitches(const std::shared_ptr<V0_0_39_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStandardError() const;
    bool standardErrorIsSet() const;
    void unsetStandard_error();

    void setStandardError(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStandardInput() const;
    bool standardInputIsSet() const;
    void unsetStandard_input();

    void setStandardInput(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getStandardOutput() const;
    bool standardOutputIsSet() const;
    void unsetStandard_output();

    void setStandardOutput(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getWaitForSwitch() const;
    bool waitForSwitchIsSet() const;
    void unsetWait_for_switch();

    void setWaitForSwitch(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getWckey() const;
    bool wckeyIsSet() const;
    void unsetWckey();

    void setWckey(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getX11();
    bool x11IsSet() const;
    void unsetX11();

    void setX11(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getX11MagicCookie() const;
    bool x11MagicCookieIsSet() const;
    void unsetX11_magic_cookie();

    void setX11MagicCookie(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getX11TargetHost() const;
    bool x11TargetHostIsSet() const;
    void unsetX11_target_host();

    void setX11TargetHost(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getX11TargetPort() const;
    bool x11TargetPortIsSet() const;
    void unsetX11_target_port();

    void setX11TargetPort(int32_t value);


protected:
    utility::string_t m_Account;
    bool m_AccountIsSet;
    utility::string_t m_Account_gather_frequency;
    bool m_Account_gather_frequencyIsSet;
    utility::string_t m_Admin_comment;
    bool m_Admin_commentIsSet;
    utility::string_t m_Allocation_node_list;
    bool m_Allocation_node_listIsSet;
    int32_t m_Allocation_node_port;
    bool m_Allocation_node_portIsSet;
    std::vector<utility::string_t> m_Argv;
    bool m_ArgvIsSet;
    utility::string_t m_array;
    bool m_arrayIsSet;
    utility::string_t m_Batch_features;
    bool m_Batch_featuresIsSet;
    int64_t m_Begin_time;
    bool m_Begin_timeIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    utility::string_t m_Burst_buffer;
    bool m_Burst_bufferIsSet;
    utility::string_t m_Clusters;
    bool m_ClustersIsSet;
    utility::string_t m_Cluster_constraint;
    bool m_Cluster_constraintIsSet;
    utility::string_t m_Comment;
    bool m_CommentIsSet;
    bool m_Contiguous;
    bool m_ContiguousIsSet;
    utility::string_t m_Container;
    bool m_ContainerIsSet;
    utility::string_t m_Container_id;
    bool m_Container_idIsSet;
    int32_t m_Core_specification;
    bool m_Core_specificationIsSet;
    int32_t m_Thread_specification;
    bool m_Thread_specificationIsSet;
    utility::string_t m_Cpu_binding;
    bool m_Cpu_bindingIsSet;
    std::vector<utility::string_t> m_Cpu_binding_flags;
    bool m_Cpu_binding_flagsIsSet;
    utility::string_t m_Cpu_frequency;
    bool m_Cpu_frequencyIsSet;
    utility::string_t m_Cpus_per_tres;
    bool m_Cpus_per_tresIsSet;
    std::shared_ptr<V0_0_39_cron_entry> m_Crontab;
    bool m_CrontabIsSet;
    int64_t m_Deadline;
    bool m_DeadlineIsSet;
    int32_t m_Delay_boot;
    bool m_Delay_bootIsSet;
    utility::string_t m_Dependency;
    bool m_DependencyIsSet;
    int64_t m_End_time;
    bool m_End_timeIsSet;
    std::vector<utility::string_t> m_Environment;
    bool m_EnvironmentIsSet;
    std::vector<utility::string_t> m_Excluded_nodes;
    bool m_Excluded_nodesIsSet;
    utility::string_t m_Extra;
    bool m_ExtraIsSet;
    utility::string_t m_Constraints;
    bool m_ConstraintsIsSet;
    utility::string_t m_Group_id;
    bool m_Group_idIsSet;
    int32_t m_Hetjob_group;
    bool m_Hetjob_groupIsSet;
    bool m_Immediate;
    bool m_ImmediateIsSet;
    int32_t m_Job_id;
    bool m_Job_idIsSet;
    bool m_Kill_on_node_fail;
    bool m_Kill_on_node_failIsSet;
    utility::string_t m_Licenses;
    bool m_LicensesIsSet;
    std::vector<utility::string_t> m_Mail_type;
    bool m_Mail_typeIsSet;
    utility::string_t m_Mail_user;
    bool m_Mail_userIsSet;
    utility::string_t m_Mcs_label;
    bool m_Mcs_labelIsSet;
    utility::string_t m_Memory_binding;
    bool m_Memory_bindingIsSet;
    std::vector<utility::string_t> m_Memory_binding_type;
    bool m_Memory_binding_typeIsSet;
    utility::string_t m_Memory_per_tres;
    bool m_Memory_per_tresIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Network;
    bool m_NetworkIsSet;
    int32_t m_Nice;
    bool m_NiceIsSet;
    int32_t m_Tasks;
    bool m_TasksIsSet;
    std::vector<utility::string_t> m_Open_mode;
    bool m_Open_modeIsSet;
    int32_t m_Reserve_ports;
    bool m_Reserve_portsIsSet;
    bool m_Overcommit;
    bool m_OvercommitIsSet;
    utility::string_t m_Partition;
    bool m_PartitionIsSet;
    int32_t m_Distribution_plane_size;
    bool m_Distribution_plane_sizeIsSet;
    std::vector<utility::string_t> m_Power_flags;
    bool m_Power_flagsIsSet;
    utility::string_t m_Prefer;
    bool m_PreferIsSet;
    int32_t m_Priority;
    bool m_PriorityIsSet;
    std::vector<utility::string_t> m_Profile;
    bool m_ProfileIsSet;
    utility::string_t m_Qos;
    bool m_QosIsSet;
    bool m_Reboot;
    bool m_RebootIsSet;
    std::vector<utility::string_t> m_Required_nodes;
    bool m_Required_nodesIsSet;
    bool m_Requeue;
    bool m_RequeueIsSet;
    utility::string_t m_Reservation;
    bool m_ReservationIsSet;
    utility::string_t m_Script;
    bool m_ScriptIsSet;
    std::vector<utility::string_t> m_Shared;
    bool m_SharedIsSet;
    std::vector<utility::string_t> m_Exclusive;
    bool m_ExclusiveIsSet;
    int32_t m_Site_factor;
    bool m_Site_factorIsSet;
    std::vector<utility::string_t> m_Spank_environment;
    bool m_Spank_environmentIsSet;
    utility::string_t m_Distribution;
    bool m_DistributionIsSet;
    std::shared_ptr<V0_0_39_uint32_no_val> m_Time_limit;
    bool m_Time_limitIsSet;
    std::shared_ptr<V0_0_39_uint32_no_val> m_Time_minimum;
    bool m_Time_minimumIsSet;
    utility::string_t m_Tres_bind;
    bool m_Tres_bindIsSet;
    utility::string_t m_Tres_freq;
    bool m_Tres_freqIsSet;
    utility::string_t m_Tres_per_job;
    bool m_Tres_per_jobIsSet;
    utility::string_t m_Tres_per_node;
    bool m_Tres_per_nodeIsSet;
    utility::string_t m_Tres_per_socket;
    bool m_Tres_per_socketIsSet;
    utility::string_t m_Tres_per_task;
    bool m_Tres_per_taskIsSet;
    utility::string_t m_User_id;
    bool m_User_idIsSet;
    bool m_Wait_all_nodes;
    bool m_Wait_all_nodesIsSet;
    std::vector<utility::string_t> m_Kill_warning_flags;
    bool m_Kill_warning_flagsIsSet;
    utility::string_t m_Kill_warning_signal;
    bool m_Kill_warning_signalIsSet;
    std::shared_ptr<V0_0_39_uint16_no_val> m_Kill_warning_delay;
    bool m_Kill_warning_delayIsSet;
    utility::string_t m_Current_working_directory;
    bool m_Current_working_directoryIsSet;
    int32_t m_Cpus_per_task;
    bool m_Cpus_per_taskIsSet;
    int32_t m_Minimum_cpus;
    bool m_Minimum_cpusIsSet;
    int32_t m_Maximum_cpus;
    bool m_Maximum_cpusIsSet;
    utility::string_t m_Nodes;
    bool m_NodesIsSet;
    int32_t m_Minimum_nodes;
    bool m_Minimum_nodesIsSet;
    int32_t m_Maximum_nodes;
    bool m_Maximum_nodesIsSet;
    int32_t m_Minimum_boards_per_node;
    bool m_Minimum_boards_per_nodeIsSet;
    int32_t m_Minimum_sockets_per_board;
    bool m_Minimum_sockets_per_boardIsSet;
    int32_t m_Sockets_per_node;
    bool m_Sockets_per_nodeIsSet;
    int32_t m_Threads_per_core;
    bool m_Threads_per_coreIsSet;
    int32_t m_Tasks_per_node;
    bool m_Tasks_per_nodeIsSet;
    int32_t m_Tasks_per_socket;
    bool m_Tasks_per_socketIsSet;
    int32_t m_Tasks_per_core;
    bool m_Tasks_per_coreIsSet;
    int32_t m_Tasks_per_board;
    bool m_Tasks_per_boardIsSet;
    int32_t m_Ntasks_per_tres;
    bool m_Ntasks_per_tresIsSet;
    int32_t m_Minimum_cpus_per_node;
    bool m_Minimum_cpus_per_nodeIsSet;
    std::shared_ptr<V0_0_39_uint64_no_val> m_Memory_per_cpu;
    bool m_Memory_per_cpuIsSet;
    std::shared_ptr<V0_0_39_uint64_no_val> m_Memory_per_node;
    bool m_Memory_per_nodeIsSet;
    int32_t m_Temporary_disk_per_node;
    bool m_Temporary_disk_per_nodeIsSet;
    utility::string_t m_Selinux_context;
    bool m_Selinux_contextIsSet;
    std::shared_ptr<V0_0_39_uint32_no_val> m_Required_switches;
    bool m_Required_switchesIsSet;
    utility::string_t m_Standard_error;
    bool m_Standard_errorIsSet;
    utility::string_t m_Standard_input;
    bool m_Standard_inputIsSet;
    utility::string_t m_Standard_output;
    bool m_Standard_outputIsSet;
    int32_t m_Wait_for_switch;
    bool m_Wait_for_switchIsSet;
    utility::string_t m_Wckey;
    bool m_WckeyIsSet;
    std::vector<utility::string_t> m_X11;
    bool m_X11IsSet;
    utility::string_t m_X11_magic_cookie;
    bool m_X11_magic_cookieIsSet;
    utility::string_t m_X11_target_host;
    bool m_X11_target_hostIsSet;
    int32_t m_X11_target_port;
    bool m_X11_target_portIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_job_desc_msg_H_ */
