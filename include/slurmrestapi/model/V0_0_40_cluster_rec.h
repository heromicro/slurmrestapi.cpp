/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_cluster_rec.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_cluster_rec_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_cluster_rec_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_cluster_rec_associations.h"
#include "slurmrestapi/model/V0_0_40_tres.h"
#include "slurmrestapi/model/V0_0_40_cluster_rec_controller.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_40_cluster_rec_controller;
class V0_0_40_cluster_rec_associations;
class V0_0_40_tres;


/// <summary>
/// 
/// </summary>
class  V0_0_40_cluster_rec
    : public ModelBase
{
public:
    V0_0_40_cluster_rec();
    virtual ~V0_0_40_cluster_rec();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_cluster_rec members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_cluster_rec_controller> getController() const;
    bool controllerIsSet() const;
    void unsetController();

    void setController(const std::shared_ptr<V0_0_40_cluster_rec_controller>& value);

    /// <summary>
    /// Flags
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// ClusterName
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Node names
    /// </summary>
    utility::string_t getNodes() const;
    bool nodesIsSet() const;
    void unsetNodes();

    void setNodes(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSelectPlugin() const;
    bool selectPluginIsSet() const;
    void unsetSelect_plugin();

    void setSelectPlugin(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_cluster_rec_associations> getAssociations() const;
    bool associationsIsSet() const;
    void unsetAssociations();

    void setAssociations(const std::shared_ptr<V0_0_40_cluster_rec_associations>& value);

    /// <summary>
    /// RPC version used in the cluster
    /// </summary>
    int32_t getRpcVersion() const;
    bool rpcVersionIsSet() const;
    void unsetRpc_version();

    void setRpcVersion(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getTres();
    bool tresIsSet() const;
    void unsetTres();

    void setTres(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);


protected:
    std::shared_ptr<V0_0_40_cluster_rec_controller> m_Controller;
    bool m_ControllerIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Nodes;
    bool m_NodesIsSet;
    utility::string_t m_Select_plugin;
    bool m_Select_pluginIsSet;
    std::shared_ptr<V0_0_40_cluster_rec_associations> m_Associations;
    bool m_AssociationsIsSet;
    int32_t m_Rpc_version;
    bool m_Rpc_versionIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Tres;
    bool m_TresIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_cluster_rec_H_ */
