/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_39_node.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_node_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_node_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_39_acct_gather_energy.h"
#include "slurmrestapi/model/V0_0_39_uint32_no_val.h"
#include "slurmrestapi/model/V0_0_39_uint64_no_val.h"
#include <cpprest/details/basic_types.h>
#include <vector>
#include "slurmrestapi/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_39_uint32_no_val;
class V0_0_39_uint64_no_val;
class V0_0_39_acct_gather_energy;


/// <summary>
/// 
/// </summary>
class  V0_0_39_node
    : public ModelBase
{
public:
    V0_0_39_node();
    virtual ~V0_0_39_node();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_39_node members

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getArchitecture() const;
    bool architectureIsSet() const;
    void unsetArchitecture();

    void setArchitecture(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getBurstbufferNetworkAddress() const;
    bool burstbufferNetworkAddressIsSet() const;
    void unsetBurstbuffer_network_address();

    void setBurstbufferNetworkAddress(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getBoards() const;
    bool boardsIsSet() const;
    void unsetBoards();

    void setBoards(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getBootTime() const;
    bool bootTimeIsSet() const;
    void unsetBoot_time();

    void setBootTime(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getClusterName() const;
    bool clusterNameIsSet() const;
    void unsetCluster_name();

    void setClusterName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCores() const;
    bool coresIsSet() const;
    void unsetCores();

    void setCores(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSpecializedCores() const;
    bool specializedCoresIsSet() const;
    void unsetSpecialized_cores();

    void setSpecializedCores(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCpuBinding() const;
    bool cpuBindingIsSet() const;
    void unsetCpu_binding();

    void setCpuBinding(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint32_no_val> getCpuLoad() const;
    bool cpuLoadIsSet() const;
    void unsetCpu_load();

    void setCpuLoad(const std::shared_ptr<V0_0_39_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint64_no_val> getFreeMem() const;
    bool freeMemIsSet() const;
    void unsetFree_mem();

    void setFreeMem(const std::shared_ptr<V0_0_39_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getCpus() const;
    bool cpusIsSet() const;
    void unsetCpus();

    void setCpus(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getEffectiveCpus() const;
    bool effectiveCpusIsSet() const;
    void unsetEffective_cpus();

    void setEffectiveCpus(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getSpecializedCpus() const;
    bool specializedCpusIsSet() const;
    void unsetSpecialized_cpus();

    void setSpecializedCpus(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_acct_gather_energy> getEnergy() const;
    bool energyIsSet() const;
    void unsetEnergy();

    void setEnergy(const std::shared_ptr<V0_0_39_acct_gather_energy>& value);

    /// <summary>
    /// removed field
    /// </summary>
    std::shared_ptr<Object> getExternalSensors() const;
    bool externalSensorsIsSet() const;
    void unsetExternal_sensors();

    void setExternalSensors(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getExtra() const;
    bool extraIsSet() const;
    void unsetExtra();

    void setExtra(const utility::string_t& value);

    /// <summary>
    /// removed field
    /// </summary>
    std::shared_ptr<Object> getPower() const;
    bool powerIsSet() const;
    void unsetPower();

    void setPower(const std::shared_ptr<Object>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getFeatures();
    bool featuresIsSet() const;
    void unsetFeatures();

    void setFeatures(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getActiveFeatures();
    bool activeFeaturesIsSet() const;
    void unsetActive_features();

    void setActiveFeatures(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGres() const;
    bool gresIsSet() const;
    void unsetGres();

    void setGres(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGresDrained() const;
    bool gresDrainedIsSet() const;
    void unsetGres_drained();

    void setGresDrained(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getGresUsed() const;
    bool gresUsedIsSet() const;
    void unsetGres_used();

    void setGresUsed(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getLastBusy() const;
    bool lastBusyIsSet() const;
    void unsetLast_busy();

    void setLastBusy(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getMcsLabel() const;
    bool mcsLabelIsSet() const;
    void unsetMcs_label();

    void setMcsLabel(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getSpecializedMemory() const;
    bool specializedMemoryIsSet() const;
    void unsetSpecialized_memory();

    void setSpecializedMemory(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getNextStateAfterReboot();
    bool nextStateAfterRebootIsSet() const;
    void unsetNext_state_after_reboot();

    void setNextStateAfterReboot(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getAddress() const;
    bool addressIsSet() const;
    void unsetAddress();

    void setAddress(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getHostname() const;
    bool hostnameIsSet() const;
    void unsetHostname();

    void setHostname(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getState();
    bool stateIsSet() const;
    void unsetState();

    void setState(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOperatingSystem() const;
    bool operatingSystemIsSet() const;
    void unsetOperating_system();

    void setOperatingSystem(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getOwner() const;
    bool ownerIsSet() const;
    void unsetOwner();

    void setOwner(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<utility::string_t>& getPartitions();
    bool partitionsIsSet() const;
    void unsetPartitions();

    void setPartitions(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPort() const;
    bool portIsSet() const;
    void unsetPort();

    void setPort(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getRealMemory() const;
    bool realMemoryIsSet() const;
    void unsetReal_memory();

    void setRealMemory(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getComment() const;
    bool commentIsSet() const;
    void unsetComment();

    void setComment(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReason() const;
    bool reasonIsSet() const;
    void unsetReason();

    void setReason(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getReasonChangedAt() const;
    bool reasonChangedAtIsSet() const;
    void unsetReason_changed_at();

    void setReasonChangedAt(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReasonSetByUser() const;
    bool reasonSetByUserIsSet() const;
    void unsetReason_set_by_user();

    void setReasonSetByUser(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_39_uint64_no_val> getResumeAfter() const;
    bool resumeAfterIsSet() const;
    void unsetResume_after();

    void setResumeAfter(const std::shared_ptr<V0_0_39_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getReservation() const;
    bool reservationIsSet() const;
    void unsetReservation();

    void setReservation(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getAllocMemory() const;
    bool allocMemoryIsSet() const;
    void unsetAlloc_memory();

    void setAllocMemory(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAllocCpus() const;
    bool allocCpusIsSet() const;
    void unsetAlloc_cpus();

    void setAllocCpus(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getAllocIdleCpus() const;
    bool allocIdleCpusIsSet() const;
    void unsetAlloc_idle_cpus();

    void setAllocIdleCpus(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTresUsed() const;
    bool tresUsedIsSet() const;
    void unsetTres_used();

    void setTresUsed(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    double getTresWeighted() const;
    bool tresWeightedIsSet() const;
    void unsetTres_weighted();

    void setTresWeighted(double value);

    /// <summary>
    /// 
    /// </summary>
    int64_t getSlurmdStartTime() const;
    bool slurmdStartTimeIsSet() const;
    void unsetSlurmd_start_time();

    void setSlurmdStartTime(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getSockets() const;
    bool socketsIsSet() const;
    void unsetSockets();

    void setSockets(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getThreads() const;
    bool threadsIsSet() const;
    void unsetThreads();

    void setThreads(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getTemporaryDisk() const;
    bool temporaryDiskIsSet() const;
    void unsetTemporary_disk();

    void setTemporaryDisk(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getWeight() const;
    bool weightIsSet() const;
    void unsetWeight();

    void setWeight(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getTres() const;
    bool tresIsSet() const;
    void unsetTres();

    void setTres(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);


protected:
    utility::string_t m_Architecture;
    bool m_ArchitectureIsSet;
    utility::string_t m_Burstbuffer_network_address;
    bool m_Burstbuffer_network_addressIsSet;
    int32_t m_Boards;
    bool m_BoardsIsSet;
    int64_t m_Boot_time;
    bool m_Boot_timeIsSet;
    utility::string_t m_Cluster_name;
    bool m_Cluster_nameIsSet;
    int32_t m_Cores;
    bool m_CoresIsSet;
    int32_t m_Specialized_cores;
    bool m_Specialized_coresIsSet;
    int32_t m_Cpu_binding;
    bool m_Cpu_bindingIsSet;
    std::shared_ptr<V0_0_39_uint32_no_val> m_Cpu_load;
    bool m_Cpu_loadIsSet;
    std::shared_ptr<V0_0_39_uint64_no_val> m_Free_mem;
    bool m_Free_memIsSet;
    int32_t m_Cpus;
    bool m_CpusIsSet;
    int32_t m_Effective_cpus;
    bool m_Effective_cpusIsSet;
    utility::string_t m_Specialized_cpus;
    bool m_Specialized_cpusIsSet;
    std::shared_ptr<V0_0_39_acct_gather_energy> m_Energy;
    bool m_EnergyIsSet;
    std::shared_ptr<Object> m_External_sensors;
    bool m_External_sensorsIsSet;
    utility::string_t m_Extra;
    bool m_ExtraIsSet;
    std::shared_ptr<Object> m_Power;
    bool m_PowerIsSet;
    std::vector<utility::string_t> m_Features;
    bool m_FeaturesIsSet;
    std::vector<utility::string_t> m_Active_features;
    bool m_Active_featuresIsSet;
    utility::string_t m_Gres;
    bool m_GresIsSet;
    utility::string_t m_Gres_drained;
    bool m_Gres_drainedIsSet;
    utility::string_t m_Gres_used;
    bool m_Gres_usedIsSet;
    int64_t m_Last_busy;
    bool m_Last_busyIsSet;
    utility::string_t m_Mcs_label;
    bool m_Mcs_labelIsSet;
    int64_t m_Specialized_memory;
    bool m_Specialized_memoryIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::vector<utility::string_t> m_Next_state_after_reboot;
    bool m_Next_state_after_rebootIsSet;
    utility::string_t m_Address;
    bool m_AddressIsSet;
    utility::string_t m_Hostname;
    bool m_HostnameIsSet;
    std::vector<utility::string_t> m_State;
    bool m_StateIsSet;
    utility::string_t m_Operating_system;
    bool m_Operating_systemIsSet;
    utility::string_t m_Owner;
    bool m_OwnerIsSet;
    std::vector<utility::string_t> m_Partitions;
    bool m_PartitionsIsSet;
    int32_t m_Port;
    bool m_PortIsSet;
    int64_t m_Real_memory;
    bool m_Real_memoryIsSet;
    utility::string_t m_Comment;
    bool m_CommentIsSet;
    utility::string_t m_Reason;
    bool m_ReasonIsSet;
    int64_t m_Reason_changed_at;
    bool m_Reason_changed_atIsSet;
    utility::string_t m_Reason_set_by_user;
    bool m_Reason_set_by_userIsSet;
    std::shared_ptr<V0_0_39_uint64_no_val> m_Resume_after;
    bool m_Resume_afterIsSet;
    utility::string_t m_Reservation;
    bool m_ReservationIsSet;
    int64_t m_Alloc_memory;
    bool m_Alloc_memoryIsSet;
    int32_t m_Alloc_cpus;
    bool m_Alloc_cpusIsSet;
    int32_t m_Alloc_idle_cpus;
    bool m_Alloc_idle_cpusIsSet;
    utility::string_t m_Tres_used;
    bool m_Tres_usedIsSet;
    double m_Tres_weighted;
    bool m_Tres_weightedIsSet;
    int64_t m_Slurmd_start_time;
    bool m_Slurmd_start_timeIsSet;
    int32_t m_Sockets;
    bool m_SocketsIsSet;
    int32_t m_Threads;
    bool m_ThreadsIsSet;
    int32_t m_Temporary_disk;
    bool m_Temporary_diskIsSet;
    int32_t m_Weight;
    bool m_WeightIsSet;
    utility::string_t m_Tres;
    bool m_TresIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_node_H_ */
