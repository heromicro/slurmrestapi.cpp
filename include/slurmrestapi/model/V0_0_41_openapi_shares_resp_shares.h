/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_shares_resp_shares.h
 *
 * fairshare info
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_shares_resp_shares_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_shares_resp_shares_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_shares_resp_shares_shares_inner.h"
#include <vector>

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_41_openapi_shares_resp_shares_shares_inner;


/// <summary>
/// fairshare info
/// </summary>
class  V0_0_41_openapi_shares_resp_shares
    : public ModelBase
{
public:
    V0_0_41_openapi_shares_resp_shares();
    virtual ~V0_0_41_openapi_shares_resp_shares();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_shares_resp_shares members

    /// <summary>
    /// Association shares
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>>& getShares();
    bool sharesIsSet() const;
    void unsetShares();

    void setShares(const std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>>& value);

    /// <summary>
    /// Total number of shares
    /// </summary>
    int64_t getTotalShares() const;
    bool totalSharesIsSet() const;
    void unsetTotal_shares();

    void setTotalShares(int64_t value);


protected:
    std::vector<std::shared_ptr<V0_0_41_openapi_shares_resp_shares_shares_inner>> m_Shares;
    bool m_SharesIsSet;
    int64_t m_Total_shares;
    bool m_Total_sharesIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_shares_resp_shares_H_ */
