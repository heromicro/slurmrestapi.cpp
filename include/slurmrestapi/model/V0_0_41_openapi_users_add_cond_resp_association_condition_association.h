/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_users_add_cond_resp_association_condition_association.h
 *
 * Association limits and options
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_users_add_cond_resp_association_condition_association_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_users_add_cond_resp_association_condition_association_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxwalldurationperjob.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_minpriothresh.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobsaccrue.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobsaccrue.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxsubmitjobs.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_associations_inner_priority.h"
#include <vector>
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpsubmitjobs.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobs.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpwall.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobs.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobs;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobsaccrue;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpsubmitjobs;
class V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpwall;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobs;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobsaccrue;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxsubmitjobs;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxwalldurationperjob;
class V0_0_41_openapi_users_add_cond_resp_association_condition_association_minpriothresh;
class V0_0_41_openapi_slurmdbd_config_resp_associations_inner_priority;


/// <summary>
/// Association limits and options
/// </summary>
class  V0_0_41_openapi_users_add_cond_resp_association_condition_association
    : public ModelBase
{
public:
    V0_0_41_openapi_users_add_cond_resp_association_condition_association();
    virtual ~V0_0_41_openapi_users_add_cond_resp_association_condition_association();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_users_add_cond_resp_association_condition_association members

    /// <summary>
    /// Arbitrary comment
    /// </summary>
    utility::string_t getComment() const;
    bool commentIsSet() const;
    void unsetComment();

    void setComment(const utility::string_t& value);

    /// <summary>
    /// Default QOS
    /// </summary>
    utility::string_t getDefaultqos() const;
    bool defaultqosIsSet() const;
    void unsetDefaultqos();

    void setDefaultqos(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobs> getGrpjobs() const;
    bool grpjobsIsSet() const;
    void unsetGrpjobs();

    void setGrpjobs(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobs>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobsaccrue> getGrpjobsaccrue() const;
    bool grpjobsaccrueIsSet() const;
    void unsetGrpjobsaccrue();

    void setGrpjobsaccrue(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobsaccrue>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpsubmitjobs> getGrpsubmitjobs() const;
    bool grpsubmitjobsIsSet() const;
    void unsetGrpsubmitjobs();

    void setGrpsubmitjobs(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpsubmitjobs>& value);

    /// <summary>
    /// Maximum number of TRES able to be allocated by running jobs in this association and its children
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getGrptres();
    bool grptresIsSet() const;
    void unsetGrptres();

    void setGrptres(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// Total number of TRES minutes that can possibly be used by past, present and future jobs in this association and its children
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getGrptresmins();
    bool grptresminsIsSet() const;
    void unsetGrptresmins();

    void setGrptresmins(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// Maximum number of TRES minutes able to be allocated by running jobs in this association and its children
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getGrptresrunmins();
    bool grptresrunminsIsSet() const;
    void unsetGrptresrunmins();

    void setGrptresrunmins(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpwall> getGrpwall() const;
    bool grpwallIsSet() const;
    void unsetGrpwall();

    void setGrpwall(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpwall>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobs> getMaxjobs() const;
    bool maxjobsIsSet() const;
    void unsetMaxjobs();

    void setMaxjobs(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobs>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobsaccrue> getMaxjobsaccrue() const;
    bool maxjobsaccrueIsSet() const;
    void unsetMaxjobsaccrue();

    void setMaxjobsaccrue(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobsaccrue>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxsubmitjobs> getMaxsubmitjobs() const;
    bool maxsubmitjobsIsSet() const;
    void unsetMaxsubmitjobs();

    void setMaxsubmitjobs(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxsubmitjobs>& value);

    /// <summary>
    /// Maximum number of TRES minutes each job is able to use in this association
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getMaxtresminsperjob();
    bool maxtresminsperjobIsSet() const;
    void unsetMaxtresminsperjob();

    void setMaxtresminsperjob(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// Maximum number of TRES minutes able to be allocated by running jobs in this association
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getMaxtresrunmins();
    bool maxtresrunminsIsSet() const;
    void unsetMaxtresrunmins();

    void setMaxtresrunmins(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// Maximum number of TRES each job is able to use in this association
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getMaxtresperjob();
    bool maxtresperjobIsSet() const;
    void unsetMaxtresperjob();

    void setMaxtresperjob(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// Maximum number of TRES each node is able to use
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& getMaxtrespernode();
    bool maxtrespernodeIsSet() const;
    void unsetMaxtrespernode();

    void setMaxtrespernode(const std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxwalldurationperjob> getMaxwalldurationperjob() const;
    bool maxwalldurationperjobIsSet() const;
    void unsetMaxwalldurationperjob();

    void setMaxwalldurationperjob(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxwalldurationperjob>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_minpriothresh> getMinpriothresh() const;
    bool minpriothreshIsSet() const;
    void unsetMinpriothresh();

    void setMinpriothresh(const std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_minpriothresh>& value);

    /// <summary>
    /// Name of parent account
    /// </summary>
    utility::string_t getParent() const;
    bool parentIsSet() const;
    void unsetParent();

    void setParent(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_associations_inner_priority> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_associations_inner_priority>& value);

    /// <summary>
    /// List of available QOS names
    /// </summary>
    std::vector<utility::string_t>& getQoslevel();
    bool qoslevelIsSet() const;
    void unsetQoslevel();

    void setQoslevel(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Allocated shares used for fairshare calculation
    /// </summary>
    int32_t getFairshare() const;
    bool fairshareIsSet() const;
    void unsetFairshare();

    void setFairshare(int32_t value);


protected:
    utility::string_t m_Comment;
    bool m_CommentIsSet;
    utility::string_t m_Defaultqos;
    bool m_DefaultqosIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobs> m_Grpjobs;
    bool m_GrpjobsIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpjobsaccrue> m_Grpjobsaccrue;
    bool m_GrpjobsaccrueIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpsubmitjobs> m_Grpsubmitjobs;
    bool m_GrpsubmitjobsIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Grptres;
    bool m_GrptresIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Grptresmins;
    bool m_GrptresminsIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Grptresrunmins;
    bool m_GrptresrunminsIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_grpwall> m_Grpwall;
    bool m_GrpwallIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobs> m_Maxjobs;
    bool m_MaxjobsIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxjobsaccrue> m_Maxjobsaccrue;
    bool m_MaxjobsaccrueIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxsubmitjobs> m_Maxsubmitjobs;
    bool m_MaxsubmitjobsIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Maxtresminsperjob;
    bool m_MaxtresminsperjobIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Maxtresrunmins;
    bool m_MaxtresrunminsIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Maxtresperjob;
    bool m_MaxtresperjobIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp_jobs_inner_steps_inner_tres_requested_max_inner>> m_Maxtrespernode;
    bool m_MaxtrespernodeIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_maxwalldurationperjob> m_Maxwalldurationperjob;
    bool m_MaxwalldurationperjobIsSet;
    std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_association_condition_association_minpriothresh> m_Minpriothresh;
    bool m_MinpriothreshIsSet;
    utility::string_t m_Parent;
    bool m_ParentIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_associations_inner_priority> m_Priority;
    bool m_PriorityIsSet;
    std::vector<utility::string_t> m_Qoslevel;
    bool m_QoslevelIsSet;
    int32_t m_Fairshare;
    bool m_FairshareIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_users_add_cond_resp_association_condition_association_H_ */
