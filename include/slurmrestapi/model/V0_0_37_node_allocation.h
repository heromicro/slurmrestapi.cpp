/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_37_node_allocation.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_37_node_allocation_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_37_node_allocation_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/Object.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// 
/// </summary>
class  V0_0_37_node_allocation
    : public ModelBase
{
public:
    V0_0_37_node_allocation();
    virtual ~V0_0_37_node_allocation();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_37_node_allocation members

    /// <summary>
    /// amount of assigned job memory
    /// </summary>
    int32_t getMemory() const;
    bool memoryIsSet() const;
    void unsetMemory();

    void setMemory(int32_t value);

    /// <summary>
    /// amount of assigned job CPUs
    /// </summary>
    std::shared_ptr<Object> getCpus() const;
    bool cpusIsSet() const;
    void unsetCpus();

    void setCpus(const std::shared_ptr<Object>& value);

    /// <summary>
    /// assignment status of each socket by socket id
    /// </summary>
    std::shared_ptr<Object> getSockets() const;
    bool socketsIsSet() const;
    void unsetSockets();

    void setSockets(const std::shared_ptr<Object>& value);

    /// <summary>
    /// assignment status of each core by core id
    /// </summary>
    std::shared_ptr<Object> getCores() const;
    bool coresIsSet() const;
    void unsetCores();

    void setCores(const std::shared_ptr<Object>& value);


protected:
    int32_t m_Memory;
    bool m_MemoryIsSet;
    std::shared_ptr<Object> m_Cpus;
    bool m_CpusIsSet;
    std::shared_ptr<Object> m_Sockets;
    bool m_SocketsIsSet;
    std::shared_ptr<Object> m_Cores;
    bool m_CoresIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_37_node_allocation_H_ */
