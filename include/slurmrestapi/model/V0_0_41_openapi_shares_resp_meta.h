/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_shares_resp_meta.h
 *
 * Slurm meta values
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_shares_resp_meta_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_shares_resp_meta_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_openapi_meta_slurm.h"
#include "slurmrestapi/model/V0_0_40_openapi_meta_plugin.h"
#include "slurmrestapi/model/V0_0_40_openapi_meta_client.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_40_openapi_meta_plugin;
class V0_0_40_openapi_meta_client;
class V0_0_40_openapi_meta_slurm;


/// <summary>
/// Slurm meta values
/// </summary>
class  V0_0_41_openapi_shares_resp_meta
    : public ModelBase
{
public:
    V0_0_41_openapi_shares_resp_meta();
    virtual ~V0_0_41_openapi_shares_resp_meta();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_shares_resp_meta members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_openapi_meta_plugin> getPlugin() const;
    bool pluginIsSet() const;
    void unsetPlugin();

    void setPlugin(const std::shared_ptr<V0_0_40_openapi_meta_plugin>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_openapi_meta_client> getClient() const;
    bool clientIsSet() const;
    void unsetClient();

    void setClient(const std::shared_ptr<V0_0_40_openapi_meta_client>& value);

    /// <summary>
    /// CLI command (if applicable)
    /// </summary>
    std::vector<utility::string_t>& getCommand();
    bool commandIsSet() const;
    void unsetCommand();

    void setCommand(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_openapi_meta_slurm> getSlurm() const;
    bool slurmIsSet() const;
    void unsetSlurm();

    void setSlurm(const std::shared_ptr<V0_0_40_openapi_meta_slurm>& value);


protected:
    std::shared_ptr<V0_0_40_openapi_meta_plugin> m_Plugin;
    bool m_PluginIsSet;
    std::shared_ptr<V0_0_40_openapi_meta_client> m_Client;
    bool m_ClientIsSet;
    std::vector<utility::string_t> m_Command;
    bool m_CommandIsSet;
    std::shared_ptr<V0_0_40_openapi_meta_slurm> m_Slurm;
    bool m_SlurmIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_shares_resp_meta_H_ */
