/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_partition_resp_partitions_inner.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_partition_resp_partitions_inner_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_partition_resp_partitions_inner_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_partition_info_priority.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_defaults.h"
#include "slurmrestapi/model/V0_0_40_partition_info_minimums.h"
#include "slurmrestapi/model/V0_0_40_partition_info_partition.h"
#include "slurmrestapi/model/V0_0_40_partition_info_tres.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_timeouts.h"
#include "slurmrestapi/model/V0_0_40_partition_info_accounts.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums.h"
#include <vector>
#include "slurmrestapi/model/V0_0_40_partition_info_cpus.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_suspend_time.h"
#include "slurmrestapi/model/V0_0_40_partition_info_nodes.h"
#include "slurmrestapi/model/V0_0_40_partition_info_groups.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/V0_0_40_partition_info_qos.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_40_partition_info_nodes;
class V0_0_40_partition_info_accounts;
class V0_0_40_partition_info_groups;
class V0_0_40_partition_info_qos;
class V0_0_40_partition_info_tres;
class V0_0_40_partition_info_cpus;
class V0_0_41_openapi_partition_resp_partitions_inner_defaults;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums;
class V0_0_40_partition_info_minimums;
class V0_0_40_partition_info_priority;
class V0_0_41_openapi_partition_resp_partitions_inner_timeouts;
class V0_0_40_partition_info_partition;
class V0_0_41_openapi_partition_resp_partitions_inner_suspend_time;


/// <summary>
/// 
/// </summary>
class  V0_0_41_openapi_partition_resp_partitions_inner
    : public ModelBase
{
public:
    V0_0_41_openapi_partition_resp_partitions_inner();
    virtual ~V0_0_41_openapi_partition_resp_partitions_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_partition_resp_partitions_inner members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_nodes> getNodes() const;
    bool nodesIsSet() const;
    void unsetNodes();

    void setNodes(const std::shared_ptr<V0_0_40_partition_info_nodes>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_accounts> getAccounts() const;
    bool accountsIsSet() const;
    void unsetAccounts();

    void setAccounts(const std::shared_ptr<V0_0_40_partition_info_accounts>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_groups> getGroups() const;
    bool groupsIsSet() const;
    void unsetGroups();

    void setGroups(const std::shared_ptr<V0_0_40_partition_info_groups>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_qos> getQos() const;
    bool qosIsSet() const;
    void unsetQos();

    void setQos(const std::shared_ptr<V0_0_40_partition_info_qos>& value);

    /// <summary>
    /// Alternate
    /// </summary>
    utility::string_t getAlternate() const;
    bool alternateIsSet() const;
    void unsetAlternate();

    void setAlternate(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_tres> getTres() const;
    bool tresIsSet() const;
    void unsetTres();

    void setTres(const std::shared_ptr<V0_0_40_partition_info_tres>& value);

    /// <summary>
    /// Cluster name
    /// </summary>
    utility::string_t getCluster() const;
    bool clusterIsSet() const;
    void unsetCluster();

    void setCluster(const utility::string_t& value);

    /// <summary>
    /// Scheduler consumable resource selection type
    /// </summary>
    std::vector<utility::string_t>& getSelectType();
    bool selectTypeIsSet() const;
    void unsetSelect_type();

    void setSelectType(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_cpus> getCpus() const;
    bool cpusIsSet() const;
    void unsetCpus();

    void setCpus(const std::shared_ptr<V0_0_40_partition_info_cpus>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults> getDefaults() const;
    bool defaultsIsSet() const;
    void unsetDefaults();

    void setDefaults(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults>& value);

    /// <summary>
    /// GraceTime
    /// </summary>
    int32_t getGraceTime() const;
    bool graceTimeIsSet() const;
    void unsetGrace_time();

    void setGraceTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums> getMaximums() const;
    bool maximumsIsSet() const;
    void unsetMaximums();

    void setMaximums(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_minimums> getMinimums() const;
    bool minimumsIsSet() const;
    void unsetMinimums();

    void setMinimums(const std::shared_ptr<V0_0_40_partition_info_minimums>& value);

    /// <summary>
    /// PartitionName
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// NodeSets
    /// </summary>
    utility::string_t getNodeSets() const;
    bool nodeSetsIsSet() const;
    void unsetNode_sets();

    void setNodeSets(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_priority> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(const std::shared_ptr<V0_0_40_partition_info_priority>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_timeouts> getTimeouts() const;
    bool timeoutsIsSet() const;
    void unsetTimeouts();

    void setTimeouts(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_timeouts>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_partition> getPartition() const;
    bool partitionIsSet() const;
    void unsetPartition();

    void setPartition(const std::shared_ptr<V0_0_40_partition_info_partition>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_suspend_time> getSuspendTime() const;
    bool suspendTimeIsSet() const;
    void unsetSuspend_time();

    void setSuspendTime(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_suspend_time>& value);


protected:
    std::shared_ptr<V0_0_40_partition_info_nodes> m_Nodes;
    bool m_NodesIsSet;
    std::shared_ptr<V0_0_40_partition_info_accounts> m_Accounts;
    bool m_AccountsIsSet;
    std::shared_ptr<V0_0_40_partition_info_groups> m_Groups;
    bool m_GroupsIsSet;
    std::shared_ptr<V0_0_40_partition_info_qos> m_Qos;
    bool m_QosIsSet;
    utility::string_t m_Alternate;
    bool m_AlternateIsSet;
    std::shared_ptr<V0_0_40_partition_info_tres> m_Tres;
    bool m_TresIsSet;
    utility::string_t m_Cluster;
    bool m_ClusterIsSet;
    std::vector<utility::string_t> m_Select_type;
    bool m_Select_typeIsSet;
    std::shared_ptr<V0_0_40_partition_info_cpus> m_Cpus;
    bool m_CpusIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_defaults> m_Defaults;
    bool m_DefaultsIsSet;
    int32_t m_Grace_time;
    bool m_Grace_timeIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums> m_Maximums;
    bool m_MaximumsIsSet;
    std::shared_ptr<V0_0_40_partition_info_minimums> m_Minimums;
    bool m_MinimumsIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Node_sets;
    bool m_Node_setsIsSet;
    std::shared_ptr<V0_0_40_partition_info_priority> m_Priority;
    bool m_PriorityIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_timeouts> m_Timeouts;
    bool m_TimeoutsIsSet;
    std::shared_ptr<V0_0_40_partition_info_partition> m_Partition;
    bool m_PartitionIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_suspend_time> m_Suspend_time;
    bool m_Suspend_timeIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_partition_resp_partitions_inner_H_ */
