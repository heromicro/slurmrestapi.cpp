/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_factor.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_max.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_min.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_max;
class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_factor;
class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_min;


/// <summary>
/// 
/// </summary>
class  V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits
    : public ModelBase
{
public:
    V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits();
    virtual ~V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits members

    /// <summary>
    /// GraceTime
    /// </summary>
    int32_t getGraceTime() const;
    bool graceTimeIsSet() const;
    void unsetGrace_time();

    void setGraceTime(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_max> getMax() const;
    bool maxIsSet() const;
    void unsetMax();

    void setMax(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_max>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_factor> getFactor() const;
    bool factorIsSet() const;
    void unsetFactor();

    void setFactor(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_factor>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_min> getMin() const;
    bool minIsSet() const;
    void unsetMin();

    void setMin(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_min>& value);


protected:
    int32_t m_Grace_time;
    bool m_Grace_timeIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_max> m_Max;
    bool m_MaxIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_factor> m_Factor;
    bool m_FactorIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_min> m_Min;
    bool m_MinIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits_H_ */
