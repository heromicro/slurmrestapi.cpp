/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_job_step_CPU.h
 *
 * CPU properties
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_step_CPU_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_step_CPU_H_


#include "slurmrestapi/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/Dbv0_0_38_job_step_CPU_requested_frequency.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_38_job_step_CPU_requested_frequency;

/// <summary>
/// CPU properties
/// </summary>
class  Dbv0_0_38_job_step_CPU
    : public ModelBase
{
public:
    Dbv0_0_38_job_step_CPU();
    virtual ~Dbv0_0_38_job_step_CPU();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_job_step_CPU members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_job_step_CPU_requested_frequency> getRequestedFrequency() const;
    bool requestedFrequencyIsSet() const;
    void unsetRequested_frequency();

    void setRequestedFrequency(const std::shared_ptr<Dbv0_0_38_job_step_CPU_requested_frequency>& value);

    /// <summary>
    /// CPU governor
    /// </summary>
    std::vector<utility::string_t>& getGovernor();
    bool governorIsSet() const;
    void unsetGovernor();

    void setGovernor(const std::vector<utility::string_t>& value);


protected:
    std::shared_ptr<Dbv0_0_38_job_step_CPU_requested_frequency> m_Requested_frequency;
    bool m_Requested_frequencyIsSet;
    std::vector<utility::string_t> m_Governor;
    bool m_GovernorIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_step_CPU_H_ */
