/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_qos_preempt.h
 *
 * Preemption settings
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_qos_preempt_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_qos_preempt_H_


#include "slurmrestapi/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Preemption settings
/// </summary>
class  Dbv0_0_38_qos_preempt
    : public ModelBase
{
public:
    Dbv0_0_38_qos_preempt();
    virtual ~Dbv0_0_38_qos_preempt();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_qos_preempt members

    /// <summary>
    /// List of preemptable QOS
    /// </summary>
    std::vector<utility::string_t>& getList();
    bool listIsSet() const;
    void unsetList();

    void setList(const std::vector<utility::string_t>& value);

    /// <summary>
    /// List of preemption modes
    /// </summary>
    std::vector<utility::string_t>& getMode();
    bool modeIsSet() const;
    void unsetMode();

    void setMode(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Grace period (s) before jobs can preempted
    /// </summary>
    int32_t getExemptTime() const;
    bool exemptTimeIsSet() const;
    void unsetExempt_time();

    void setExemptTime(int32_t value);


protected:
    std::vector<utility::string_t> m_List;
    bool m_ListIsSet;
    std::vector<utility::string_t> m_Mode;
    bool m_ModeIsSet;
    int32_t m_Exempt_time;
    bool m_Exempt_timeIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_qos_preempt_H_ */
