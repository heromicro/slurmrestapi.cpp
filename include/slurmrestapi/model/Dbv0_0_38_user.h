/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_user.h
 *
 * User description
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_user_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_user_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/Dbv0_0_38_coordinator_info.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/Dbv0_0_38_association_short_info.h"
#include "slurmrestapi/model/Dbv0_0_38_user_default.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_38_association_short_info;
class Dbv0_0_38_coordinator_info;
class Dbv0_0_38_user_default;

/// <summary>
/// User description
/// </summary>
class  Dbv0_0_38_user
    : public ModelBase
{
public:
    Dbv0_0_38_user();
    virtual ~Dbv0_0_38_user();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_user members

    /// <summary>
    /// Description of administrator level
    /// </summary>
    utility::string_t getAdministratorLevel() const;
    bool administratorLevelIsSet() const;
    void unsetAdministrator_level();

    void setAdministratorLevel(const utility::string_t& value);

    /// <summary>
    /// Assigned associations
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_association_short_info>>& getAssociations();
    bool associationsIsSet() const;
    void unsetAssociations();

    void setAssociations(const std::vector<std::shared_ptr<Dbv0_0_38_association_short_info>>& value);

    /// <summary>
    /// List of assigned coordinators
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_coordinator_info>>& getCoordinators();
    bool coordinatorsIsSet() const;
    void unsetCoordinators();

    void setCoordinators(const std::vector<std::shared_ptr<Dbv0_0_38_coordinator_info>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_user_default> getRDefault() const;
    bool rDefaultIsSet() const;
    void unsetr_default();

    void setRDefault(const std::shared_ptr<Dbv0_0_38_user_default>& value);

    /// <summary>
    /// List of properties of user
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// User name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);


protected:
    utility::string_t m_Administrator_level;
    bool m_Administrator_levelIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_association_short_info>> m_Associations;
    bool m_AssociationsIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_coordinator_info>> m_Coordinators;
    bool m_CoordinatorsIsSet;
    std::shared_ptr<Dbv0_0_38_user_default> m_r_default;
    bool m_r_defaultIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_user_H_ */
