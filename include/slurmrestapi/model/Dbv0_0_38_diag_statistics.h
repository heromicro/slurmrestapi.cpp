/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_diag_statistics.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_diag_statistics_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_diag_statistics_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/Dbv0_0_38_diag_statistics_rollups_inner.h"
#include "slurmrestapi/model/Dbv0_0_38_diag_statistics_users_inner.h"
#include "slurmrestapi/model/Dbv0_0_38_diag_statistics_RPCs_inner.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_38_diag_statistics_rollups_inner;
class Dbv0_0_38_diag_statistics_RPCs_inner;
class Dbv0_0_38_diag_statistics_users_inner;

/// <summary>
/// 
/// </summary>
class  Dbv0_0_38_diag_statistics
    : public ModelBase
{
public:
    Dbv0_0_38_diag_statistics();
    virtual ~Dbv0_0_38_diag_statistics();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_diag_statistics members

    /// <summary>
    /// Unix timestamp of start time
    /// </summary>
    int32_t getTimeStart() const;
    bool timeStartIsSet() const;
    void unsetTime_start();

    void setTimeStart(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_rollups_inner>>& getRollups();
    bool rollupsIsSet() const;
    void unsetRollups();

    void setRollups(const std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_rollups_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_RPCs_inner>>& getRPCs();
    bool rPCsIsSet() const;
    void unsetRPCs();

    void setRPCs(const std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_RPCs_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_users_inner>>& getUsers();
    bool usersIsSet() const;
    void unsetUsers();

    void setUsers(const std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_users_inner>>& value);


protected:
    int32_t m_Time_start;
    bool m_Time_startIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_rollups_inner>> m_Rollups;
    bool m_RollupsIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_RPCs_inner>> m_RPCs;
    bool m_RPCsIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_diag_statistics_users_inner>> m_Users;
    bool m_UsersIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_diag_statistics_H_ */
