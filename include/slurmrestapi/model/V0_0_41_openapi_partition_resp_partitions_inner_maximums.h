/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_partition_resp_partitions_inner_maximums.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_partition_resp_partitions_inner_maximums_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_partition_resp_partitions_inner_maximums_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_socket.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_cpu.h"
#include "slurmrestapi/model/V0_0_40_partition_info_maximums_oversubscribe.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_node.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_time.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_node.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_nodes.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp_partitions_inner_maximums_over_time_limit.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_node;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_socket;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_cpu;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_node;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums_nodes;
class V0_0_40_partition_info_maximums_oversubscribe;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums_time;
class V0_0_41_openapi_partition_resp_partitions_inner_maximums_over_time_limit;


/// <summary>
/// 
/// </summary>
class  V0_0_41_openapi_partition_resp_partitions_inner_maximums
    : public ModelBase
{
public:
    V0_0_41_openapi_partition_resp_partitions_inner_maximums();
    virtual ~V0_0_41_openapi_partition_resp_partitions_inner_maximums();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_partition_resp_partitions_inner_maximums members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_node> getCpusPerNode() const;
    bool cpusPerNodeIsSet() const;
    void unsetCpus_per_node();

    void setCpusPerNode(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_node>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_socket> getCpusPerSocket() const;
    bool cpusPerSocketIsSet() const;
    void unsetCpus_per_socket();

    void setCpusPerSocket(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_socket>& value);

    /// <summary>
    /// MaxMemPerCPU or MaxMemPerNode
    /// </summary>
    int64_t getMemoryPerCpu() const;
    bool memoryPerCpuIsSet() const;
    void unsetMemory_per_cpu();

    void setMemoryPerCpu(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_cpu> getPartitionMemoryPerCpu() const;
    bool partitionMemoryPerCpuIsSet() const;
    void unsetPartition_memory_per_cpu();

    void setPartitionMemoryPerCpu(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_cpu>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_node> getPartitionMemoryPerNode() const;
    bool partitionMemoryPerNodeIsSet() const;
    void unsetPartition_memory_per_node();

    void setPartitionMemoryPerNode(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_node>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_nodes> getNodes() const;
    bool nodesIsSet() const;
    void unsetNodes();

    void setNodes(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_nodes>& value);

    /// <summary>
    /// OverSubscribe
    /// </summary>
    int32_t getShares() const;
    bool sharesIsSet() const;
    void unsetShares();

    void setShares(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_partition_info_maximums_oversubscribe> getOversubscribe() const;
    bool oversubscribeIsSet() const;
    void unsetOversubscribe();

    void setOversubscribe(const std::shared_ptr<V0_0_40_partition_info_maximums_oversubscribe>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_time> getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_time>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_over_time_limit> getOverTimeLimit() const;
    bool overTimeLimitIsSet() const;
    void unsetOver_time_limit();

    void setOverTimeLimit(const std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_over_time_limit>& value);


protected:
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_node> m_Cpus_per_node;
    bool m_Cpus_per_nodeIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_cpus_per_socket> m_Cpus_per_socket;
    bool m_Cpus_per_socketIsSet;
    int64_t m_Memory_per_cpu;
    bool m_Memory_per_cpuIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_cpu> m_Partition_memory_per_cpu;
    bool m_Partition_memory_per_cpuIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_partition_memory_per_node> m_Partition_memory_per_node;
    bool m_Partition_memory_per_nodeIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_nodes> m_Nodes;
    bool m_NodesIsSet;
    int32_t m_Shares;
    bool m_SharesIsSet;
    std::shared_ptr<V0_0_40_partition_info_maximums_oversubscribe> m_Oversubscribe;
    bool m_OversubscribeIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_time> m_Time;
    bool m_TimeIsSet;
    std::shared_ptr<V0_0_41_openapi_partition_resp_partitions_inner_maximums_over_time_limit> m_Over_time_limit;
    bool m_Over_time_limitIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_partition_resp_partitions_inner_maximums_H_ */
