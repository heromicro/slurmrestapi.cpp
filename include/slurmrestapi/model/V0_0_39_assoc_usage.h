/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_39_assoc_usage.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_assoc_usage_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_assoc_usage_H_


#include "slurmrestapi/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  V0_0_39_assoc_usage
    : public ModelBase
{
public:
    V0_0_39_assoc_usage();
    virtual ~V0_0_39_assoc_usage();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_39_assoc_usage members

    /// <summary>
    /// 
    /// </summary>
    int32_t getAccrueJobCount() const;
    bool accrueJobCountIsSet() const;
    void unsetAccrue_job_count();

    void setAccrueJobCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getGroupUsedWallclock() const;
    bool groupUsedWallclockIsSet() const;
    void unsetGroup_used_wallclock();

    void setGroupUsedWallclock(double value);

    /// <summary>
    /// 
    /// </summary>
    double getFairshareFactor() const;
    bool fairshareFactorIsSet() const;
    void unsetFairshare_factor();

    void setFairshareFactor(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getFairshareShares() const;
    bool fairshareSharesIsSet() const;
    void unsetFairshare_shares();

    void setFairshareShares(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getNormalizedPriority() const;
    bool normalizedPriorityIsSet() const;
    void unsetNormalized_priority();

    void setNormalizedPriority(double value);

    /// <summary>
    /// 
    /// </summary>
    double getNormalizedShares() const;
    bool normalizedSharesIsSet() const;
    void unsetNormalized_shares();

    void setNormalizedShares(double value);

    /// <summary>
    /// 
    /// </summary>
    double getEffectiveNormalizedUsage() const;
    bool effectiveNormalizedUsageIsSet() const;
    void unsetEffective_normalized_usage();

    void setEffectiveNormalizedUsage(double value);

    /// <summary>
    /// 
    /// </summary>
    double getNormalizedUsage() const;
    bool normalizedUsageIsSet() const;
    void unsetNormalized_usage();

    void setNormalizedUsage(double value);

    /// <summary>
    /// 
    /// </summary>
    double getRawUsage() const;
    bool rawUsageIsSet() const;
    void unsetRaw_usage();

    void setRawUsage(double value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getActiveJobs() const;
    bool activeJobsIsSet() const;
    void unsetActive_jobs();

    void setActiveJobs(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getJobCount() const;
    bool jobCountIsSet() const;
    void unsetJob_count();

    void setJobCount(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    double getFairshareLevel() const;
    bool fairshareLevelIsSet() const;
    void unsetFairshare_level();

    void setFairshareLevel(double value);


protected:
    int32_t m_Accrue_job_count;
    bool m_Accrue_job_countIsSet;
    double m_Group_used_wallclock;
    bool m_Group_used_wallclockIsSet;
    double m_Fairshare_factor;
    bool m_Fairshare_factorIsSet;
    int32_t m_Fairshare_shares;
    bool m_Fairshare_sharesIsSet;
    double m_Normalized_priority;
    bool m_Normalized_priorityIsSet;
    double m_Normalized_shares;
    bool m_Normalized_sharesIsSet;
    double m_Effective_normalized_usage;
    bool m_Effective_normalized_usageIsSet;
    double m_Normalized_usage;
    bool m_Normalized_usageIsSet;
    double m_Raw_usage;
    bool m_Raw_usageIsSet;
    int32_t m_Active_jobs;
    bool m_Active_jobsIsSet;
    int32_t m_Job_count;
    bool m_Job_countIsSet;
    double m_Fairshare_level;
    bool m_Fairshare_levelIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_39_assoc_usage_H_ */
