/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_job_step_tres_requested.h
 *
 * TRES requested for job
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_step_tres_requested_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_step_tres_requested_H_


#include "slurmrestapi/ModelBase.h"

#include <vector>
#include "slurmrestapi/model/Dbv0_0_38_tres_list_inner.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_38_tres_list_inner;

/// <summary>
/// TRES requested for job
/// </summary>
class  Dbv0_0_38_job_step_tres_requested
    : public ModelBase
{
public:
    Dbv0_0_38_job_step_tres_requested();
    virtual ~Dbv0_0_38_job_step_tres_requested();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_job_step_tres_requested members

    /// <summary>
    /// TRES list of attributes
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& getAverage();
    bool averageIsSet() const;
    void unsetAverage();

    void setAverage(const std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& value);

    /// <summary>
    /// TRES list of attributes
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& getMax();
    bool maxIsSet() const;
    void unsetMax();

    void setMax(const std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& value);

    /// <summary>
    /// TRES list of attributes
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& getMin();
    bool minIsSet() const;
    void unsetMin();

    void setMin(const std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& value);

    /// <summary>
    /// TRES list of attributes
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& getTotal();
    bool totalIsSet() const;
    void unsetTotal();

    void setTotal(const std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>>& value);


protected:
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>> m_Average;
    bool m_AverageIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>> m_Max;
    bool m_MaxIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>> m_Min;
    bool m_MinIsSet;
    std::vector<std::shared_ptr<Dbv0_0_38_tres_list_inner>> m_Total;
    bool m_TotalIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_step_tres_requested_H_ */
