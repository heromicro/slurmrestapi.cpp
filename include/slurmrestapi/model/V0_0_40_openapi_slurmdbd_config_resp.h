/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_openapi_slurmdbd_config_resp.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_40_openapi_slurmdbd_config_resp_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_40_openapi_slurmdbd_config_resp_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_openapi_error.h"
#include "slurmrestapi/model/V0_0_40_account.h"
#include "slurmrestapi/model/V0_0_40_openapi_warning.h"
#include "slurmrestapi/model/V0_0_40_openapi_meta.h"
#include "slurmrestapi/model/V0_0_40_wckey.h"
#include "slurmrestapi/model/V0_0_40_qos.h"
#include "slurmrestapi/model/V0_0_40_tres.h"
#include "slurmrestapi/model/V0_0_40_cluster_rec.h"
#include "slurmrestapi/model/V0_0_40_instance.h"
#include "slurmrestapi/model/V0_0_40_assoc.h"
#include "slurmrestapi/model/V0_0_40_user.h"
#include <vector>

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_40_cluster_rec;
class V0_0_40_tres;
class V0_0_40_account;
class V0_0_40_user;
class V0_0_40_qos;
class V0_0_40_wckey;
class V0_0_40_assoc;
class V0_0_40_instance;
class V0_0_40_openapi_meta;
class V0_0_40_openapi_error;
class V0_0_40_openapi_warning;


/// <summary>
/// 
/// </summary>
class  V0_0_40_openapi_slurmdbd_config_resp
    : public ModelBase
{
public:
    V0_0_40_openapi_slurmdbd_config_resp();
    virtual ~V0_0_40_openapi_slurmdbd_config_resp();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_openapi_slurmdbd_config_resp members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_cluster_rec>>& getClusters();
    bool clustersIsSet() const;
    void unsetClusters();

    void setClusters(const std::vector<std::shared_ptr<V0_0_40_cluster_rec>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getTres();
    bool tresIsSet() const;
    void unsetTres();

    void setTres(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_account>>& getAccounts();
    bool accountsIsSet() const;
    void unsetAccounts();

    void setAccounts(const std::vector<std::shared_ptr<V0_0_40_account>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_user>>& getUsers();
    bool usersIsSet() const;
    void unsetUsers();

    void setUsers(const std::vector<std::shared_ptr<V0_0_40_user>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_qos>>& getQos();
    bool qosIsSet() const;
    void unsetQos();

    void setQos(const std::vector<std::shared_ptr<V0_0_40_qos>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_wckey>>& getWckeys();
    bool wckeysIsSet() const;
    void unsetWckeys();

    void setWckeys(const std::vector<std::shared_ptr<V0_0_40_wckey>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_assoc>>& getAssociations();
    bool associationsIsSet() const;
    void unsetAssociations();

    void setAssociations(const std::vector<std::shared_ptr<V0_0_40_assoc>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_instance>>& getInstances();
    bool instancesIsSet() const;
    void unsetInstances();

    void setInstances(const std::vector<std::shared_ptr<V0_0_40_instance>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_openapi_meta> getMeta() const;
    bool metaIsSet() const;
    void unsetMeta();

    void setMeta(const std::shared_ptr<V0_0_40_openapi_meta>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_openapi_error>>& getErrors();
    bool errorsIsSet() const;
    void unsetErrors();

    void setErrors(const std::vector<std::shared_ptr<V0_0_40_openapi_error>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_openapi_warning>>& getWarnings();
    bool warningsIsSet() const;
    void unsetWarnings();

    void setWarnings(const std::vector<std::shared_ptr<V0_0_40_openapi_warning>>& value);


protected:
    std::vector<std::shared_ptr<V0_0_40_cluster_rec>> m_Clusters;
    bool m_ClustersIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Tres;
    bool m_TresIsSet;
    std::vector<std::shared_ptr<V0_0_40_account>> m_Accounts;
    bool m_AccountsIsSet;
    std::vector<std::shared_ptr<V0_0_40_user>> m_Users;
    bool m_UsersIsSet;
    std::vector<std::shared_ptr<V0_0_40_qos>> m_Qos;
    bool m_QosIsSet;
    std::vector<std::shared_ptr<V0_0_40_wckey>> m_Wckeys;
    bool m_WckeysIsSet;
    std::vector<std::shared_ptr<V0_0_40_assoc>> m_Associations;
    bool m_AssociationsIsSet;
    std::vector<std::shared_ptr<V0_0_40_instance>> m_Instances;
    bool m_InstancesIsSet;
    std::shared_ptr<V0_0_40_openapi_meta> m_Meta;
    bool m_MetaIsSet;
    std::vector<std::shared_ptr<V0_0_40_openapi_error>> m_Errors;
    bool m_ErrorsIsSet;
    std::vector<std::shared_ptr<V0_0_40_openapi_warning>> m_Warnings;
    bool m_WarningsIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_40_openapi_slurmdbd_config_resp_H_ */
