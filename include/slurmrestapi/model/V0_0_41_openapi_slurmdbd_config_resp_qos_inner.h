/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_slurmdbd_config_resp_qos_inner.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_slurmdbd_config_resp_qos_inner_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_slurmdbd_config_resp_qos_inner_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_preempt.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_priority.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_factor.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_threshold.h"
#include <vector>

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits;
class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_preempt;
class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_priority;
class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_factor;
class V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_threshold;


/// <summary>
/// 
/// </summary>
class  V0_0_41_openapi_slurmdbd_config_resp_qos_inner
    : public ModelBase
{
public:
    V0_0_41_openapi_slurmdbd_config_resp_qos_inner();
    virtual ~V0_0_41_openapi_slurmdbd_config_resp_qos_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_slurmdbd_config_resp_qos_inner members

    /// <summary>
    /// Arbitrary description
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Flags, to avoid modifying current values specify NOT_SET
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Unique ID
    /// </summary>
    int32_t getId() const;
    bool idIsSet() const;
    void unsetId();

    void setId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits> getLimits() const;
    bool limitsIsSet() const;
    void unsetLimits();

    void setLimits(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits>& value);

    /// <summary>
    /// Name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_preempt> getPreempt() const;
    bool preemptIsSet() const;
    void unsetPreempt();

    void setPreempt(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_preempt>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_priority> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_priority>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_factor> getUsageFactor() const;
    bool usageFactorIsSet() const;
    void unsetUsage_factor();

    void setUsageFactor(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_factor>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_threshold> getUsageThreshold() const;
    bool usageThresholdIsSet() const;
    void unsetUsage_threshold();

    void setUsageThreshold(const std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_threshold>& value);


protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    int32_t m_Id;
    bool m_IdIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_limits> m_Limits;
    bool m_LimitsIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_preempt> m_Preempt;
    bool m_PreemptIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_priority> m_Priority;
    bool m_PriorityIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_factor> m_Usage_factor;
    bool m_Usage_factorIsSet;
    std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp_qos_inner_usage_threshold> m_Usage_threshold;
    bool m_Usage_thresholdIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_slurmdbd_config_resp_qos_inner_H_ */
