/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_job_desc_msg_rlimits.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_40_job_desc_msg_rlimits_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_40_job_desc_msg_rlimits_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_uint64_no_val.h"

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_40_uint64_no_val;


/// <summary>
/// 
/// </summary>
class  V0_0_40_job_desc_msg_rlimits
    : public ModelBase
{
public:
    V0_0_40_job_desc_msg_rlimits();
    virtual ~V0_0_40_job_desc_msg_rlimits();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_job_desc_msg_rlimits members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getCpu() const;
    bool cpuIsSet() const;
    void unsetCpu();

    void setCpu(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getFsize() const;
    bool fsizeIsSet() const;
    void unsetFsize();

    void setFsize(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getData() const;
    bool dataIsSet() const;
    void unsetData();

    void setData(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getStack() const;
    bool stackIsSet() const;
    void unsetStack();

    void setStack(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getCore() const;
    bool coreIsSet() const;
    void unsetCore();

    void setCore(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getRss() const;
    bool rssIsSet() const;
    void unsetRss();

    void setRss(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getNproc() const;
    bool nprocIsSet() const;
    void unsetNproc();

    void setNproc(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getNofile() const;
    bool nofileIsSet() const;
    void unsetNofile();

    void setNofile(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getMemlock() const;
    bool memlockIsSet() const;
    void unsetMemlock();

    void setMemlock(const std::shared_ptr<V0_0_40_uint64_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint64_no_val> getAs() const;
    bool asIsSet() const;
    void unsetAs();

    void setAs(const std::shared_ptr<V0_0_40_uint64_no_val>& value);


protected:
    std::shared_ptr<V0_0_40_uint64_no_val> m_Cpu;
    bool m_CpuIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Fsize;
    bool m_FsizeIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Data;
    bool m_DataIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Stack;
    bool m_StackIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Core;
    bool m_CoreIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Rss;
    bool m_RssIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Nproc;
    bool m_NprocIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Nofile;
    bool m_NofileIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_Memlock;
    bool m_MemlockIsSet;
    std::shared_ptr<V0_0_40_uint64_no_val> m_As;
    bool m_AsIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_40_job_desc_msg_rlimits_H_ */
