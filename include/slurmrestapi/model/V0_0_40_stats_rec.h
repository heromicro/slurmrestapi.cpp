/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_stats_rec.h
 *
 * 
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_40_stats_rec_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_40_stats_rec_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_stats_user.h"
#include "slurmrestapi/model/V0_0_40_rollup_stats_inner.h"
#include "slurmrestapi/model/V0_0_40_stats_rpc.h"
#include <vector>

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_40_rollup_stats_inner;
class V0_0_40_stats_rpc;
class V0_0_40_stats_user;


/// <summary>
/// 
/// </summary>
class  V0_0_40_stats_rec
    : public ModelBase
{
public:
    V0_0_40_stats_rec();
    virtual ~V0_0_40_stats_rec();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_stats_rec members

    /// <summary>
    /// When data collection started (UNIX timestamp)
    /// </summary>
    int64_t getTimeStart() const;
    bool timeStartIsSet() const;
    void unsetTime_start();

    void setTimeStart(int64_t value);

    /// <summary>
    /// list of recorded rollup statistics
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_rollup_stats_inner>>& getRollups();
    bool rollupsIsSet() const;
    void unsetRollups();

    void setRollups(const std::vector<std::shared_ptr<V0_0_40_rollup_stats_inner>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_stats_rpc>>& getRPCs();
    bool rPCsIsSet() const;
    void unsetRPCs();

    void setRPCs(const std::vector<std::shared_ptr<V0_0_40_stats_rpc>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_stats_user>>& getUsers();
    bool usersIsSet() const;
    void unsetUsers();

    void setUsers(const std::vector<std::shared_ptr<V0_0_40_stats_user>>& value);


protected:
    int64_t m_Time_start;
    bool m_Time_startIsSet;
    std::vector<std::shared_ptr<V0_0_40_rollup_stats_inner>> m_Rollups;
    bool m_RollupsIsSet;
    std::vector<std::shared_ptr<V0_0_40_stats_rpc>> m_RPCs;
    bool m_RPCsIsSet;
    std::vector<std::shared_ptr<V0_0_40_stats_user>> m_Users;
    bool m_UsersIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_40_stats_rec_H_ */
