/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_diag_statistics_rollups_inner.h
 *
 * Rollup statistics
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_diag_statistics_rollups_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_diag_statistics_rollups_inner_H_


#include "slurmrestapi/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Rollup statistics
/// </summary>
class  Dbv0_0_38_diag_statistics_rollups_inner
    : public ModelBase
{
public:
    Dbv0_0_38_diag_statistics_rollups_inner();
    virtual ~Dbv0_0_38_diag_statistics_rollups_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_diag_statistics_rollups_inner members

    /// <summary>
    /// Type of rollup
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// Timestamp of last rollup
    /// </summary>
    int32_t getLastRun() const;
    bool lastRunIsSet() const;
    void unsetLast_run();

    void setLastRun(int32_t value);

    /// <summary>
    /// Timestamp of last cycle
    /// </summary>
    int32_t getLastCycle() const;
    bool lastCycleIsSet() const;
    void unsetLast_cycle();

    void setLastCycle(int32_t value);

    /// <summary>
    /// Max time of all cycles
    /// </summary>
    int32_t getMaxCycle() const;
    bool maxCycleIsSet() const;
    void unsetMax_cycle();

    void setMaxCycle(int32_t value);

    /// <summary>
    /// Total time (s) spent doing rollup
    /// </summary>
    int32_t getTotalTime() const;
    bool totalTimeIsSet() const;
    void unsetTotal_time();

    void setTotalTime(int32_t value);

    /// <summary>
    /// Average time (s) of cycle
    /// </summary>
    int32_t getMeanCycles() const;
    bool meanCyclesIsSet() const;
    void unsetMean_cycles();

    void setMeanCycles(int32_t value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    int32_t m_Last_run;
    bool m_Last_runIsSet;
    int32_t m_Last_cycle;
    bool m_Last_cycleIsSet;
    int32_t m_Max_cycle;
    bool m_Max_cycleIsSet;
    int32_t m_Total_time;
    bool m_Total_timeIsSet;
    int32_t m_Mean_cycles;
    bool m_Mean_cyclesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_diag_statistics_rollups_inner_H_ */
