/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_shares_resp_errors_inner.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_shares_resp_errors_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_shares_resp_errors_inner_H_


#include "slurmrestapi/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  V0_0_41_openapi_shares_resp_errors_inner
    : public ModelBase
{
public:
    V0_0_41_openapi_shares_resp_errors_inner();
    virtual ~V0_0_41_openapi_shares_resp_errors_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_shares_resp_errors_inner members

    /// <summary>
    /// Long form error description
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Slurm numeric error identifier
    /// </summary>
    int32_t getErrorNumber() const;
    bool errorNumberIsSet() const;
    void unsetError_number();

    void setErrorNumber(int32_t value);

    /// <summary>
    /// Short form error description
    /// </summary>
    utility::string_t getError() const;
    bool errorIsSet() const;
    void unsetError();

    void setError(const utility::string_t& value);

    /// <summary>
    /// Source of error or where error was first detected
    /// </summary>
    utility::string_t getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(const utility::string_t& value);


protected:
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    int32_t m_Error_number;
    bool m_Error_numberIsSet;
    utility::string_t m_Error;
    bool m_ErrorIsSet;
    utility::string_t m_Source;
    bool m_SourceIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_shares_resp_errors_inner_H_ */
