/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_assoc_rec_set.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_assoc_rec_set_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_assoc_rec_set_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_uint32_no_val.h"
#include "slurmrestapi/model/V0_0_40_tres.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_40_uint32_no_val;
class V0_0_40_tres;


/// <summary>
/// 
/// </summary>
class  V0_0_40_assoc_rec_set
    : public ModelBase
{
public:
    V0_0_40_assoc_rec_set();
    virtual ~V0_0_40_assoc_rec_set();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_assoc_rec_set members

    /// <summary>
    /// Arbitrary comment
    /// </summary>
    utility::string_t getComment() const;
    bool commentIsSet() const;
    void unsetComment();

    void setComment(const utility::string_t& value);

    /// <summary>
    /// Default QOS
    /// </summary>
    utility::string_t getDefaultqos() const;
    bool defaultqosIsSet() const;
    void unsetDefaultqos();

    void setDefaultqos(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getGrpjobs() const;
    bool grpjobsIsSet() const;
    void unsetGrpjobs();

    void setGrpjobs(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getGrpjobsaccrue() const;
    bool grpjobsaccrueIsSet() const;
    void unsetGrpjobsaccrue();

    void setGrpjobsaccrue(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getGrpsubmitjobs() const;
    bool grpsubmitjobsIsSet() const;
    void unsetGrpsubmitjobs();

    void setGrpsubmitjobs(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getGrptres();
    bool grptresIsSet() const;
    void unsetGrptres();

    void setGrptres(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getGrptresmins();
    bool grptresminsIsSet() const;
    void unsetGrptresmins();

    void setGrptresmins(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getGrptresrunmins();
    bool grptresrunminsIsSet() const;
    void unsetGrptresrunmins();

    void setGrptresrunmins(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getGrpwall() const;
    bool grpwallIsSet() const;
    void unsetGrpwall();

    void setGrpwall(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getMaxjobs() const;
    bool maxjobsIsSet() const;
    void unsetMaxjobs();

    void setMaxjobs(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getMaxjobsaccrue() const;
    bool maxjobsaccrueIsSet() const;
    void unsetMaxjobsaccrue();

    void setMaxjobsaccrue(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getMaxsubmitjobs() const;
    bool maxsubmitjobsIsSet() const;
    void unsetMaxsubmitjobs();

    void setMaxsubmitjobs(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getMaxtresminsperjob();
    bool maxtresminsperjobIsSet() const;
    void unsetMaxtresminsperjob();

    void setMaxtresminsperjob(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getMaxtresrunmins();
    bool maxtresrunminsIsSet() const;
    void unsetMaxtresrunmins();

    void setMaxtresrunmins(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getMaxtresperjob();
    bool maxtresperjobIsSet() const;
    void unsetMaxtresperjob();

    void setMaxtresperjob(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_tres>>& getMaxtrespernode();
    bool maxtrespernodeIsSet() const;
    void unsetMaxtrespernode();

    void setMaxtrespernode(const std::vector<std::shared_ptr<V0_0_40_tres>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getMaxwalldurationperjob() const;
    bool maxwalldurationperjobIsSet() const;
    void unsetMaxwalldurationperjob();

    void setMaxwalldurationperjob(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getMinpriothresh() const;
    bool minpriothreshIsSet() const;
    void unsetMinpriothresh();

    void setMinpriothresh(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// Name of parent account
    /// </summary>
    utility::string_t getParent() const;
    bool parentIsSet() const;
    void unsetParent();

    void setParent(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_40_uint32_no_val> getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(const std::shared_ptr<V0_0_40_uint32_no_val>& value);

    /// <summary>
    /// List of QOS names
    /// </summary>
    std::vector<utility::string_t>& getQoslevel();
    bool qoslevelIsSet() const;
    void unsetQoslevel();

    void setQoslevel(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Allocated shares used for fairshare calculation
    /// </summary>
    int32_t getFairshare() const;
    bool fairshareIsSet() const;
    void unsetFairshare();

    void setFairshare(int32_t value);


protected:
    utility::string_t m_Comment;
    bool m_CommentIsSet;
    utility::string_t m_Defaultqos;
    bool m_DefaultqosIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Grpjobs;
    bool m_GrpjobsIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Grpjobsaccrue;
    bool m_GrpjobsaccrueIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Grpsubmitjobs;
    bool m_GrpsubmitjobsIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Grptres;
    bool m_GrptresIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Grptresmins;
    bool m_GrptresminsIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Grptresrunmins;
    bool m_GrptresrunminsIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Grpwall;
    bool m_GrpwallIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Maxjobs;
    bool m_MaxjobsIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Maxjobsaccrue;
    bool m_MaxjobsaccrueIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Maxsubmitjobs;
    bool m_MaxsubmitjobsIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Maxtresminsperjob;
    bool m_MaxtresminsperjobIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Maxtresrunmins;
    bool m_MaxtresrunminsIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Maxtresperjob;
    bool m_MaxtresperjobIsSet;
    std::vector<std::shared_ptr<V0_0_40_tres>> m_Maxtrespernode;
    bool m_MaxtrespernodeIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Maxwalldurationperjob;
    bool m_MaxwalldurationperjobIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Minpriothresh;
    bool m_MinpriothreshIsSet;
    utility::string_t m_Parent;
    bool m_ParentIsSet;
    std::shared_ptr<V0_0_40_uint32_no_val> m_Priority;
    bool m_PriorityIsSet;
    std::vector<utility::string_t> m_Qoslevel;
    bool m_QoslevelIsSet;
    int32_t m_Fairshare;
    bool m_FairshareIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_assoc_rec_set_H_ */
