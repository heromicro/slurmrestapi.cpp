/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_schedule_exit_fields.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_schedule_exit_fields_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_schedule_exit_fields_H_


#include "slurmrestapi/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  V0_0_40_schedule_exit_fields
    : public ModelBase
{
public:
    V0_0_40_schedule_exit_fields();
    virtual ~V0_0_40_schedule_exit_fields();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_schedule_exit_fields members

    /// <summary>
    /// Reached end of queue
    /// </summary>
    int32_t getEndJobQueue() const;
    bool endJobQueueIsSet() const;
    void unsetEnd_job_queue();

    void setEndJobQueue(int32_t value);

    /// <summary>
    /// Reached number of jobs allowed to be tested
    /// </summary>
    int32_t getDefaultQueueDepth() const;
    bool defaultQueueDepthIsSet() const;
    void unsetDefault_queue_depth();

    void setDefaultQueueDepth(int32_t value);

    /// <summary>
    /// Reached number of jobs allowed to start
    /// </summary>
    int32_t getMaxJobStart() const;
    bool maxJobStartIsSet() const;
    void unsetMax_job_start();

    void setMaxJobStart(int32_t value);

    /// <summary>
    /// Reached RPC limit
    /// </summary>
    int32_t getMaxRpcCnt() const;
    bool maxRpcCntIsSet() const;
    void unsetMax_rpc_cnt();

    void setMaxRpcCnt(int32_t value);

    /// <summary>
    /// Reached maximum allowed scheduler time
    /// </summary>
    int32_t getMaxSchedTime() const;
    bool maxSchedTimeIsSet() const;
    void unsetMax_sched_time();

    void setMaxSchedTime(int32_t value);

    /// <summary>
    /// Blocked on licenses
    /// </summary>
    int32_t getLicenses() const;
    bool licensesIsSet() const;
    void unsetLicenses();

    void setLicenses(int32_t value);


protected:
    int32_t m_End_job_queue;
    bool m_End_job_queueIsSet;
    int32_t m_Default_queue_depth;
    bool m_Default_queue_depthIsSet;
    int32_t m_Max_job_start;
    bool m_Max_job_startIsSet;
    int32_t m_Max_rpc_cnt;
    bool m_Max_rpc_cntIsSet;
    int32_t m_Max_sched_time;
    bool m_Max_sched_timeIsSet;
    int32_t m_Licenses;
    bool m_LicensesIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_schedule_exit_fields_H_ */
