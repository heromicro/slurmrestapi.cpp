/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_association.h
 *
 * Association description
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_association_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_association_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/Dbv0_0_38_association_max.h"
#include "slurmrestapi/model/Dbv0_0_38_association_usage.h"
#include "slurmrestapi/model/Dbv0_0_38_association_default.h"
#include "slurmrestapi/model/Dbv0_0_38_association_min.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_38_association_default;
class Dbv0_0_38_association_max;
class Dbv0_0_38_association_min;
class Dbv0_0_38_association_usage;

/// <summary>
/// Association description
/// </summary>
class  Dbv0_0_38_association
    : public ModelBase
{
public:
    Dbv0_0_38_association();
    virtual ~Dbv0_0_38_association();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_association members

    /// <summary>
    /// Assigned account
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// Assigned cluster
    /// </summary>
    utility::string_t getCluster() const;
    bool clusterIsSet() const;
    void unsetCluster();

    void setCluster(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_association_default> getRDefault() const;
    bool rDefaultIsSet() const;
    void unsetr_default();

    void setRDefault(const std::shared_ptr<Dbv0_0_38_association_default>& value);

    /// <summary>
    /// List of properties of association
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_association_max> getMax() const;
    bool maxIsSet() const;
    void unsetMax();

    void setMax(const std::shared_ptr<Dbv0_0_38_association_max>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_association_min> getMin() const;
    bool minIsSet() const;
    void unsetMin();

    void setMin(const std::shared_ptr<Dbv0_0_38_association_min>& value);

    /// <summary>
    /// Parent account name
    /// </summary>
    utility::string_t getParentAccount() const;
    bool parentAccountIsSet() const;
    void unsetParent_account();

    void setParentAccount(const utility::string_t& value);

    /// <summary>
    /// Assigned partition
    /// </summary>
    utility::string_t getPartition() const;
    bool partitionIsSet() const;
    void unsetPartition();

    void setPartition(const utility::string_t& value);

    /// <summary>
    /// Assigned priority
    /// </summary>
    int32_t getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(int32_t value);

    /// <summary>
    /// Raw fairshare shares
    /// </summary>
    int32_t getSharesRaw() const;
    bool sharesRawIsSet() const;
    void unsetShares_raw();

    void setSharesRaw(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_association_usage> getUsage() const;
    bool usageIsSet() const;
    void unsetUsage();

    void setUsage(const std::shared_ptr<Dbv0_0_38_association_usage>& value);

    /// <summary>
    /// Assigned user
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);

    /// <summary>
    /// Assigned QOS
    /// </summary>
    std::vector<utility::string_t>& getQOS();
    bool qOSIsSet() const;
    void unsetQOS();

    void setQOS(const std::vector<utility::string_t>& value);


protected:
    utility::string_t m_Account;
    bool m_AccountIsSet;
    utility::string_t m_Cluster;
    bool m_ClusterIsSet;
    std::shared_ptr<Dbv0_0_38_association_default> m_r_default;
    bool m_r_defaultIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    std::shared_ptr<Dbv0_0_38_association_max> m_Max;
    bool m_MaxIsSet;
    std::shared_ptr<Dbv0_0_38_association_min> m_Min;
    bool m_MinIsSet;
    utility::string_t m_Parent_account;
    bool m_Parent_accountIsSet;
    utility::string_t m_Partition;
    bool m_PartitionIsSet;
    int32_t m_Priority;
    bool m_PriorityIsSet;
    int32_t m_Shares_raw;
    bool m_Shares_rawIsSet;
    std::shared_ptr<Dbv0_0_38_association_usage> m_Usage;
    bool m_UsageIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
    std::vector<utility::string_t> m_QOS;
    bool m_QOSIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_association_H_ */
