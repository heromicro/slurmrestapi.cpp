/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner.h
 *
 * Pending RPCs by hostlist
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner_H_


#include "slurmrestapi/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// Pending RPCs by hostlist
/// </summary>
class  V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner
    : public ModelBase
{
public:
    V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner();
    virtual ~V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner members

    /// <summary>
    /// Message type as integer
    /// </summary>
    int32_t getTypeId() const;
    bool r_typeIdIsSet() const;
    void unsetType_id();

    void setTypeId(int32_t value);

    /// <summary>
    /// Message type as string
    /// </summary>
    utility::string_t getMessageType() const;
    bool messageTypeIsSet() const;
    void unsetMessage_type();

    void setMessageType(const utility::string_t& value);

    /// <summary>
    /// Number of RPCs received
    /// </summary>
    std::vector<utility::string_t>& getCount();
    bool countIsSet() const;
    void unsetCount();

    void setCount(const std::vector<utility::string_t>& value);


protected:
    int32_t m_Type_id;
    bool m_Type_idIsSet;
    utility::string_t m_Message_type;
    bool m_Message_typeIsSet;
    std::vector<utility::string_t> m_Count;
    bool m_CountIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_diag_resp_statistics_pending_rpcs_by_hostlist_inner_H_ */
