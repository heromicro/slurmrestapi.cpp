/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner.h
 *
 * RPCs by type
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time.h"
#include <cpprest/details/basic_types.h>

namespace hm {
namespace slurm {
namespace client {
namespace model {

class V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time;


/// <summary>
/// RPCs by type
/// </summary>
class  V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner
    : public ModelBase
{
public:
    V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner();
    virtual ~V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner members

    /// <summary>
    /// Message type as integer
    /// </summary>
    int32_t getTypeId() const;
    bool r_typeIdIsSet() const;
    void unsetType_id();

    void setTypeId(int32_t value);

    /// <summary>
    /// Message type as string
    /// </summary>
    utility::string_t getMessageType() const;
    bool messageTypeIsSet() const;
    void unsetMessage_type();

    void setMessageType(const utility::string_t& value);

    /// <summary>
    /// Number of RPCs received
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// Number of RPCs queued
    /// </summary>
    int32_t getQueued() const;
    bool queuedIsSet() const;
    void unsetQueued();

    void setQueued(int32_t value);

    /// <summary>
    /// Number of RPCs dropped
    /// </summary>
    int64_t getDropped() const;
    bool droppedIsSet() const;
    void unsetDropped();

    void setDropped(int64_t value);

    /// <summary>
    /// Number of RPCs processed within the last RPC queue cycle
    /// </summary>
    int32_t getCycleLast() const;
    bool cycleLastIsSet() const;
    void unsetCycle_last();

    void setCycleLast(int32_t value);

    /// <summary>
    /// Maximum number of RPCs processed within a RPC queue cycle since start
    /// </summary>
    int32_t getCycleMax() const;
    bool cycleMaxIsSet() const;
    void unsetCycle_max();

    void setCycleMax(int32_t value);

    /// <summary>
    /// Total time spent processing RPC in seconds
    /// </summary>
    int64_t getTotalTime() const;
    bool totalTimeIsSet() const;
    void unsetTotal_time();

    void setTotalTime(int64_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time> getAverageTime() const;
    bool averageTimeIsSet() const;
    void unsetAverage_time();

    void setAverageTime(const std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time>& value);


protected:
    int32_t m_Type_id;
    bool m_Type_idIsSet;
    utility::string_t m_Message_type;
    bool m_Message_typeIsSet;
    int32_t m_Count;
    bool m_CountIsSet;
    int32_t m_Queued;
    bool m_QueuedIsSet;
    int64_t m_Dropped;
    bool m_DroppedIsSet;
    int32_t m_Cycle_last;
    bool m_Cycle_lastIsSet;
    int32_t m_Cycle_max;
    bool m_Cycle_maxIsSet;
    int64_t m_Total_time;
    bool m_Total_timeIsSet;
    std::shared_ptr<V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_average_time> m_Average_time;
    bool m_Average_timeIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_41_openapi_diag_resp_statistics_rpcs_by_message_type_inner_H_ */
