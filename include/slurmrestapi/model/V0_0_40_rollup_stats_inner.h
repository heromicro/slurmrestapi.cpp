/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_rollup_stats_inner.h
 *
 * recorded rollup statistics
 */

#ifndef HM_SLURM_CLIENT_MODEL_V0_0_40_rollup_stats_inner_H_
#define HM_SLURM_CLIENT_MODEL_V0_0_40_rollup_stats_inner_H_


#include "slurmrestapi/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace hm {
namespace slurm {
namespace client {
namespace model {



/// <summary>
/// recorded rollup statistics
/// </summary>
class  V0_0_40_rollup_stats_inner
    : public ModelBase
{
public:
    V0_0_40_rollup_stats_inner();
    virtual ~V0_0_40_rollup_stats_inner();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_rollup_stats_inner members

    /// <summary>
    /// type
    /// </summary>
    utility::string_t getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const utility::string_t& value);

    /// <summary>
    /// Last time rollup ran (UNIX timestamp)
    /// </summary>
    int32_t getLastRun() const;
    bool lastRunIsSet() const;
    void unsetLast_run();

    void setLastRun(int32_t value);

    /// <summary>
    /// longest rollup time (seconds)
    /// </summary>
    int64_t getMaxCycle() const;
    bool maxCycleIsSet() const;
    void unsetMax_cycle();

    void setMaxCycle(int64_t value);

    /// <summary>
    /// total time spent doing rollups (seconds)
    /// </summary>
    int64_t getTotalTime() const;
    bool totalTimeIsSet() const;
    void unsetTotal_time();

    void setTotalTime(int64_t value);

    /// <summary>
    /// number of rollups since last_run
    /// </summary>
    int64_t getTotalCycles() const;
    bool totalCyclesIsSet() const;
    void unsetTotal_cycles();

    void setTotalCycles(int64_t value);

    /// <summary>
    /// average time for rollup (seconds)
    /// </summary>
    int64_t getMeanCycles() const;
    bool meanCyclesIsSet() const;
    void unsetMean_cycles();

    void setMeanCycles(int64_t value);


protected:
    utility::string_t m_Type;
    bool m_TypeIsSet;
    int32_t m_Last_run;
    bool m_Last_runIsSet;
    int64_t m_Max_cycle;
    bool m_Max_cycleIsSet;
    int64_t m_Total_time;
    bool m_Total_timeIsSet;
    int64_t m_Total_cycles;
    bool m_Total_cyclesIsSet;
    int64_t m_Mean_cycles;
    bool m_Mean_cyclesIsSet;
};


}
}
}
}

#endif /* HM_SLURM_CLIENT_MODEL_V0_0_40_rollup_stats_inner_H_ */
