/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner.h"
#include <cpprest/details/basic_types.h>
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner;


/// <summary>
/// 
/// </summary>
class  V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes
    : public ModelBase
{
public:
    V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes();
    virtual ~V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes members

    /// <summary>
    /// Number of allocated nodes
    /// </summary>
    int32_t getCount() const;
    bool countIsSet() const;
    void unsetCount();

    void setCount(int32_t value);

    /// <summary>
    /// Node scheduling selection method
    /// </summary>
    std::vector<utility::string_t>& getSelectType();
    bool selectTypeIsSet() const;
    void unsetSelect_type();

    void setSelectType(const std::vector<utility::string_t>& value);

    /// <summary>
    /// Node(s) allocated to the job
    /// </summary>
    utility::string_t getList() const;
    bool listIsSet() const;
    void unsetList();

    void setList(const utility::string_t& value);

    /// <summary>
    /// Whether whole nodes were allocated
    /// </summary>
    bool isWhole() const;
    bool wholeIsSet() const;
    void unsetWhole();

    void setWhole(bool value);

    /// <summary>
    /// Allocated node resources
    /// </summary>
    std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner>>& getAllocation();
    bool allocationIsSet() const;
    void unsetAllocation();

    void setAllocation(const std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner>>& value);


protected:
    int32_t m_Count;
    bool m_CountIsSet;
    std::vector<utility::string_t> m_Select_type;
    bool m_Select_typeIsSet;
    utility::string_t m_List;
    bool m_ListIsSet;
    bool m_Whole;
    bool m_WholeIsSet;
    std::vector<std::shared_ptr<V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_allocation_inner>> m_Allocation;
    bool m_AllocationIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_41_openapi_job_info_resp_jobs_inner_job_resources_nodes_H_ */
