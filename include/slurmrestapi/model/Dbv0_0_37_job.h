/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_37_job.h
 *
 * Single job description
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_37_job_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_37_job_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/Dbv0_0_37_job_reservation.h"
#include "slurmrestapi/model/Dbv0_0_37_job_exit_code.h"
#include "slurmrestapi/model/Dbv0_0_37_job_het.h"
#include "slurmrestapi/model/Dbv0_0_37_job_comment.h"
#include "slurmrestapi/model/Dbv0_0_37_job_tres.h"
#include <vector>
#include "slurmrestapi/model/Dbv0_0_37_association_short_info.h"
#include "slurmrestapi/model/Dbv0_0_37_job_step.h"
#include "slurmrestapi/model/Dbv0_0_37_job_array.h"
#include "slurmrestapi/model/Dbv0_0_37_job_mcs.h"
#include "slurmrestapi/model/Dbv0_0_37_job_time.h"
#include "slurmrestapi/model/Dbv0_0_37_job_wckey.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/Dbv0_0_37_job_state.h"
#include "slurmrestapi/model/Dbv0_0_37_job_required.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_37_job_comment;
class Dbv0_0_37_job_array;
class Dbv0_0_37_job_time;
class Dbv0_0_37_association_short_info;
class Dbv0_0_37_job_exit_code;
class Dbv0_0_37_job_het;
class Dbv0_0_37_job_mcs;
class Dbv0_0_37_job_required;
class Dbv0_0_37_job_reservation;
class Dbv0_0_37_job_state;
class Dbv0_0_37_job_step;
class Dbv0_0_37_job_tres;
class Dbv0_0_37_job_wckey;

/// <summary>
/// Single job description
/// </summary>
class  Dbv0_0_37_job
    : public ModelBase
{
public:
    Dbv0_0_37_job();
    virtual ~Dbv0_0_37_job();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_37_job members

    /// <summary>
    /// Account charged by job
    /// </summary>
    utility::string_t getAccount() const;
    bool accountIsSet() const;
    void unsetAccount();

    void setAccount(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_comment> getComment() const;
    bool commentIsSet() const;
    void unsetComment();

    void setComment(const std::shared_ptr<Dbv0_0_37_job_comment>& value);

    /// <summary>
    /// Nodes allocated to job
    /// </summary>
    utility::string_t getAllocationNodes() const;
    bool allocationNodesIsSet() const;
    void unsetAllocation_nodes();

    void setAllocationNodes(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_array> getArray() const;
    bool arrayIsSet() const;
    void unsetarray();

    void setArray(const std::shared_ptr<Dbv0_0_37_job_array>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_time> getTime() const;
    bool timeIsSet() const;
    void unsetTime();

    void setTime(const std::shared_ptr<Dbv0_0_37_job_time>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_association_short_info> getAssociation() const;
    bool associationIsSet() const;
    void unsetAssociation();

    void setAssociation(const std::shared_ptr<Dbv0_0_37_association_short_info>& value);

    /// <summary>
    /// Assigned cluster
    /// </summary>
    utility::string_t getCluster() const;
    bool clusterIsSet() const;
    void unsetCluster();

    void setCluster(const utility::string_t& value);

    /// <summary>
    /// Constraints on job
    /// </summary>
    utility::string_t getConstraints() const;
    bool constraintsIsSet() const;
    void unsetConstraints();

    void setConstraints(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_exit_code> getDerivedExitCode() const;
    bool derivedExitCodeIsSet() const;
    void unsetDerived_exit_code();

    void setDerivedExitCode(const std::shared_ptr<Dbv0_0_37_job_exit_code>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_exit_code> getExitCode() const;
    bool exitCodeIsSet() const;
    void unsetExit_code();

    void setExitCode(const std::shared_ptr<Dbv0_0_37_job_exit_code>& value);

    /// <summary>
    /// List of properties of job
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);

    /// <summary>
    /// User&#39;s group to run job
    /// </summary>
    utility::string_t getGroup() const;
    bool groupIsSet() const;
    void unsetGroup();

    void setGroup(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_het> getHet() const;
    bool hetIsSet() const;
    void unsetHet();

    void setHet(const std::shared_ptr<Dbv0_0_37_job_het>& value);

    /// <summary>
    /// Job id
    /// </summary>
    int32_t getJobId() const;
    bool jobIdIsSet() const;
    void unsetJob_id();

    void setJobId(int32_t value);

    /// <summary>
    /// Assigned job name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_mcs> getMcs() const;
    bool mcsIsSet() const;
    void unsetMcs();

    void setMcs(const std::shared_ptr<Dbv0_0_37_job_mcs>& value);

    /// <summary>
    /// List of nodes allocated for job
    /// </summary>
    utility::string_t getNodes() const;
    bool nodesIsSet() const;
    void unsetNodes();

    void setNodes(const utility::string_t& value);

    /// <summary>
    /// Assigned job&#39;s partition
    /// </summary>
    utility::string_t getPartition() const;
    bool partitionIsSet() const;
    void unsetPartition();

    void setPartition(const utility::string_t& value);

    /// <summary>
    /// Priority
    /// </summary>
    int32_t getPriority() const;
    bool priorityIsSet() const;
    void unsetPriority();

    void setPriority(int32_t value);

    /// <summary>
    /// Assigned qos name
    /// </summary>
    utility::string_t getQos() const;
    bool qosIsSet() const;
    void unsetQos();

    void setQos(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_required> getRequired() const;
    bool requiredIsSet() const;
    void unsetRequired();

    void setRequired(const std::shared_ptr<Dbv0_0_37_job_required>& value);

    /// <summary>
    /// User who requested job killed
    /// </summary>
    utility::string_t getKillRequestUser() const;
    bool killRequestUserIsSet() const;
    void unsetKill_request_user();

    void setKillRequestUser(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_reservation> getReservation() const;
    bool reservationIsSet() const;
    void unsetReservation();

    void setReservation(const std::shared_ptr<Dbv0_0_37_job_reservation>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_state> getState() const;
    bool stateIsSet() const;
    void unsetState();

    void setState(const std::shared_ptr<Dbv0_0_37_job_state>& value);

    /// <summary>
    /// Job step description
    /// </summary>
    std::vector<std::shared_ptr<Dbv0_0_37_job_step>>& getSteps();
    bool stepsIsSet() const;
    void unsetSteps();

    void setSteps(const std::vector<std::shared_ptr<Dbv0_0_37_job_step>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_tres> getTres() const;
    bool tresIsSet() const;
    void unsetTres();

    void setTres(const std::shared_ptr<Dbv0_0_37_job_tres>& value);

    /// <summary>
    /// Job user
    /// </summary>
    utility::string_t getUser() const;
    bool userIsSet() const;
    void unsetUser();

    void setUser(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_37_job_wckey> getWckey() const;
    bool wckeyIsSet() const;
    void unsetWckey();

    void setWckey(const std::shared_ptr<Dbv0_0_37_job_wckey>& value);

    /// <summary>
    /// Directory where job was initially started
    /// </summary>
    utility::string_t getWorkingDirectory() const;
    bool workingDirectoryIsSet() const;
    void unsetWorking_directory();

    void setWorkingDirectory(const utility::string_t& value);


protected:
    utility::string_t m_Account;
    bool m_AccountIsSet;
    std::shared_ptr<Dbv0_0_37_job_comment> m_Comment;
    bool m_CommentIsSet;
    utility::string_t m_Allocation_nodes;
    bool m_Allocation_nodesIsSet;
    std::shared_ptr<Dbv0_0_37_job_array> m_array;
    bool m_arrayIsSet;
    std::shared_ptr<Dbv0_0_37_job_time> m_Time;
    bool m_TimeIsSet;
    std::shared_ptr<Dbv0_0_37_association_short_info> m_Association;
    bool m_AssociationIsSet;
    utility::string_t m_Cluster;
    bool m_ClusterIsSet;
    utility::string_t m_Constraints;
    bool m_ConstraintsIsSet;
    std::shared_ptr<Dbv0_0_37_job_exit_code> m_Derived_exit_code;
    bool m_Derived_exit_codeIsSet;
    std::shared_ptr<Dbv0_0_37_job_exit_code> m_Exit_code;
    bool m_Exit_codeIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
    utility::string_t m_Group;
    bool m_GroupIsSet;
    std::shared_ptr<Dbv0_0_37_job_het> m_Het;
    bool m_HetIsSet;
    int32_t m_Job_id;
    bool m_Job_idIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    std::shared_ptr<Dbv0_0_37_job_mcs> m_Mcs;
    bool m_McsIsSet;
    utility::string_t m_Nodes;
    bool m_NodesIsSet;
    utility::string_t m_Partition;
    bool m_PartitionIsSet;
    int32_t m_Priority;
    bool m_PriorityIsSet;
    utility::string_t m_Qos;
    bool m_QosIsSet;
    std::shared_ptr<Dbv0_0_37_job_required> m_Required;
    bool m_RequiredIsSet;
    utility::string_t m_Kill_request_user;
    bool m_Kill_request_userIsSet;
    std::shared_ptr<Dbv0_0_37_job_reservation> m_Reservation;
    bool m_ReservationIsSet;
    std::shared_ptr<Dbv0_0_37_job_state> m_State;
    bool m_StateIsSet;
    std::vector<std::shared_ptr<Dbv0_0_37_job_step>> m_Steps;
    bool m_StepsIsSet;
    std::shared_ptr<Dbv0_0_37_job_tres> m_Tres;
    bool m_TresIsSet;
    utility::string_t m_User;
    bool m_UserIsSet;
    std::shared_ptr<Dbv0_0_37_job_wckey> m_Wckey;
    bool m_WckeyIsSet;
    utility::string_t m_Working_directory;
    bool m_Working_directoryIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_37_job_H_ */
