/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_38_job_array.h
 *
 * Array properties (optional)
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_array_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_array_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/Dbv0_0_38_job_array_limits.h"
#include <cpprest/details/basic_types.h>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class Dbv0_0_38_job_array_limits;

/// <summary>
/// Array properties (optional)
/// </summary>
class  Dbv0_0_38_job_array
    : public ModelBase
{
public:
    Dbv0_0_38_job_array();
    virtual ~Dbv0_0_38_job_array();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_38_job_array members

    /// <summary>
    /// Job id of array
    /// </summary>
    int32_t getJobId() const;
    bool jobIdIsSet() const;
    void unsetJob_id();

    void setJobId(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<Dbv0_0_38_job_array_limits> getLimits() const;
    bool limitsIsSet() const;
    void unsetLimits();

    void setLimits(const std::shared_ptr<Dbv0_0_38_job_array_limits>& value);

    /// <summary>
    /// Array task
    /// </summary>
    utility::string_t getTask() const;
    bool taskIsSet() const;
    void unsetTask();

    void setTask(const utility::string_t& value);

    /// <summary>
    /// Array task id
    /// </summary>
    int32_t getTaskId() const;
    bool taskIdIsSet() const;
    void unsetTask_id();

    void setTaskId(int32_t value);


protected:
    int32_t m_Job_id;
    bool m_Job_idIsSet;
    std::shared_ptr<Dbv0_0_38_job_array_limits> m_Limits;
    bool m_LimitsIsSet;
    utility::string_t m_Task;
    bool m_TaskIsSet;
    int32_t m_Task_id;
    bool m_Task_idIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_38_job_array_H_ */
