/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_40_account.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_account_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_account_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_40_assoc_short.h"
#include <cpprest/details/basic_types.h>
#include "slurmrestapi/model/V0_0_40_coord.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_40_assoc_short;
class V0_0_40_coord;


/// <summary>
/// 
/// </summary>
class  V0_0_40_account
    : public ModelBase
{
public:
    V0_0_40_account();
    virtual ~V0_0_40_account();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_40_account members

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_assoc_short>>& getAssociations();
    bool associationsIsSet() const;
    void unsetAssociations();

    void setAssociations(const std::vector<std::shared_ptr<V0_0_40_assoc_short>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<V0_0_40_coord>>& getCoordinators();
    bool coordinatorsIsSet() const;
    void unsetCoordinators();

    void setCoordinators(const std::vector<std::shared_ptr<V0_0_40_coord>>& value);

    /// <summary>
    /// Arbitrary string describing the account
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// Account name
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// Organization to which the account belongs
    /// </summary>
    utility::string_t getOrganization() const;
    bool organizationIsSet() const;
    void unsetOrganization();

    void setOrganization(const utility::string_t& value);

    /// <summary>
    /// Flags associated with the account
    /// </summary>
    std::vector<utility::string_t>& getFlags();
    bool flagsIsSet() const;
    void unsetFlags();

    void setFlags(const std::vector<utility::string_t>& value);


protected:
    std::vector<std::shared_ptr<V0_0_40_assoc_short>> m_Associations;
    bool m_AssociationsIsSet;
    std::vector<std::shared_ptr<V0_0_40_coord>> m_Coordinators;
    bool m_CoordinatorsIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Organization;
    bool m_OrganizationIsSet;
    std::vector<utility::string_t> m_Flags;
    bool m_FlagsIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_40_account_H_ */
