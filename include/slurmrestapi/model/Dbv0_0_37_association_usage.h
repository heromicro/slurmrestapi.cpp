/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.37
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Dbv0_0_37_association_usage.h
 *
 * Association usage
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_37_association_usage_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_37_association_usage_H_


#include "slurmrestapi/ModelBase.h"


namespace org {
namespace openapitools {
namespace client {
namespace model {


/// <summary>
/// Association usage
/// </summary>
class  Dbv0_0_37_association_usage
    : public ModelBase
{
public:
    Dbv0_0_37_association_usage();
    virtual ~Dbv0_0_37_association_usage();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Dbv0_0_37_association_usage members

    /// <summary>
    /// Jobs accuring priority
    /// </summary>
    int32_t getAccrueJobCount() const;
    bool accrueJobCountIsSet() const;
    void unsetAccrue_job_count();

    void setAccrueJobCount(int32_t value);

    /// <summary>
    /// Group used wallclock time (s)
    /// </summary>
    double getGroupUsedWallclock() const;
    bool groupUsedWallclockIsSet() const;
    void unsetGroup_used_wallclock();

    void setGroupUsedWallclock(double value);

    /// <summary>
    /// Fairshare factor
    /// </summary>
    double getFairshareFactor() const;
    bool fairshareFactorIsSet() const;
    void unsetFairshare_factor();

    void setFairshareFactor(double value);

    /// <summary>
    /// Fairshare shares
    /// </summary>
    int32_t getFairshareShares() const;
    bool fairshareSharesIsSet() const;
    void unsetFairshare_shares();

    void setFairshareShares(int32_t value);

    /// <summary>
    /// Currently active jobs
    /// </summary>
    int32_t getNormalizedPriority() const;
    bool normalizedPriorityIsSet() const;
    void unsetNormalized_priority();

    void setNormalizedPriority(int32_t value);

    /// <summary>
    /// Normalized shares
    /// </summary>
    double getNormalizedShares() const;
    bool normalizedSharesIsSet() const;
    void unsetNormalized_shares();

    void setNormalizedShares(double value);

    /// <summary>
    /// Effective normalized usage
    /// </summary>
    double getEffectiveNormalizedUsage() const;
    bool effectiveNormalizedUsageIsSet() const;
    void unsetEffective_normalized_usage();

    void setEffectiveNormalizedUsage(double value);

    /// <summary>
    /// Raw usage
    /// </summary>
    int32_t getRawUsage() const;
    bool rawUsageIsSet() const;
    void unsetRaw_usage();

    void setRawUsage(int32_t value);

    /// <summary>
    /// Total jobs submitted
    /// </summary>
    int32_t getJobCount() const;
    bool jobCountIsSet() const;
    void unsetJob_count();

    void setJobCount(int32_t value);

    /// <summary>
    /// Fairshare level
    /// </summary>
    double getFairshareLevel() const;
    bool fairshareLevelIsSet() const;
    void unsetFairshare_level();

    void setFairshareLevel(double value);


protected:
    int32_t m_Accrue_job_count;
    bool m_Accrue_job_countIsSet;
    double m_Group_used_wallclock;
    bool m_Group_used_wallclockIsSet;
    double m_Fairshare_factor;
    bool m_Fairshare_factorIsSet;
    int32_t m_Fairshare_shares;
    bool m_Fairshare_sharesIsSet;
    int32_t m_Normalized_priority;
    bool m_Normalized_priorityIsSet;
    double m_Normalized_shares;
    bool m_Normalized_sharesIsSet;
    double m_Effective_normalized_usage;
    bool m_Effective_normalized_usageIsSet;
    int32_t m_Raw_usage;
    bool m_Raw_usageIsSet;
    int32_t m_Job_count;
    bool m_Job_countIsSet;
    double m_Fairshare_level;
    bool m_Fairshare_levelIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_Dbv0_0_37_association_usage_H_ */
