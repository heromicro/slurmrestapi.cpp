/**
 * Slurm Rest API
 * API to access and control Slurm.
 *
 * The version of the OpenAPI document: 0.0.38
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 6.6.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * V0_0_38_diag_statistics.h
 *
 * Slurm statistics
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_38_diag_statistics_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_38_diag_statistics_H_


#include "slurmrestapi/ModelBase.h"

#include "slurmrestapi/model/V0_0_38_diag_rpcu.h"
#include "slurmrestapi/model/V0_0_38_diag_rpcm.h"
#include <vector>

namespace org {
namespace openapitools {
namespace client {
namespace model {

class V0_0_38_diag_rpcm;
class V0_0_38_diag_rpcu;

/// <summary>
/// Slurm statistics
/// </summary>
class  V0_0_38_diag_statistics
    : public ModelBase
{
public:
    V0_0_38_diag_statistics();
    virtual ~V0_0_38_diag_statistics();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// V0_0_38_diag_statistics members

    /// <summary>
    /// partition records packed
    /// </summary>
    int32_t getPartsPacked() const;
    bool partsPackedIsSet() const;
    void unsetParts_packed();

    void setPartsPacked(int32_t value);

    /// <summary>
    /// generation time
    /// </summary>
    int32_t getReqTime() const;
    bool reqTimeIsSet() const;
    void unsetReq_time();

    void setReqTime(int32_t value);

    /// <summary>
    /// data since
    /// </summary>
    int32_t getReqTimeStart() const;
    bool reqTimeStartIsSet() const;
    void unsetReq_time_start();

    void setReqTimeStart(int32_t value);

    /// <summary>
    /// Server thread count
    /// </summary>
    int32_t getServerThreadCount() const;
    bool serverThreadCountIsSet() const;
    void unsetServer_thread_count();

    void setServerThreadCount(int32_t value);

    /// <summary>
    /// Agent queue size
    /// </summary>
    int32_t getAgentQueueSize() const;
    bool agentQueueSizeIsSet() const;
    void unsetAgent_queue_size();

    void setAgentQueueSize(int32_t value);

    /// <summary>
    /// Agent count
    /// </summary>
    int32_t getAgentCount() const;
    bool agentCountIsSet() const;
    void unsetAgent_count();

    void setAgentCount(int32_t value);

    /// <summary>
    /// Agent thread count
    /// </summary>
    int32_t getAgentThreadCount() const;
    bool agentThreadCountIsSet() const;
    void unsetAgent_thread_count();

    void setAgentThreadCount(int32_t value);

    /// <summary>
    /// DBD Agent queue size
    /// </summary>
    int32_t getDbdAgentQueueSize() const;
    bool dbdAgentQueueSizeIsSet() const;
    void unsetDbd_agent_queue_size();

    void setDbdAgentQueueSize(int32_t value);

    /// <summary>
    /// Latency for 1000 calls to gettimeofday()
    /// </summary>
    int32_t getGettimeofdayLatency() const;
    bool gettimeofdayLatencyIsSet() const;
    void unsetGettimeofday_latency();

    void setGettimeofdayLatency(int32_t value);

    /// <summary>
    /// Main Schedule max cycle
    /// </summary>
    int32_t getScheduleCycleMax() const;
    bool scheduleCycleMaxIsSet() const;
    void unsetSchedule_cycle_max();

    void setScheduleCycleMax(int32_t value);

    /// <summary>
    /// Main Schedule last cycle
    /// </summary>
    int32_t getScheduleCycleLast() const;
    bool scheduleCycleLastIsSet() const;
    void unsetSchedule_cycle_last();

    void setScheduleCycleLast(int32_t value);

    /// <summary>
    /// Main Schedule cycle iterations
    /// </summary>
    int32_t getScheduleCycleTotal() const;
    bool scheduleCycleTotalIsSet() const;
    void unsetSchedule_cycle_total();

    void setScheduleCycleTotal(int32_t value);

    /// <summary>
    /// Average time for Schedule Max cycle
    /// </summary>
    int32_t getScheduleCycleMean() const;
    bool scheduleCycleMeanIsSet() const;
    void unsetSchedule_cycle_mean();

    void setScheduleCycleMean(int32_t value);

    /// <summary>
    /// Average depth for Schedule Max cycle
    /// </summary>
    int32_t getScheduleCycleMeanDepth() const;
    bool scheduleCycleMeanDepthIsSet() const;
    void unsetSchedule_cycle_mean_depth();

    void setScheduleCycleMeanDepth(int32_t value);

    /// <summary>
    /// Main Schedule Cycles per minute
    /// </summary>
    int32_t getScheduleCyclePerMinute() const;
    bool scheduleCyclePerMinuteIsSet() const;
    void unsetSchedule_cycle_per_minute();

    void setScheduleCyclePerMinute(int32_t value);

    /// <summary>
    /// Main Schedule Last queue length
    /// </summary>
    int32_t getScheduleQueueLength() const;
    bool scheduleQueueLengthIsSet() const;
    void unsetSchedule_queue_length();

    void setScheduleQueueLength(int32_t value);

    /// <summary>
    /// Job submitted
    /// </summary>
    int32_t getJobsSubmitted() const;
    bool jobsSubmittedIsSet() const;
    void unsetJobs_submitted();

    void setJobsSubmitted(int32_t value);

    /// <summary>
    /// Job started
    /// </summary>
    int32_t getJobsStarted() const;
    bool jobsStartedIsSet() const;
    void unsetJobs_started();

    void setJobsStarted(int32_t value);

    /// <summary>
    /// Job completed
    /// </summary>
    int32_t getJobsCompleted() const;
    bool jobsCompletedIsSet() const;
    void unsetJobs_completed();

    void setJobsCompleted(int32_t value);

    /// <summary>
    /// Job cancelled
    /// </summary>
    int32_t getJobsCanceled() const;
    bool jobsCanceledIsSet() const;
    void unsetJobs_canceled();

    void setJobsCanceled(int32_t value);

    /// <summary>
    /// Job failed
    /// </summary>
    int32_t getJobsFailed() const;
    bool jobsFailedIsSet() const;
    void unsetJobs_failed();

    void setJobsFailed(int32_t value);

    /// <summary>
    /// Job pending
    /// </summary>
    int32_t getJobsPending() const;
    bool jobsPendingIsSet() const;
    void unsetJobs_pending();

    void setJobsPending(int32_t value);

    /// <summary>
    /// Job running
    /// </summary>
    int32_t getJobsRunning() const;
    bool jobsRunningIsSet() const;
    void unsetJobs_running();

    void setJobsRunning(int32_t value);

    /// <summary>
    /// Job states timestamp
    /// </summary>
    int32_t getJobStatesTs() const;
    bool jobStatesTsIsSet() const;
    void unsetJob_states_ts();

    void setJobStatesTs(int32_t value);

    /// <summary>
    /// Total backfilled jobs (since last slurm start)
    /// </summary>
    int32_t getBfBackfilledJobs() const;
    bool bfBackfilledJobsIsSet() const;
    void unsetBf_backfilled_jobs();

    void setBfBackfilledJobs(int32_t value);

    /// <summary>
    /// Total backfilled jobs (since last stats cycle start)
    /// </summary>
    int32_t getBfLastBackfilledJobs() const;
    bool bfLastBackfilledJobsIsSet() const;
    void unsetBf_last_backfilled_jobs();

    void setBfLastBackfilledJobs(int32_t value);

    /// <summary>
    /// Total backfilled heterogeneous job components
    /// </summary>
    int32_t getBfBackfilledHetJobs() const;
    bool bfBackfilledHetJobsIsSet() const;
    void unsetBf_backfilled_het_jobs();

    void setBfBackfilledHetJobs(int32_t value);

    /// <summary>
    /// Backfill Schedule Total cycles
    /// </summary>
    int32_t getBfCycleCounter() const;
    bool bfCycleCounterIsSet() const;
    void unsetBf_cycle_counter();

    void setBfCycleCounter(int32_t value);

    /// <summary>
    /// Backfill Schedule Mean cycle
    /// </summary>
    int32_t getBfCycleMean() const;
    bool bfCycleMeanIsSet() const;
    void unsetBf_cycle_mean();

    void setBfCycleMean(int32_t value);

    /// <summary>
    /// Backfill Schedule Max cycle time
    /// </summary>
    int32_t getBfCycleMax() const;
    bool bfCycleMaxIsSet() const;
    void unsetBf_cycle_max();

    void setBfCycleMax(int32_t value);

    /// <summary>
    /// Backfill Schedule Last depth cycle
    /// </summary>
    int32_t getBfLastDepth() const;
    bool bfLastDepthIsSet() const;
    void unsetBf_last_depth();

    void setBfLastDepth(int32_t value);

    /// <summary>
    /// Backfill Schedule Mean cycle (try sched)
    /// </summary>
    int32_t getBfLastDepthTry() const;
    bool bfLastDepthTryIsSet() const;
    void unsetBf_last_depth_try();

    void setBfLastDepthTry(int32_t value);

    /// <summary>
    /// Backfill Schedule Depth Mean
    /// </summary>
    int32_t getBfDepthMean() const;
    bool bfDepthMeanIsSet() const;
    void unsetBf_depth_mean();

    void setBfDepthMean(int32_t value);

    /// <summary>
    /// Backfill Schedule Depth Mean (try sched)
    /// </summary>
    int32_t getBfDepthMeanTry() const;
    bool bfDepthMeanTryIsSet() const;
    void unsetBf_depth_mean_try();

    void setBfDepthMeanTry(int32_t value);

    /// <summary>
    /// Backfill Schedule Last cycle time
    /// </summary>
    int32_t getBfCycleLast() const;
    bool bfCycleLastIsSet() const;
    void unsetBf_cycle_last();

    void setBfCycleLast(int32_t value);

    /// <summary>
    /// Backfill Schedule Last queue length
    /// </summary>
    int32_t getBfQueueLen() const;
    bool bfQueueLenIsSet() const;
    void unsetBf_queue_len();

    void setBfQueueLen(int32_t value);

    /// <summary>
    /// Backfill Schedule Mean queue length
    /// </summary>
    int32_t getBfQueueLenMean() const;
    bool bfQueueLenMeanIsSet() const;
    void unsetBf_queue_len_mean();

    void setBfQueueLenMean(int32_t value);

    /// <summary>
    /// Backfill Schedule Last table size
    /// </summary>
    int32_t getBfTableSize() const;
    bool bfTableSizeIsSet() const;
    void unsetBf_table_size();

    void setBfTableSize(int32_t value);

    /// <summary>
    /// Backfill Schedule Mean table size
    /// </summary>
    int32_t getBfTableSizeMean() const;
    bool bfTableSizeMeanIsSet() const;
    void unsetBf_table_size_mean();

    void setBfTableSizeMean(int32_t value);

    /// <summary>
    /// Last cycle timestamp
    /// </summary>
    int32_t getBfWhenLastCycle() const;
    bool bfWhenLastCycleIsSet() const;
    void unsetBf_when_last_cycle();

    void setBfWhenLastCycle(int32_t value);

    /// <summary>
    /// Backfill Schedule currently active
    /// </summary>
    bool isBfActive() const;
    bool bfActiveIsSet() const;
    void unsetBf_active();

    void setBfActive(bool value);

    /// <summary>
    /// Remote Procedure Call statistics by message type
    /// </summary>
    std::vector<std::shared_ptr<V0_0_38_diag_rpcm>>& getRpcsByMessageType();
    bool rpcsByMessageTypeIsSet() const;
    void unsetRpcs_by_message_type();

    void setRpcsByMessageType(const std::vector<std::shared_ptr<V0_0_38_diag_rpcm>>& value);

    /// <summary>
    /// Remote Procedure Call statistics by user
    /// </summary>
    std::vector<std::shared_ptr<V0_0_38_diag_rpcu>>& getRpcsByUser();
    bool rpcsByUserIsSet() const;
    void unsetRpcs_by_user();

    void setRpcsByUser(const std::vector<std::shared_ptr<V0_0_38_diag_rpcu>>& value);


protected:
    int32_t m_Parts_packed;
    bool m_Parts_packedIsSet;
    int32_t m_Req_time;
    bool m_Req_timeIsSet;
    int32_t m_Req_time_start;
    bool m_Req_time_startIsSet;
    int32_t m_Server_thread_count;
    bool m_Server_thread_countIsSet;
    int32_t m_Agent_queue_size;
    bool m_Agent_queue_sizeIsSet;
    int32_t m_Agent_count;
    bool m_Agent_countIsSet;
    int32_t m_Agent_thread_count;
    bool m_Agent_thread_countIsSet;
    int32_t m_Dbd_agent_queue_size;
    bool m_Dbd_agent_queue_sizeIsSet;
    int32_t m_Gettimeofday_latency;
    bool m_Gettimeofday_latencyIsSet;
    int32_t m_Schedule_cycle_max;
    bool m_Schedule_cycle_maxIsSet;
    int32_t m_Schedule_cycle_last;
    bool m_Schedule_cycle_lastIsSet;
    int32_t m_Schedule_cycle_total;
    bool m_Schedule_cycle_totalIsSet;
    int32_t m_Schedule_cycle_mean;
    bool m_Schedule_cycle_meanIsSet;
    int32_t m_Schedule_cycle_mean_depth;
    bool m_Schedule_cycle_mean_depthIsSet;
    int32_t m_Schedule_cycle_per_minute;
    bool m_Schedule_cycle_per_minuteIsSet;
    int32_t m_Schedule_queue_length;
    bool m_Schedule_queue_lengthIsSet;
    int32_t m_Jobs_submitted;
    bool m_Jobs_submittedIsSet;
    int32_t m_Jobs_started;
    bool m_Jobs_startedIsSet;
    int32_t m_Jobs_completed;
    bool m_Jobs_completedIsSet;
    int32_t m_Jobs_canceled;
    bool m_Jobs_canceledIsSet;
    int32_t m_Jobs_failed;
    bool m_Jobs_failedIsSet;
    int32_t m_Jobs_pending;
    bool m_Jobs_pendingIsSet;
    int32_t m_Jobs_running;
    bool m_Jobs_runningIsSet;
    int32_t m_Job_states_ts;
    bool m_Job_states_tsIsSet;
    int32_t m_Bf_backfilled_jobs;
    bool m_Bf_backfilled_jobsIsSet;
    int32_t m_Bf_last_backfilled_jobs;
    bool m_Bf_last_backfilled_jobsIsSet;
    int32_t m_Bf_backfilled_het_jobs;
    bool m_Bf_backfilled_het_jobsIsSet;
    int32_t m_Bf_cycle_counter;
    bool m_Bf_cycle_counterIsSet;
    int32_t m_Bf_cycle_mean;
    bool m_Bf_cycle_meanIsSet;
    int32_t m_Bf_cycle_max;
    bool m_Bf_cycle_maxIsSet;
    int32_t m_Bf_last_depth;
    bool m_Bf_last_depthIsSet;
    int32_t m_Bf_last_depth_try;
    bool m_Bf_last_depth_tryIsSet;
    int32_t m_Bf_depth_mean;
    bool m_Bf_depth_meanIsSet;
    int32_t m_Bf_depth_mean_try;
    bool m_Bf_depth_mean_tryIsSet;
    int32_t m_Bf_cycle_last;
    bool m_Bf_cycle_lastIsSet;
    int32_t m_Bf_queue_len;
    bool m_Bf_queue_lenIsSet;
    int32_t m_Bf_queue_len_mean;
    bool m_Bf_queue_len_meanIsSet;
    int32_t m_Bf_table_size;
    bool m_Bf_table_sizeIsSet;
    int32_t m_Bf_table_size_mean;
    bool m_Bf_table_size_meanIsSet;
    int32_t m_Bf_when_last_cycle;
    bool m_Bf_when_last_cycleIsSet;
    bool m_Bf_active;
    bool m_Bf_activeIsSet;
    std::vector<std::shared_ptr<V0_0_38_diag_rpcm>> m_Rpcs_by_message_type;
    bool m_Rpcs_by_message_typeIsSet;
    std::vector<std::shared_ptr<V0_0_38_diag_rpcu>> m_Rpcs_by_user;
    bool m_Rpcs_by_userIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_V0_0_38_diag_statistics_H_ */
