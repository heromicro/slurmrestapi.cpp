/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SlurmApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_SlurmApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_SlurmApi_H_



#include "slurmrestapi/ApiClient.h"

#include "slurmrestapi/model/Dbv0_0_39_account_info.h"
#include "slurmrestapi/model/Dbv0_0_39_associations_info.h"
#include "slurmrestapi/model/Dbv0_0_39_clusters_info.h"
#include "slurmrestapi/model/Dbv0_0_39_config_info.h"
#include "slurmrestapi/model/Dbv0_0_39_diag.h"
#include "slurmrestapi/model/Dbv0_0_39_job_info.h"
#include "slurmrestapi/model/Dbv0_0_39_qos_info.h"
#include "slurmrestapi/model/Dbv0_0_39_response_associations_delete.h"
#include "slurmrestapi/model/Dbv0_0_39_set_config.h"
#include "slurmrestapi/model/Dbv0_0_39_tres_info.h"
#include "slurmrestapi/model/Dbv0_0_39_tres_update.h"
#include "slurmrestapi/model/Dbv0_0_39_update_qos.h"
#include "slurmrestapi/model/Dbv0_0_39_update_users.h"
#include "slurmrestapi/model/Dbv0_0_39_user_info.h"
#include "slurmrestapi/model/Dbv0_0_39_wckey_info.h"
#include "slurmrestapi/model/Status.h"
#include "slurmrestapi/model/V0_0_39_diag.h"
#include "slurmrestapi/model/V0_0_39_job_desc_msg.h"
#include "slurmrestapi/model/V0_0_39_job_submission.h"
#include "slurmrestapi/model/V0_0_39_job_submission_response.h"
#include "slurmrestapi/model/V0_0_39_job_update_response.h"
#include "slurmrestapi/model/V0_0_39_jobs_response.h"
#include "slurmrestapi/model/V0_0_39_licenses_info.h"
#include "slurmrestapi/model/V0_0_39_nodes_response.h"
#include "slurmrestapi/model/V0_0_39_partitions_response.h"
#include "slurmrestapi/model/V0_0_39_pings.h"
#include "slurmrestapi/model/V0_0_39_reservations_response.h"
#include "slurmrestapi/model/V0_0_39_update_node_msg.h"
#include "slurmrestapi/model/V0_0_40_job_desc_msg.h"
#include "slurmrestapi/model/V0_0_40_job_submit_req.h"
#include "slurmrestapi/model/V0_0_40_kill_jobs_msg.h"
#include "slurmrestapi/model/V0_0_40_openapi_diag_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_job_info_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_job_post_response.h"
#include "slurmrestapi/model/V0_0_40_openapi_job_submit_response.h"
#include "slurmrestapi/model/V0_0_40_openapi_kill_jobs_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_licenses_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_nodes_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_partition_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_ping_array_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_reservation_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_shares_resp.h"
#include "slurmrestapi/model/V0_0_40_update_node_msg.h"
#include "slurmrestapi/model/V0_0_41_job_alloc_req.h"
#include "slurmrestapi/model/V0_0_41_job_desc_msg.h"
#include "slurmrestapi/model/V0_0_41_job_submit_req.h"
#include "slurmrestapi/model/V0_0_41_kill_jobs_msg.h"
#include "slurmrestapi/model/V0_0_41_openapi_diag_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_job_alloc_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_job_info_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_job_post_response.h"
#include "slurmrestapi/model/V0_0_41_openapi_job_submit_response.h"
#include "slurmrestapi/model/V0_0_41_openapi_kill_jobs_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_licenses_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_nodes_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_partition_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_ping_array_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_reservation_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_shares_resp.h"
#include "slurmrestapi/model/V0_0_41_update_node_msg.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  SlurmApi 
{
public:

    explicit SlurmApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SlurmApi();

    /// <summary>
    /// cancel or signal job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Slurm Job ID</param>
    /// <param name="signal">signal to send to job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Status>> slurmV0039CancelJob(
        utility::string_t jobId,
        boost::optional<utility::string_t> signal
    ) const;
    /// <summary>
    /// delete node
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Slurm Node Name</param>
    pplx::task<std::shared_ptr<Status>> slurmV0039DeleteNode(
        utility::string_t nodeName
    ) const;
    /// <summary>
    /// get diagnostics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_39_diag>> slurmV0039Diag(
    ) const;
    /// <summary>
    /// get job info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Slurm JobID</param>
    pplx::task<std::shared_ptr<V0_0_39_jobs_response>> slurmV0039GetJob(
        utility::string_t jobId
    ) const;
    /// <summary>
    /// get list of jobs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter if changed since update_time. Use of this parameter can result in faster replies. (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<V0_0_39_jobs_response>> slurmV0039GetJobs(
        boost::optional<int64_t> updateTime
    ) const;
    /// <summary>
    /// get node info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Slurm Node Name</param>
    pplx::task<std::shared_ptr<V0_0_39_nodes_response>> slurmV0039GetNode(
        utility::string_t nodeName
    ) const;
    /// <summary>
    /// get all node info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter if changed since update_time. Use of this parameter can result in faster replies. (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<V0_0_39_nodes_response>> slurmV0039GetNodes(
        boost::optional<int64_t> updateTime
    ) const;
    /// <summary>
    /// get partition info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="partitionName">Slurm Partition Name</param>
    /// <param name="updateTime">Filter if there were no partition changes (not limited to partition in URL endpoint) since update_time. (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<V0_0_39_partitions_response>> slurmV0039GetPartition(
        utility::string_t partitionName,
        boost::optional<int64_t> updateTime
    ) const;
    /// <summary>
    /// get all partition info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter if changed since update_time. Use of this parameter can result in faster replies. (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<V0_0_39_partitions_response>> slurmV0039GetPartitions(
        boost::optional<int64_t> updateTime
    ) const;
    /// <summary>
    /// get reservation info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="reservationName">Slurm Reservation Name</param>
    /// <param name="updateTime">Filter if no reservation (not limited to reservation in URL) changed since update_time. (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<V0_0_39_reservations_response>> slurmV0039GetReservation(
        utility::string_t reservationName,
        boost::optional<int64_t> updateTime
    ) const;
    /// <summary>
    /// get all reservation info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter if changed since update_time. Use of this parameter can result in faster replies. (optional, default to 0L)</param>
    pplx::task<std::shared_ptr<V0_0_39_reservations_response>> slurmV0039GetReservations(
        boost::optional<int64_t> updateTime
    ) const;
    /// <summary>
    /// ping test
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_39_pings>> slurmV0039Ping(
    ) const;
    /// <summary>
    /// get all Slurm tracked license info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_39_licenses_info>> slurmV0039SlurmctldGetLicenses(
    ) const;
    /// <summary>
    /// submit new job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0039JobSubmission">submit new job</param>
    pplx::task<std::shared_ptr<V0_0_39_job_submission_response>> slurmV0039SubmitJob(
        std::shared_ptr<V0_0_39_job_submission> v0039JobSubmission
    ) const;
    /// <summary>
    /// update job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Slurm Job ID</param>
    /// <param name="v0039JobDescMsg">update job</param>
    pplx::task<std::shared_ptr<V0_0_39_job_update_response>> slurmV0039UpdateJob(
        utility::string_t jobId,
        std::shared_ptr<V0_0_39_job_desc_msg> v0039JobDescMsg
    ) const;
    /// <summary>
    /// update node properties
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Slurm Node Name</param>
    /// <param name="v0039UpdateNodeMsg">update node</param>
    pplx::task<std::shared_ptr<Status>> slurmV0039UpdateNode(
        utility::string_t nodeName,
        std::shared_ptr<V0_0_39_update_node_msg> v0039UpdateNodeMsg
    ) const;
    /// <summary>
    /// cancel or signal job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Job ID</param>
    /// <param name="signal">Signal to send to Job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Signalling flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmV0040DeleteJob(
        utility::string_t jobId,
        boost::optional<utility::string_t> signal,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// send signal to list of jobs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040KillJobsMsg">Signal or cancel jobs (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_kill_jobs_resp>> slurmV0040DeleteJobs(
        boost::optional<std::shared_ptr<V0_0_40_kill_jobs_msg>> v0040KillJobsMsg
    ) const;
    /// <summary>
    /// delete node
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Node name</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmV0040DeleteNode(
        utility::string_t nodeName
    ) const;
    /// <summary>
    /// get diagnostics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_diag_resp>> slurmV0040GetDiag(
    ) const;
    /// <summary>
    /// get job info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Job ID</param>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_job_info_resp>> slurmV0040GetJob(
        utility::string_t jobId,
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get list of jobs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_job_info_resp>> slurmV0040GetJobs(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get list of job states
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_job_info_resp>> slurmV0040GetJobsState(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get all Slurm tracked license info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_licenses_resp>> slurmV0040GetLicenses(
    ) const;
    /// <summary>
    /// get node info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Node name</param>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_nodes_resp>> slurmV0040GetNode(
        utility::string_t nodeName,
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get node(s) info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_nodes_resp>> slurmV0040GetNodes(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get partition info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="partitionName">Partition name</param>
    /// <param name="updateTime">Filter partitions since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_partition_resp>> slurmV0040GetPartition(
        utility::string_t partitionName,
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get all partition info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter partitions since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_partition_resp>> slurmV0040GetPartitions(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// ping test
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_ping_array_resp>> slurmV0040GetPing(
    ) const;
    /// <summary>
    /// request slurmctld reconfigure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmV0040GetReconfigure(
    ) const;
    /// <summary>
    /// get reservation info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="reservationName">Reservation name</param>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_reservation_resp>> slurmV0040GetReservation(
        utility::string_t reservationName,
        boost::optional<utility::string_t> updateTime
    ) const;
    /// <summary>
    /// get all reservation info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_reservation_resp>> slurmV0040GetReservations(
        boost::optional<utility::string_t> updateTime
    ) const;
    /// <summary>
    /// get fairshare info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accounts">Accounts to query (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="users">Users to query (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_shares_resp>> slurmV0040GetShares(
        boost::optional<utility::string_t> accounts,
        boost::optional<utility::string_t> users
    ) const;
    /// <summary>
    /// update job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Job ID</param>
    /// <param name="v0040JobDescMsg">Job update description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_job_post_response>> slurmV0040PostJob(
        utility::string_t jobId,
        boost::optional<std::shared_ptr<V0_0_40_job_desc_msg>> v0040JobDescMsg
    ) const;
    /// <summary>
    /// submit new job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040JobSubmitReq">Job description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_job_submit_response>> slurmV0040PostJobSubmit(
        boost::optional<std::shared_ptr<V0_0_40_job_submit_req>> v0040JobSubmitReq
    ) const;
    /// <summary>
    /// update node properties
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Node name</param>
    /// <param name="v0040UpdateNodeMsg">Node update description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmV0040PostNode(
        utility::string_t nodeName,
        boost::optional<std::shared_ptr<V0_0_40_update_node_msg>> v0040UpdateNodeMsg
    ) const;
    /// <summary>
    /// cancel or signal job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Job ID</param>
    /// <param name="signal">Signal to send to Job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Signalling flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmV0041DeleteJob(
        utility::string_t jobId,
        boost::optional<utility::string_t> signal,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// send signal to list of jobs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041KillJobsMsg">Signal or cancel jobs (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_kill_jobs_resp>> slurmV0041DeleteJobs(
        boost::optional<std::shared_ptr<V0_0_41_kill_jobs_msg>> v0041KillJobsMsg
    ) const;
    /// <summary>
    /// delete node
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Node name</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmV0041DeleteNode(
        utility::string_t nodeName
    ) const;
    /// <summary>
    /// get diagnostics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_diag_resp>> slurmV0041GetDiag(
    ) const;
    /// <summary>
    /// get job info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Job ID</param>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_job_info_resp>> slurmV0041GetJob(
        utility::string_t jobId,
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get list of jobs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_job_info_resp>> slurmV0041GetJobs(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get list of job states
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_job_info_resp>> slurmV0041GetJobsState(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get all Slurm tracked license info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_licenses_resp>> slurmV0041GetLicenses(
    ) const;
    /// <summary>
    /// get node info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Node name</param>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_nodes_resp>> slurmV0041GetNode(
        utility::string_t nodeName,
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get node(s) info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter jobs since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_nodes_resp>> slurmV0041GetNodes(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get partition info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="partitionName">Partition name</param>
    /// <param name="updateTime">Filter partitions since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_partition_resp>> slurmV0041GetPartition(
        utility::string_t partitionName,
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// get all partition info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter partitions since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_partition_resp>> slurmV0041GetPartitions(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags
    ) const;
    /// <summary>
    /// ping test
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_ping_array_resp>> slurmV0041GetPing(
    ) const;
    /// <summary>
    /// request slurmctld reconfigure
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmV0041GetReconfigure(
    ) const;
    /// <summary>
    /// get reservation info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="reservationName">Reservation name</param>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_reservation_resp>> slurmV0041GetReservation(
        utility::string_t reservationName,
        boost::optional<utility::string_t> updateTime
    ) const;
    /// <summary>
    /// get all reservation info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_reservation_resp>> slurmV0041GetReservations(
        boost::optional<utility::string_t> updateTime
    ) const;
    /// <summary>
    /// get fairshare info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accounts">Accounts to query (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="users">Users to query (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_shares_resp>> slurmV0041GetShares(
        boost::optional<utility::string_t> accounts,
        boost::optional<utility::string_t> users
    ) const;
    /// <summary>
    /// update job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="jobId">Job ID</param>
    /// <param name="v0041JobDescMsg">Job update description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_job_post_response>> slurmV0041PostJob(
        utility::string_t jobId,
        boost::optional<std::shared_ptr<V0_0_41_job_desc_msg>> v0041JobDescMsg
    ) const;
    /// <summary>
    /// submit new job allocation without any steps that must be signaled to stop
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041JobAllocReq">Job allocation description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_job_alloc_resp>> slurmV0041PostJobAllocate(
        boost::optional<std::shared_ptr<V0_0_41_job_alloc_req>> v0041JobAllocReq
    ) const;
    /// <summary>
    /// submit new job
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041JobSubmitReq">Job description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_job_submit_response>> slurmV0041PostJobSubmit(
        boost::optional<std::shared_ptr<V0_0_41_job_submit_req>> v0041JobSubmitReq
    ) const;
    /// <summary>
    /// update node properties
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="nodeName">Node name</param>
    /// <param name="v0041UpdateNodeMsg">Node update description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmV0041PostNode(
        utility::string_t nodeName,
        boost::optional<std::shared_ptr<V0_0_41_update_node_msg>> v0041UpdateNodeMsg
    ) const;
    /// <summary>
    /// Add clusters
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039ClustersInfo">Add or update clusters</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039AddClusters(
        std::shared_ptr<Dbv0_0_39_clusters_info> dbv0039ClustersInfo
    ) const;
    /// <summary>
    /// Add wckeys
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039WckeyInfo">add wckeys (optional)</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039AddWckeys(
        boost::optional<std::shared_ptr<Dbv0_0_39_wckey_info>> dbv0039WckeyInfo
    ) const;
    /// <summary>
    /// Delete account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountName">Slurm Account Name</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039DeleteAccount(
        utility::string_t accountName
    ) const;
    /// <summary>
    /// Delete association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">Cluster name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="account">Account name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">User name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">Partition Name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_response_associations_delete>> slurmdbV0039DeleteAssociation(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> partition
    ) const;
    /// <summary>
    /// Delete associations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">Cluster name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="account">Account name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">User name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">Partition Name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_response_associations_delete>> slurmdbV0039DeleteAssociations(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> partition
    ) const;
    /// <summary>
    /// Delete cluster
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clusterName">Slurm cluster name</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039DeleteCluster(
        utility::string_t clusterName
    ) const;
    /// <summary>
    /// Delete QOS
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="qosName">Slurm QOS Name</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039DeleteQos(
        utility::string_t qosName
    ) const;
    /// <summary>
    /// Delete user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userName">Slurm User Name</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039DeleteUser(
        utility::string_t userName
    ) const;
    /// <summary>
    /// Delete wckey
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="wckey">Slurm wckey name</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039DeleteWckey(
        utility::string_t wckey
    ) const;
    /// <summary>
    /// Get slurmdb diagnostics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Dbv0_0_39_diag>> slurmdbV0039Diag(
    ) const;
    /// <summary>
    /// Get account info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountName">Slurm Account Name</param>
    /// <param name="withDeleted">Include deleted accounts. False by default. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_account_info>> slurmdbV0039GetAccount(
        utility::string_t accountName,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get account list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="withDeleted">Include deleted accounts. False by default. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_account_info>> slurmdbV0039GetAccounts(
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get association info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">Cluster name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="account">Account name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">User name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">Partition Name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_associations_info>> slurmdbV0039GetAssociation(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> partition
    ) const;
    /// <summary>
    /// Get association list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">Cluster name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="account">Account name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">User name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">Partition Name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_associations_info>> slurmdbV0039GetAssociations(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> partition
    ) const;
    /// <summary>
    /// Get cluster info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clusterName">Slurm cluster name</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_clusters_info>> slurmdbV0039GetCluster(
        utility::string_t clusterName
    ) const;
    /// <summary>
    /// Get cluster list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Dbv0_0_39_clusters_info>> slurmdbV0039GetClusters(
    ) const;
    /// <summary>
    /// Dump all configuration information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Dbv0_0_39_config_info>> slurmdbV0039GetConfig(
    ) const;
    /// <summary>
    /// Get job info
    /// </summary>
    /// <remarks>
    /// This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.
    /// </remarks>
    /// <param name="jobId">Slurm JobID</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_job_info>> slurmdbV0039GetJob(
        utility::string_t jobId
    ) const;
    /// <summary>
    /// Get job list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="users">Filter by comma delimited list of user names (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="submitTime">Filter by submission time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startTime">Filter by start time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endTime">Filter by end time  Accepted formats:  HH:MM[:SS] [AM|PM]  MMDD[YY] or MM/DD[/YY] or MM.DD[.YY]  MM/DD[/YY]-HH:MM[:SS]  YYYY-MM-DD[THH:MM[:SS]] (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="account">Comma delimited list of accounts to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="association">Comma delimited list of associations to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">Comma delimited list of cluster to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="constraints">Comma delimited list of constraints to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cpusMax">Number of CPUs high range (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cpusMin">Number of CPUs low range (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="skipSteps">Report job step information (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableWaitForResult">Disable waiting for result from slurmdbd (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exitCode">Exit code of job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Comma delimited list of formats to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="group">Comma delimited list of groups to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jobName">Comma delimited list of job names to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodesMax">Number of nodes high range (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodesMin">Number of nodes low range (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">Comma delimited list of partitions to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">Comma delimited list of QOS to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reason">Comma delimited list of job reasons to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reservation">Comma delimited list of reservations to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="state">Comma delimited list of states to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="step">Comma delimited list of job steps to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="node">Comma delimited list of used nodes to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="wckey">Comma delimited list of wckeys to match (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_job_info>> slurmdbV0039GetJobs(
        boost::optional<utility::string_t> users,
        boost::optional<utility::string_t> submitTime,
        boost::optional<utility::string_t> startTime,
        boost::optional<utility::string_t> endTime,
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> association,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> constraints,
        boost::optional<utility::string_t> cpusMax,
        boost::optional<utility::string_t> cpusMin,
        boost::optional<utility::string_t> skipSteps,
        boost::optional<utility::string_t> disableWaitForResult,
        boost::optional<utility::string_t> exitCode,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> group,
        boost::optional<utility::string_t> jobName,
        boost::optional<utility::string_t> nodesMax,
        boost::optional<utility::string_t> nodesMin,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> reason,
        boost::optional<utility::string_t> reservation,
        boost::optional<utility::string_t> state,
        boost::optional<utility::string_t> step,
        boost::optional<utility::string_t> node,
        boost::optional<utility::string_t> wckey
    ) const;
    /// <summary>
    /// Get QOS list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="withDeleted">Include deleted QOSs. False by default. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_qos_info>> slurmdbV0039GetQos(
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get QOS info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="qosName">Slurm QOS Name</param>
    /// <param name="withDeleted">Include deleted QOSs. False by default. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_qos_info>> slurmdbV0039GetSingleQos(
        utility::string_t qosName,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get TRES info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Dbv0_0_39_tres_info>> slurmdbV0039GetTres(
    ) const;
    /// <summary>
    /// Get user info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="userName">Slurm User Name</param>
    /// <param name="withDeleted">Include deleted users. False by default. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_user_info>> slurmdbV0039GetUser(
        utility::string_t userName,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get user list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="withDeleted">Include deleted users. False by default. (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_user_info>> slurmdbV0039GetUsers(
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get wckey info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="wckey">Slurm wckey name</param>
    pplx::task<std::shared_ptr<Dbv0_0_39_wckey_info>> slurmdbV0039GetWckey(
        utility::string_t wckey
    ) const;
    /// <summary>
    /// Get wckey list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<Dbv0_0_39_wckey_info>> slurmdbV0039GetWckeys(
    ) const;
    /// <summary>
    /// Load all configuration information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039SetConfig">Add or update config (optional)</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039SetConfig(
        boost::optional<std::shared_ptr<Dbv0_0_39_set_config>> dbv0039SetConfig
    ) const;
    /// <summary>
    /// Update accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039AccountInfo">update/create accounts</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039UpdateAccounts(
        std::shared_ptr<Dbv0_0_39_account_info> dbv0039AccountInfo
    ) const;
    /// <summary>
    /// Set associations info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039AssociationsInfo">Add or update associations</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039UpdateAssociations(
        std::shared_ptr<Dbv0_0_39_associations_info> dbv0039AssociationsInfo
    ) const;
    /// <summary>
    /// Set QOS info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039UpdateQos">Add or update QOSs</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039UpdateQos(
        std::shared_ptr<Dbv0_0_39_update_qos> dbv0039UpdateQos
    ) const;
    /// <summary>
    /// Set TRES info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039TresUpdate">Add or Update TRES</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039UpdateTres(
        std::shared_ptr<Dbv0_0_39_tres_update> dbv0039TresUpdate
    ) const;
    /// <summary>
    /// Update user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="dbv0039UpdateUsers">add or update user</param>
    pplx::task<std::shared_ptr<Status>> slurmdbV0039UpdateUsers(
        std::shared_ptr<Dbv0_0_39_update_users> dbv0039UpdateUsers
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_SlurmApi_H_ */

