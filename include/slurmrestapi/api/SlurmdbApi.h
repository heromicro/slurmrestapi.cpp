/**
 * Slurm REST API
 * API to access and control Slurm
 *
 * The version of the OpenAPI document: Slurm-24.05.5&openapi/dbv0.0.39&openapi/slurmctld&openapi/slurmdbd&openapi/v0.0.39
 * Contact: sales@schedmd.com
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.10.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * SlurmdbApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_SlurmdbApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_SlurmdbApi_H_



#include "slurmrestapi/ApiClient.h"

#include "slurmrestapi/model/V0_0_40_openapi_accounts_add_cond_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_accounts_add_cond_resp_str.h"
#include "slurmrestapi/model/V0_0_40_openapi_accounts_removed_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_accounts_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_assocs_removed_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_assocs_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_clusters_removed_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_clusters_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_instances_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_slurmdbd_config_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_slurmdbd_jobs_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_slurmdbd_qos_removed_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_slurmdbd_qos_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_slurmdbd_stats_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_tres_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_users_add_cond_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_users_add_cond_resp_str.h"
#include "slurmrestapi/model/V0_0_40_openapi_users_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_wckey_removed_resp.h"
#include "slurmrestapi/model/V0_0_40_openapi_wckey_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_accounts_add_cond_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_accounts_add_cond_resp_str.h"
#include "slurmrestapi/model/V0_0_41_openapi_accounts_removed_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_accounts_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_assocs_removed_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_assocs_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_clusters_removed_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_clusters_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_instances_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_config_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_jobs_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_qos_removed_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_qos_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_slurmdbd_stats_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_tres_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_add_cond_resp_str.h"
#include "slurmrestapi/model/V0_0_41_openapi_users_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_wckey_removed_resp.h"
#include "slurmrestapi/model/V0_0_41_openapi_wckey_resp.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  SlurmdbApi 
{
public:

    explicit SlurmdbApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~SlurmdbApi();

    /// <summary>
    /// Delete account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountName">Account name</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_accounts_removed_resp>> slurmdbV0040DeleteAccount(
        utility::string_t accountName
    ) const;
    /// <summary>
    /// Delete association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information also (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_assocs_removed_resp>> slurmdbV0040DeleteAssociation(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Delete associations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information also (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_assocs_removed_resp>> slurmdbV0040DeleteAssociations(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Delete cluster
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clusterName">Cluster name</param>
    /// <param name="classification">Type of machine (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV cluster list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="federation">CSV federation list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rpcVersion">CSV RPC version list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted clusters (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_clusters_removed_resp>> slurmdbV0040DeleteCluster(
        utility::string_t clusterName,
        boost::optional<utility::string_t> classification,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> federation,
        boost::optional<utility::string_t> flags,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> rpcVersion,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withUsage
    ) const;
    /// <summary>
    /// Delete QOS
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="qos">QOS name</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_qos_removed_resp>> slurmdbV0040DeleteSingleQos(
        utility::string_t qos
    ) const;
    /// <summary>
    /// Delete user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">User name</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040DeleteUser(
        utility::string_t name
    ) const;
    /// <summary>
    /// Delete wckey
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">wckey id</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_wckey_removed_resp>> slurmdbV0040DeleteWckey(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get account info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountName">Account name</param>
    /// <param name="withAssocs">Include associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">Include coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_accounts_resp>> slurmdbV0040GetAccount(
        utility::string_t accountName,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get account list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="description">CSV description list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withAssocs">Include associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">Include coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted accounts (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_accounts_resp>> slurmdbV0040GetAccounts(
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get association info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information also (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_assocs_resp>> slurmdbV0040GetAssociation(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Get association list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information also (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_assocs_resp>> slurmdbV0040GetAssociations(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Get cluster info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clusterName">Cluster name</param>
    /// <param name="classification">Type of machine (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV cluster list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="federation">CSV federation list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rpcVersion">CSV RPC version list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted clusters (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_clusters_resp>> slurmdbV0040GetCluster(
        utility::string_t clusterName,
        boost::optional<utility::string_t> classification,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> federation,
        boost::optional<utility::string_t> flags,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> rpcVersion,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withUsage
    ) const;
    /// <summary>
    /// Get cluster list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_clusters_resp>> slurmdbV0040GetClusters(
        boost::optional<utility::string_t> updateTime
    ) const;
    /// <summary>
    /// Dump all configuration information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_config_resp>> slurmdbV0040GetConfig(
    ) const;
    /// <summary>
    /// Get slurmdb diagnostics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_stats_resp>> slurmdbV0040GetDiag(
    ) const;
    /// <summary>
    /// Get instance info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="extra">CSV extra list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceId">CSV instance_id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceType">CSV instance_type list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodeList">Ranged node string (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Time end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Time start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_instances_resp>> slurmdbV0040GetInstance(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> extra,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> instanceId,
        boost::optional<utility::string_t> instanceType,
        boost::optional<utility::string_t> nodeList,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<utility::string_t> timeStart
    ) const;
    /// <summary>
    /// Get instance list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="extra">CSV extra list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceId">CSV instance_id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceType">CSV instance_type list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodeList">Ranged node string (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Time end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Time start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_instances_resp>> slurmdbV0040GetInstances(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> extra,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> instanceId,
        boost::optional<utility::string_t> instanceType,
        boost::optional<utility::string_t> nodeList,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<utility::string_t> timeStart
    ) const;
    /// <summary>
    /// Get job info
    /// </summary>
    /// <remarks>
    /// This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.
    /// </remarks>
    /// <param name="jobId">Job id</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_jobs_resp>> slurmdbV0040GetJob(
        utility::string_t jobId
    ) const;
    /// <summary>
    /// Get job list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV account list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="association">CSV association list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV cluster list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="constraints">CSV constraint list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cpusMax">Maximum number of cpus (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cpusMin">Minimum number of cpus (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="schedulerUnset">Schedule bits not set (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="scheduledOnSubmit">Job was started on submit (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="scheduledByMain">Job was started from main scheduler (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="scheduledByBackfill">Job was started from backfill (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jobStarted">Job start RPC was received (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exitCode">Job exit code (numeric) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showDuplicates">Include duplicate job entries (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="skipSteps">Exclude job step details (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableTruncateUsageTime">Do not truncate the time to usage_start and usage_end (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="wholeHetjob">Include details on all hetjob components (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableWholeHetjob">Only show details on specified hetjob components (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableWaitForResult">Tell dbd not to wait for the result (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageTimeAsSubmitTime">Use usage_time as the submit_time of the job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showBatchScript">Include job script (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showJobEnvironment">Include job environment (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="groups">CSV group list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jobName">CSV job name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodesMax">Maximum number of nodes (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodesMin">Minimum number of nodes (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reason">CSV reason list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reservation">CSV reservation name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reservationId">CSV reservation ID list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="state">CSV state list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="step">CSV step id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timelimitMax">Maximum timelimit (seconds) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timelimitMin">Minimum timelimit (seconds) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endTime">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startTime">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="submitTime">Submit time (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="node">Ranged node string where jobs ran (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="users">CSV user name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="wckey">CSV wckey list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_jobs_resp>> slurmdbV0040GetJobs(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> association,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> constraints,
        boost::optional<utility::string_t> cpusMax,
        boost::optional<utility::string_t> cpusMin,
        boost::optional<utility::string_t> schedulerUnset,
        boost::optional<utility::string_t> scheduledOnSubmit,
        boost::optional<utility::string_t> scheduledByMain,
        boost::optional<utility::string_t> scheduledByBackfill,
        boost::optional<utility::string_t> jobStarted,
        boost::optional<utility::string_t> exitCode,
        boost::optional<utility::string_t> showDuplicates,
        boost::optional<utility::string_t> skipSteps,
        boost::optional<utility::string_t> disableTruncateUsageTime,
        boost::optional<utility::string_t> wholeHetjob,
        boost::optional<utility::string_t> disableWholeHetjob,
        boost::optional<utility::string_t> disableWaitForResult,
        boost::optional<utility::string_t> usageTimeAsSubmitTime,
        boost::optional<utility::string_t> showBatchScript,
        boost::optional<utility::string_t> showJobEnvironment,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> groups,
        boost::optional<utility::string_t> jobName,
        boost::optional<utility::string_t> nodesMax,
        boost::optional<utility::string_t> nodesMin,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> reason,
        boost::optional<utility::string_t> reservation,
        boost::optional<utility::string_t> reservationId,
        boost::optional<utility::string_t> state,
        boost::optional<utility::string_t> step,
        boost::optional<utility::string_t> timelimitMax,
        boost::optional<utility::string_t> timelimitMin,
        boost::optional<utility::string_t> endTime,
        boost::optional<utility::string_t> startTime,
        boost::optional<utility::string_t> submitTime,
        boost::optional<utility::string_t> node,
        boost::optional<utility::string_t> users,
        boost::optional<utility::string_t> wckey
    ) const;
    /// <summary>
    /// Get QOS list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="description">CSV description list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV QOS id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV QOS name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="preemptMode">PreemptMode used when jobs in this QOS are preempted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted QOS (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_qos_resp>> slurmdbV0040GetQos(
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> preemptMode,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get QOS info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="qos">QOS name</param>
    /// <param name="withDeleted">Query includes deleted QOS (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_slurmdbd_qos_resp>> slurmdbV0040GetSingleQos(
        utility::string_t qos,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get TRES info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_40_openapi_tres_resp>> slurmdbV0040GetTres(
    ) const;
    /// <summary>
    /// Get user info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">User name</param>
    /// <param name="withDeleted">Include deleted users (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withAssocs">Include associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">Include coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withWckeys">Include wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_users_resp>> slurmdbV0040GetUser(
        utility::string_t name,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withWckeys
    ) const;
    /// <summary>
    /// Get user list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="adminLevel">Administrator level (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultAccount">CSV default account list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultWckey">CSV default wckey list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withAssocs">With associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">With coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">With deleted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withWckeys">With wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutDefaults">Exclude defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_users_resp>> slurmdbV0040GetUsers(
        boost::optional<utility::string_t> adminLevel,
        boost::optional<utility::string_t> defaultAccount,
        boost::optional<utility::string_t> defaultWckey,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withWckeys,
        boost::optional<utility::string_t> withoutDefaults
    ) const;
    /// <summary>
    /// Get wckey info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">wckey id</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_wckey_resp>> slurmdbV0040GetWckey(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get wckey list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV cluster name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Only query defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_wckey_resp>> slurmdbV0040GetWckeys(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Add/update list of accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040OpenapiAccountsResp">Description of accounts to update/create (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostAccounts(
        boost::optional<std::shared_ptr<V0_0_40_openapi_accounts_resp>> v0040OpenapiAccountsResp
    ) const;
    /// <summary>
    /// Add accounts with conditional association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040OpenapiAccountsAddCondResp">Add list of accounts with conditional association (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_accounts_add_cond_resp_str>> slurmdbV0040PostAccountsAssociation(
        boost::optional<std::shared_ptr<V0_0_40_openapi_accounts_add_cond_resp>> v0040OpenapiAccountsAddCondResp
    ) const;
    /// <summary>
    /// Set associations info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040OpenapiAssocsResp">Job description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostAssociations(
        boost::optional<std::shared_ptr<V0_0_40_openapi_assocs_resp>> v0040OpenapiAssocsResp
    ) const;
    /// <summary>
    /// Get cluster list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0040OpenapiClustersResp">Cluster add or update descriptions (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostClusters(
        boost::optional<utility::string_t> updateTime,
        boost::optional<std::shared_ptr<V0_0_40_openapi_clusters_resp>> v0040OpenapiClustersResp
    ) const;
    /// <summary>
    /// Load all configuration information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040OpenapiSlurmdbdConfigResp">Add or update config (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostConfig(
        boost::optional<std::shared_ptr<V0_0_40_openapi_slurmdbd_config_resp>> v0040OpenapiSlurmdbdConfigResp
    ) const;
    /// <summary>
    /// Add or update QOSs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="description">CSV description list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV QOS id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV QOS name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="preemptMode">PreemptMode used when jobs in this QOS are preempted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted QOS (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0040OpenapiSlurmdbdQosResp">Description of QOS to add or update (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostQos(
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> preemptMode,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<std::shared_ptr<V0_0_40_openapi_slurmdbd_qos_resp>> v0040OpenapiSlurmdbdQosResp
    ) const;
    /// <summary>
    /// Add TRES
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040OpenapiTresResp">TRES descriptions. Only works in developer mode. (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostTres(
        boost::optional<std::shared_ptr<V0_0_40_openapi_tres_resp>> v0040OpenapiTresResp
    ) const;
    /// <summary>
    /// Update users
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0040OpenapiUsersResp">add or update user (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostUsers(
        boost::optional<std::shared_ptr<V0_0_40_openapi_users_resp>> v0040OpenapiUsersResp
    ) const;
    /// <summary>
    /// Add users with conditional association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter partitions since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0040OpenapiUsersAddCondResp">Create users with conditional association (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_users_add_cond_resp_str>> slurmdbV0040PostUsersAssociation(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags,
        boost::optional<std::shared_ptr<V0_0_40_openapi_users_add_cond_resp>> v0040OpenapiUsersAddCondResp
    ) const;
    /// <summary>
    /// Add or update wckeys
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV cluster name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Only query defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0040OpenapiWckeyResp">wckeys description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_40_openapi_resp>> slurmdbV0040PostWckeys(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<std::shared_ptr<V0_0_40_openapi_wckey_resp>> v0040OpenapiWckeyResp
    ) const;
    /// <summary>
    /// Delete account
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountName">Account name</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_accounts_removed_resp>> slurmdbV0041DeleteAccount(
        utility::string_t accountName
    ) const;
    /// <summary>
    /// Delete association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_assocs_removed_resp>> slurmdbV0041DeleteAssociation(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Delete associations
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_assocs_removed_resp>> slurmdbV0041DeleteAssociations(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Delete cluster
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clusterName">Cluster name</param>
    /// <param name="classification">Type of machine (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV cluster list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="federation">CSV federation list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rpcVersion">CSV RPC version list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted clusters (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_clusters_removed_resp>> slurmdbV0041DeleteCluster(
        utility::string_t clusterName,
        boost::optional<utility::string_t> classification,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> federation,
        boost::optional<utility::string_t> flags,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> rpcVersion,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withUsage
    ) const;
    /// <summary>
    /// Delete QOS
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="qos">QOS name</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_qos_removed_resp>> slurmdbV0041DeleteSingleQos(
        utility::string_t qos
    ) const;
    /// <summary>
    /// Delete user
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">User name</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041DeleteUser(
        utility::string_t name
    ) const;
    /// <summary>
    /// Delete wckey
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">wckey id</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_wckey_removed_resp>> slurmdbV0041DeleteWckey(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get account info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="accountName">Account name</param>
    /// <param name="withAssocs">Include associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">Include coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_accounts_resp>> slurmdbV0041GetAccount(
        utility::string_t accountName,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get account list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="description">CSV description list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="dELETED">include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withAssociations">query includes associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoordinators">query includes coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="noUsersAreCoords">remove users as coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usersAreCoords">users are coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_accounts_resp>> slurmdbV0041GetAccounts(
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> dELETED,
        boost::optional<utility::string_t> withAssociations,
        boost::optional<utility::string_t> withCoordinators,
        boost::optional<utility::string_t> noUsersAreCoords,
        boost::optional<utility::string_t> usersAreCoords
    ) const;
    /// <summary>
    /// Get association info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_assocs_resp>> slurmdbV0041GetAssociation(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Get association list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV accounts list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultQos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Filter to only defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="parentAccount">CSV names of parent account (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withRawQos">Include a raw qos or delta_qos (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withSubAccts">Include sub acct information (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentInfo">Exclude parent id/name (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutParentLimits">Exclude limits from parents (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_assocs_resp>> slurmdbV0041GetAssociations(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> defaultQos,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> parentAccount,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withRawQos,
        boost::optional<utility::string_t> withSubAccts,
        boost::optional<utility::string_t> withoutParentInfo,
        boost::optional<utility::string_t> withoutParentLimits
    ) const;
    /// <summary>
    /// Get cluster info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="clusterName">Cluster name</param>
    /// <param name="classification">Type of machine (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV cluster list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="federation">CSV federation list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="rpcVersion">CSV RPC version list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted clusters (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_clusters_resp>> slurmdbV0041GetCluster(
        utility::string_t clusterName,
        boost::optional<utility::string_t> classification,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> federation,
        boost::optional<utility::string_t> flags,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> rpcVersion,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withUsage
    ) const;
    /// <summary>
    /// Get cluster list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_clusters_resp>> slurmdbV0041GetClusters(
        boost::optional<utility::string_t> updateTime
    ) const;
    /// <summary>
    /// Dump all configuration information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp>> slurmdbV0041GetConfig(
    ) const;
    /// <summary>
    /// Get slurmdb diagnostics
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_stats_resp>> slurmdbV0041GetDiag(
    ) const;
    /// <summary>
    /// Get instance info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="extra">CSV extra list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceId">CSV instance_id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceType">CSV instance_type list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodeList">Ranged node string (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Time end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Time start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_instances_resp>> slurmdbV0041GetInstance(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> extra,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> instanceId,
        boost::optional<utility::string_t> instanceType,
        boost::optional<utility::string_t> nodeList,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<utility::string_t> timeStart
    ) const;
    /// <summary>
    /// Get instance list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV clusters list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="extra">CSV extra list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceId">CSV instance_id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="instanceType">CSV instance_type list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="nodeList">Ranged node string (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeEnd">Time end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="timeStart">Time start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_instances_resp>> slurmdbV0041GetInstances(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> extra,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> instanceId,
        boost::optional<utility::string_t> instanceType,
        boost::optional<utility::string_t> nodeList,
        boost::optional<utility::string_t> timeEnd,
        boost::optional<utility::string_t> timeStart
    ) const;
    /// <summary>
    /// Get job info
    /// </summary>
    /// <remarks>
    /// This endpoint may return multiple job entries since job_id is not a unique key - only the tuple (cluster, job_id, start_time) is unique. If the requested job_id is a component of a heterogeneous job all components are returned.
    /// </remarks>
    /// <param name="jobId">Job id</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp>> slurmdbV0041GetJob(
        utility::string_t jobId
    ) const;
    /// <summary>
    /// Get job list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="account">CSV account list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="association">CSV association list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="cluster">CSV cluster list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="constraints">CSV constraint list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="schedulerUnset">Schedule bits not set (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="scheduledOnSubmit">Job was started on submit (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="scheduledByMain">Job was started from main scheduler (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="scheduledByBackfill">Job was started from backfill (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jobStarted">Job start RPC was received (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="exitCode">Job exit code (numeric) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showDuplicates">Include duplicate job entries (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="skipSteps">Exclude job step details (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableTruncateUsageTime">Do not truncate the time to usage_start and usage_end (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="wholeHetjob">Include details on all hetjob components (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableWholeHetjob">Only show details on specified hetjob components (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="disableWaitForResult">Tell dbd not to wait for the result (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageTimeAsSubmitTime">Use usage_time as the submit_time of the job (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showBatchScript">Include job script (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="showJobEnvironment">Include job environment (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="groups">CSV group list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="jobName">CSV job name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="partition">CSV partition name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="qos">CSV QOS name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reason">CSV reason list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reservation">CSV reservation name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="reservationId">CSV reservation ID list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="state">CSV state list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="step">CSV step id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="endTime">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="startTime">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="node">Ranged node string where jobs ran (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="users">CSV user name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="wckey">CSV wckey list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_jobs_resp>> slurmdbV0041GetJobs(
        boost::optional<utility::string_t> account,
        boost::optional<utility::string_t> association,
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> constraints,
        boost::optional<utility::string_t> schedulerUnset,
        boost::optional<utility::string_t> scheduledOnSubmit,
        boost::optional<utility::string_t> scheduledByMain,
        boost::optional<utility::string_t> scheduledByBackfill,
        boost::optional<utility::string_t> jobStarted,
        boost::optional<utility::string_t> exitCode,
        boost::optional<utility::string_t> showDuplicates,
        boost::optional<utility::string_t> skipSteps,
        boost::optional<utility::string_t> disableTruncateUsageTime,
        boost::optional<utility::string_t> wholeHetjob,
        boost::optional<utility::string_t> disableWholeHetjob,
        boost::optional<utility::string_t> disableWaitForResult,
        boost::optional<utility::string_t> usageTimeAsSubmitTime,
        boost::optional<utility::string_t> showBatchScript,
        boost::optional<utility::string_t> showJobEnvironment,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> groups,
        boost::optional<utility::string_t> jobName,
        boost::optional<utility::string_t> partition,
        boost::optional<utility::string_t> qos,
        boost::optional<utility::string_t> reason,
        boost::optional<utility::string_t> reservation,
        boost::optional<utility::string_t> reservationId,
        boost::optional<utility::string_t> state,
        boost::optional<utility::string_t> step,
        boost::optional<utility::string_t> endTime,
        boost::optional<utility::string_t> startTime,
        boost::optional<utility::string_t> node,
        boost::optional<utility::string_t> users,
        boost::optional<utility::string_t> wckey
    ) const;
    /// <summary>
    /// Get QOS list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="description">CSV description list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV QOS id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV QOS name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="preemptMode">PreemptMode used when jobs in this QOS are preempted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted QOS (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_qos_resp>> slurmdbV0041GetQos(
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> preemptMode,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get QOS info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="qos">QOS name</param>
    /// <param name="withDeleted">Query includes deleted QOS (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_slurmdbd_qos_resp>> slurmdbV0041GetSingleQos(
        utility::string_t qos,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Get TRES info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    pplx::task<std::shared_ptr<V0_0_41_openapi_tres_resp>> slurmdbV0041GetTres(
    ) const;
    /// <summary>
    /// Get user info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="name">User name</param>
    /// <param name="withDeleted">Include deleted users (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withAssocs">Include associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">Include coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withWckeys">Include wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_users_resp>> slurmdbV0041GetUser(
        utility::string_t name,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withWckeys
    ) const;
    /// <summary>
    /// Get user list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="adminLevel">Administrator level (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultAccount">CSV default account list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="defaultWckey">CSV default wckey list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withAssocs">With associations (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withCoords">With coordinators (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">With deleted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withWckeys">With wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withoutDefaults">Exclude defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_users_resp>> slurmdbV0041GetUsers(
        boost::optional<utility::string_t> adminLevel,
        boost::optional<utility::string_t> defaultAccount,
        boost::optional<utility::string_t> defaultWckey,
        boost::optional<utility::string_t> withAssocs,
        boost::optional<utility::string_t> withCoords,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<utility::string_t> withWckeys,
        boost::optional<utility::string_t> withoutDefaults
    ) const;
    /// <summary>
    /// Get wckey info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id">wckey id</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_wckey_resp>> slurmdbV0041GetWckey(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get wckey list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV cluster name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Only query defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_wckey_resp>> slurmdbV0041GetWckeys(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted
    ) const;
    /// <summary>
    /// Add/update list of accounts
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041OpenapiAccountsResp">Description of accounts to update/create (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostAccounts(
        boost::optional<std::shared_ptr<V0_0_41_openapi_accounts_resp>> v0041OpenapiAccountsResp
    ) const;
    /// <summary>
    /// Add accounts with conditional association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041OpenapiAccountsAddCondResp">Add list of accounts with conditional association (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_accounts_add_cond_resp_str>> slurmdbV0041PostAccountsAssociation(
        boost::optional<std::shared_ptr<V0_0_41_openapi_accounts_add_cond_resp>> v0041OpenapiAccountsAddCondResp
    ) const;
    /// <summary>
    /// Set associations info
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041OpenapiAssocsResp">Job description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostAssociations(
        boost::optional<std::shared_ptr<V0_0_41_openapi_assocs_resp>> v0041OpenapiAssocsResp
    ) const;
    /// <summary>
    /// Get cluster list
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter reservations since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0041OpenapiClustersResp">Cluster add or update descriptions (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostClusters(
        boost::optional<utility::string_t> updateTime,
        boost::optional<std::shared_ptr<V0_0_41_openapi_clusters_resp>> v0041OpenapiClustersResp
    ) const;
    /// <summary>
    /// Load all configuration information
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041OpenapiSlurmdbdConfigResp">Add or update config (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostConfig(
        boost::optional<std::shared_ptr<V0_0_41_openapi_slurmdbd_config_resp>> v0041OpenapiSlurmdbdConfigResp
    ) const;
    /// <summary>
    /// Add or update QOSs
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="description">CSV description list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV QOS id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV QOS name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="preemptMode">PreemptMode used when jobs in this QOS are preempted (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted QOS (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0041OpenapiSlurmdbdQosResp">Description of QOS to add or update (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostQos(
        boost::optional<utility::string_t> description,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> preemptMode,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<std::shared_ptr<V0_0_41_openapi_slurmdbd_qos_resp>> v0041OpenapiSlurmdbdQosResp
    ) const;
    /// <summary>
    /// Add TRES
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041OpenapiTresResp">TRES descriptions. Only works in developer mode. (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostTres(
        boost::optional<std::shared_ptr<V0_0_41_openapi_tres_resp>> v0041OpenapiTresResp
    ) const;
    /// <summary>
    /// Update users
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="v0041OpenapiUsersResp">add or update user (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostUsers(
        boost::optional<std::shared_ptr<V0_0_41_openapi_users_resp>> v0041OpenapiUsersResp
    ) const;
    /// <summary>
    /// Add users with conditional association
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="updateTime">Filter partitions since update timestamp (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="flags">Query flags (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0041OpenapiUsersAddCondResp">Create users with conditional association (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_users_add_cond_resp_str>> slurmdbV0041PostUsersAssociation(
        boost::optional<utility::string_t> updateTime,
        boost::optional<utility::string_t> flags,
        boost::optional<std::shared_ptr<V0_0_41_openapi_users_add_cond_resp>> v0041OpenapiUsersAddCondResp
    ) const;
    /// <summary>
    /// Add or update wckeys
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="cluster">CSV cluster name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="format">Ignored; process JSON manually to control output format (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="id">CSV id list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="name">CSV name list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="onlyDefaults">Only query defaults (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageEnd">Usage end (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="usageStart">Usage start (UNIX timestamp) (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="user">CSV user list (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withUsage">Include usage (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="withDeleted">Include deleted wckeys (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    /// <param name="v0041OpenapiWckeyResp">wckeys description (optional)</param>
    pplx::task<std::shared_ptr<V0_0_41_openapi_resp>> slurmdbV0041PostWckeys(
        boost::optional<utility::string_t> cluster,
        boost::optional<utility::string_t> format,
        boost::optional<utility::string_t> id,
        boost::optional<utility::string_t> name,
        boost::optional<utility::string_t> onlyDefaults,
        boost::optional<utility::string_t> usageEnd,
        boost::optional<utility::string_t> usageStart,
        boost::optional<utility::string_t> user,
        boost::optional<utility::string_t> withUsage,
        boost::optional<utility::string_t> withDeleted,
        boost::optional<std::shared_ptr<V0_0_41_openapi_wckey_resp>> v0041OpenapiWckeyResp
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_SlurmdbApi_H_ */

